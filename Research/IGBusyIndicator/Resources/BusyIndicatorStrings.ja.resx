<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Animation" xml:space="preserve">
    <value>アニメーション</value>
  </data>
  <data name="AnimationSize" xml:space="preserve">
    <value>アニメーション サイズ</value>
  </data>
  <data name="Animations_ComboLabel" xml:space="preserve">
    <value>アニメーションの選択</value>
  </data>
  <data name="ApplyCustomTemplate" xml:space="preserve">
    <value>カスタム テンプレートを適用</value>
  </data>
  <data name="Background" xml:space="preserve">
    <value>背景</value>
  </data>
  <data name="BackgroundBrush" xml:space="preserve">
    <value>背景ブラシ</value>
  </data>
  <data name="Border" xml:space="preserve">
    <value>境界線</value>
  </data>
  <data name="BorderBrush" xml:space="preserve">
    <value>境界線ブラシ</value>
  </data>
  <data name="BorderThickness" xml:space="preserve">
    <value>境界線太さ</value>
  </data>
  <data name="BugFixingTask" xml:space="preserve">
    <value>バグ修正</value>
  </data>
  <data name="BusyContent" xml:space="preserve">
    <value>ビジー コンテンツ</value>
  </data>
  <data name="BusyIndicator_BusyContent" xml:space="preserve">
    <value>ビジー コンテンツ テキスト</value>
  </data>
  <data name="BusyIndicator_BusyContentStyle" xml:space="preserve">
    <value>コンテンツにカスタム テンプレートを適用</value>
  </data>
  <data name="BusyIndicator_DisplayAfter" xml:space="preserve">
    <value>表示遅延 (秒)</value>
  </data>
  <data name="BusyIndicator_FocusTargetElement" xml:space="preserve">
    <value>フォーカスする要素</value>
  </data>
  <data name="BusyIndicator_IsBusy" xml:space="preserve">
    <value>IsBusy</value>
  </data>
  <data name="BusyIndicator_IsIndeterminate" xml:space="preserve">
    <value>IsIndeterminate</value>
  </data>
  <data name="BusyIndicator_IsIndicatorVisible" xml:space="preserve">
    <value>インジケーターの表示</value>
  </data>
  <data name="BusyIndicator_OverlayStyle" xml:space="preserve">
    <value>オーバーレイ ブラシ</value>
  </data>
  <data name="BusyText1" xml:space="preserve">
    <value>少々お待ちください。</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="CollectFeedbackNote" xml:space="preserve">
    <value>お客様とお打合せ</value>
  </data>
  <data name="CollectFeedbackTask" xml:space="preserve">
    <value>フィードバックの収集</value>
  </data>
  <data name="CreateApplicationTask" xml:space="preserve">
    <value>デモ アプリケーションを作成します</value>
  </data>
  <data name="DemoNotes" xml:space="preserve">
    <value>基本機能と UI を表示するデモ アプリケーションの作成</value>
  </data>
  <data name="DesignNote" xml:space="preserve">
    <value>コア API と UI のデザイン</value>
  </data>
  <data name="DesignTask" xml:space="preserve">
    <value>デザイン</value>
  </data>
  <data name="DevelopmentNote" xml:space="preserve">
    <value>主な機能の実装</value>
  </data>
  <data name="DevelopmentTask" xml:space="preserve">
    <value>開発</value>
  </data>
  <data name="DocumentingNote" xml:space="preserve">
    <value>プロジェクト要件と仕様の概要</value>
  </data>
  <data name="DocumentTask" xml:space="preserve">
    <value>仕様の作成</value>
  </data>
  <data name="FixingNote" xml:space="preserve">
    <value>バグ修正と実装向上</value>
  </data>
  <data name="FontFamilies" xml:space="preserve">
    <value>フォント ファミリ</value>
  </data>
  <data name="FontSize" xml:space="preserve">
    <value>フォント サイズ</value>
  </data>
  <data name="FontStyles" xml:space="preserve">
    <value>フォント スタイル</value>
  </data>
  <data name="FontWeight" xml:space="preserve">
    <value>フォント ウェイト</value>
  </data>
  <data name="Foreground" xml:space="preserve">
    <value>前景</value>
  </data>
  <data name="FreeText_NotDefinedYet" xml:space="preserve">
    <value>定義されていない</value>
  </data>
  <data name="FreeText_StillInDiscussion" xml:space="preserve">
    <value>決定されていない</value>
  </data>
  <data name="LargeResultSet_ConfigHeader" xml:space="preserve">
    <value>ビッグデータセットへバインド</value>
  </data>
  <data name="LargeResultSet_Generate" xml:space="preserve">
    <value>データを作成</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>読み込んでいます ...</value>
  </data>
  <data name="LoadingCompleted" xml:space="preserve">
    <value>読み込みが完了しました。</value>
  </data>
  <data name="LoadingInterrupted" xml:space="preserve">
    <value>読み込みがユーザーにより中止されました。</value>
  </data>
  <data name="LoadingOrdersDataPercent" xml:space="preserve">
    <value>注文データを読み込んでいます... {0} %</value>
  </data>
  <data name="LoadingScatterData" xml:space="preserve">
    <value>散布データを読み込んでいます...</value>
  </data>
  <data name="LoadingScatterDataPercent" xml:space="preserve">
    <value>散布データを読み込んでいます... {0} %</value>
  </data>
  <data name="MainSummaryTask" xml:space="preserve">
    <value>プロジェクト計画</value>
  </data>
  <data name="Mask_BorderThickness" xml:space="preserve">
    <value>{number:0-100}</value>
  </data>
  <data name="Mask_DoubleNumber" xml:space="preserve">
    <value>{double:2.3}</value>
  </data>
  <data name="Mask_FontSize" xml:space="preserve">
    <value>{number:8-72}</value>
  </data>
  <data name="Mask_Number" xml:space="preserve">
    <value>{number}</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>注文番号</value>
  </data>
  <data name="Overlay" xml:space="preserve">
    <value>オーバーレイ</value>
  </data>
  <data name="Padding" xml:space="preserve">
    <value>パッディング</value>
  </data>
  <data name="PlanningNote" xml:space="preserve">
    <value>必要な予算とリソースの計算</value>
  </data>
  <data name="PlanningTask" xml:space="preserve">
    <value>予定</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>価格</value>
  </data>
  <data name="ProjectComplete" xml:space="preserve">
    <value>プロジェクト完了</value>
  </data>
  <data name="ProjectSummaryTask" xml:space="preserve">
    <value>プロジェクト概要タスク</value>
  </data>
  <data name="Quanity" xml:space="preserve">
    <value>量</value>
  </data>
  <data name="RowsLoaded" xml:space="preserve">
    <value>読み込み済み行数:</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>　</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>進行状況:</value>
  </data>
  <data name="TestingNote" xml:space="preserve">
    <value>機能とユーザー エクスペリエンスのテスト</value>
  </data>
  <data name="TestingTask" xml:space="preserve">
    <value>テスト</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>合計</value>
  </data>
  <data name="ProgressValue" xml:space="preserve">
    <value>進行状況の値:</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>企業名</value>
  </data>
  <data name="ContactName" xml:space="preserve">
    <value>名前</value>
  </data>
  <data name="CustomerDetails" xml:space="preserve">
    <value>顧客の詳細</value>
  </data>
  <data name="CustomersOverview" xml:space="preserve">
    <value>顧客の概要</value>
  </data>
  <data name="DeliveryDate" xml:space="preserve">
    <value>出荷日付</value>
  </data>
  <data name="DeliveryQuantity" xml:space="preserve">
    <value>出荷単位数</value>
  </data>
  <data name="EnterCompanyName" xml:space="preserve">
    <value>企業名の入力</value>
  </data>
  <data name="EnterContactName" xml:space="preserve">
    <value>名前の入力</value>
  </data>
  <data name="MaskPhone" xml:space="preserve">
    <value>(###) ###-####</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>電話</value>
  </data>
  <data name="UIElement_Focus" xml:space="preserve">
    <value>フォーカスする UIElement</value>
  </data>
  <data name="LoadingOrdersData" xml:space="preserve">
    <value>注文データを読み込んでいます...</value>
  </data>
  <data name="BusyIndicator_GeneratedStyle_MesageBox" xml:space="preserve">
    <value>XAML スタイルが生成され、クリップボードにコピーされました。</value>
  </data>
  <data name="BusyIndicator_GenerateStyleText" xml:space="preserve">
    <value>スタイルをクリップボードにコピー</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>閉じる</value>
  </data>
  <data name="ElapsedTime" xml:space="preserve">
    <value>経過時間</value>
  </data>
  <data name="ShowIndicator" xml:space="preserve">
    <value>ビジー インジケータの表示</value>
  </data>
  <data name="TotalSeconds" xml:space="preserve">
    <value>{0} 秒</value>
  </data>
  <data name="Mask_Secs" xml:space="preserve">
    <value>{number:1-40}</value>
  </data>
</root>