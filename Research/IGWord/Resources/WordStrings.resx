<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EllipseShapeText" xml:space="preserve">
    <value>Ellipse anchored to text.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FooterText" xml:space="preserve">
    <value>This text appears in the footer.  </value>
  </data>
  <data name="FormattedContentHeading" xml:space="preserve">
    <value>Word Document with Formatting</value>
  </data>
  <data name="FormattedContentSampleText1" xml:space="preserve">
    <value>This paragraph is right aligned with different font settings.</value>
  </data>
  <data name="FormattedContentSampleText2" xml:space="preserve">
    <value>Sample Text: A paragraph is a series of sentences that are organized and coherent, and are all related to a single topic. Almost every piece of writing you do that is longer than a few sentences should be organized into paragraphs. This is because paragraphs show a reader where the subdivisions of an essay begin and end, and thus help the reader see the organization of the essay and grasp its main points.</value>
  </data>
  <data name="FormattedContentSampleText3" xml:space="preserve">
    <value>These pages are defined by the FinalSectionProperties object. The size of the page is set to 7x5 inches and the Orientation is set to Landscape. To create different page attributes for various pages you can use the SectionProperties object and define them using the DefineSection object.</value>
  </data>
  <data name="HeaderFooterSampleText1" xml:space="preserve">
    <value>Lorem Ipsum</value>
  </data>
  <data name="HeaderFooterSampleText2" xml:space="preserve">
    <value>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</value>
  </data>
  <data name="HeadersHeading" xml:space="preserve">
    <value>Headers, Footers and Page Numbers</value>
  </data>
  <data name="HeaderText" xml:space="preserve">
    <value>This text appears in the Header.</value>
  </data>
  <data name="Hyperlink" xml:space="preserve">
    <value>Hyperlink</value>
  </data>
  <data name="HyperlinkAddress" xml:space="preserve">
    <value>http://www.infragistics.com</value>
  </data>
  <data name="HyperlinkText" xml:space="preserve">
    <value>Infragistics Inc.</value>
  </data>
  <data name="HyperlinkTooltip" xml:space="preserve">
    <value>This is a link to Infragistics website</value>
  </data>
  <data name="ImagesAlternateTextDesc" xml:space="preserve">
    <value>Word Image</value>
  </data>
  <data name="ImagesHeading" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="ImagesSampleText1" xml:space="preserve">
    <value>Anchored Picture: An Anchored picture or image is one that is anchored to a specific location within the document. Unlike an inline picture, which moves along with adjacent content, an Anchored Picture remains at a fixed location within the paragraph, with adjacent text flowing around it.</value>
  </data>
  <data name="ImagesSampleText2" xml:space="preserve">
    <value>Inline Picture: An inline picture moves with the adjacent content.</value>
  </data>
  <data name="IsocelesShapeText" xml:space="preserve">
    <value>Isosceles triangle anchored to text.</value>
  </data>
  <data name="LineShapeText" xml:space="preserve">
    <value>Line anchored to text.</value>
  </data>
  <data name="NestedTableHeading1" xml:space="preserve">
    <value>Nested Table</value>
  </data>
  <data name="NestedTableHeading2" xml:space="preserve">
    <value>Nested Table</value>
  </data>
  <data name="NestedTableSampleText1" xml:space="preserve">
    <value>Row1 Col1</value>
  </data>
  <data name="NestedTableSampleText2" xml:space="preserve">
    <value>Nested Table Row1 Col1</value>
  </data>
  <data name="NestedTableSampleText3" xml:space="preserve">
    <value>Nested Table Row1 Col2</value>
  </data>
  <data name="NestedTableSampleText4" xml:space="preserve">
    <value>Nested Table Row2 Col1</value>
  </data>
  <data name="NestedTableSampleText5" xml:space="preserve">
    <value>This nested table cell displays an image and a hyperlink.</value>
  </data>
  <data name="NestedTableSampleText6" xml:space="preserve">
    <value>This paragraph displays a Hyperlink.</value>
  </data>
  <data name="NestedTableSampleText7" xml:space="preserve">
    <value>Row2 Col1</value>
  </data>
  <data name="NestedTableSampleText8" xml:space="preserve">
    <value>Row2 Col2</value>
  </data>
  <data name="RectangleShapeText" xml:space="preserve">
    <value>Rectangle anchored to text.</value>
  </data>
  <data name="RightTrianglShapeText" xml:space="preserve">
    <value>Right triangle anchored to text.</value>
  </data>
  <data name="ShapesHeading" xml:space="preserve">
    <value>Shapes</value>
  </data>
  <data name="SimpleWordDocHeading" xml:space="preserve">
    <value>Simple Word Document</value>
  </data>
  <data name="SimpleWordDocSampleText" xml:space="preserve">
    <value>This is an example of a simple Word document created using Infragistics® Word Library. The Title and Author for this document are set using the Document Properties object.</value>
  </data>
  <data name="SimpleWordDocTitle" xml:space="preserve">
    <value>Sample Document</value>
  </data>
  <data name="TableHeading" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="TableHyperlinkAddress" xml:space="preserve">
    <value>http://www.google.com</value>
  </data>
  <data name="TableHyperlinkText" xml:space="preserve">
    <value>Google site</value>
  </data>
  <data name="TableImgAltTextDesc" xml:space="preserve">
    <value>Image within Table Cell</value>
  </data>
  <data name="TableSampleText1" xml:space="preserve">
    <value>Table Header</value>
  </data>
  <data name="TableSampleText2" xml:space="preserve">
    <value>A paragraph is a series of sentences that are organized and coherent, and are all related to a single topic. </value>
  </data>
  <data name="TableSampleText3" xml:space="preserve">
    <value>Row2 Column2</value>
  </data>
  <data name="TableSampleText4" xml:space="preserve">
    <value>This table cell has a Hyperlink.</value>
  </data>
  <data name="Streamer_btnFormattedContent" xml:space="preserve">
    <value>Formatted Word Document</value>
  </data>
  <data name="Streamer_btnHeaderFooter" xml:space="preserve">
    <value>Header and Footer</value>
  </data>
  <data name="Streamer_btnHyperlinks" xml:space="preserve">
    <value>Hyperlink</value>
  </data>
  <data name="Streamer_btnImages" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="Streamer_btnNestedTable" xml:space="preserve">
    <value>Nested table</value>
  </data>
  <data name="Streamer_btnShapes" xml:space="preserve">
    <value>Shapes</value>
  </data>
  <data name="Streamer_btnTable" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="Streamer_btnWordDoc" xml:space="preserve">
    <value>Word Document</value>
  </data>
  <data name="Streamer_ConfigArea_Header" xml:space="preserve">
    <value>Create Word Documents</value>
  </data>
</root>