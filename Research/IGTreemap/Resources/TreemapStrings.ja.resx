<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="XWM_SpatialData_CountryCode" xml:space="preserve">
    <value>国コード:</value>
  </data>
  <data name="XWM_SpatialData_CountryName" xml:space="preserve">
    <value>国名:</value>
  </data>
  <data name="XWM_WorldData_DataTypeLabel" xml:space="preserve">
    <value>データ タイプの選択</value>
  </data>
  <data name="XWM_WorldData_Types_BirthLabel" xml:space="preserve">
    <value>出生率</value>
  </data>
  <data name="XWM_WorldData_Types_DebtLabel" xml:space="preserve">
    <value>公共負債</value>
  </data>
  <data name="XWM_WorldData_Types_ElectricLabel" xml:space="preserve">
    <value>電力生産</value>
  </data>
  <data name="XWM_WorldData_Types_InternetLabel" xml:space="preserve">
    <value>インターネット ユーザー</value>
  </data>
  <data name="XWM_WorldData_Types_MedianAgeLabel" xml:space="preserve">
    <value>年齢の中央値</value>
  </data>
  <data name="XWM_WorldData_Types_OilLabel" xml:space="preserve">
    <value>石油生産</value>
  </data>
  <data name="XWM_WorldData_Types_PopLabel" xml:space="preserve">
    <value>人口</value>
  </data>
  <data name="XWM_WorldData_Types_TVLabel" xml:space="preserve">
    <value>テレビ</value>
  </data>
  <data name="XWM_WorldData_Types_UnEmployLabel" xml:space="preserve">
    <value>失業率</value>
  </data>
  <data name="XWT_ButtonClear" xml:space="preserve">
    <value>クリア</value>
  </data>
  <data name="XWT_DataMinMax_Revenue" xml:space="preserve">
    <value>製造業売上</value>
  </data>
  <data name="XWT_DataMinMax_StandardCost" xml:space="preserve">
    <value>製品標準価格</value>
  </data>
  <data name="XWT_ItemMinSize" xml:space="preserve">
    <value>項目の最小サイズ</value>
  </data>
  <data name="XWT_LayoutOrientations" xml:space="preserve">
    <value>レイアウトの方向</value>
  </data>
  <data name="XWT_LayoutTypes" xml:space="preserve">
    <value>レイアウトのタイプ</value>
  </data>
  <data name="XWT_ProductsCount" xml:space="preserve">
    <value>製品の数:</value>
  </data>
  <data name="XWT_RaisedEvents" xml:space="preserve">
    <value>発生したイベント</value>
  </data>
  <data name="XWT_Revenue" xml:space="preserve">
    <value>収益:</value>
  </data>
  <data name="XWT_SelectedNodes" xml:space="preserve">
    <value>選択したノード</value>
  </data>
  <data name="XWT_Shelf" xml:space="preserve">
    <value>位置</value>
  </data>
  <data name="XWT_ShowingDepth" xml:space="preserve">
    <value>表示深さ</value>
  </data>
  <data name="XWT_Toggle_Error_Message" xml:space="preserve">
    <value>エラー メッセージの切り替え</value>
  </data>
  <data name="XWT_TreemapLoaded" xml:space="preserve">
    <value>ツリーマップを読み込みました</value>
  </data>
</root>