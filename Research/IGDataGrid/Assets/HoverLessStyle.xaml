<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:igWindows="http://infragistics.com/Windows" 
    xmlns:igDP="http://infragistics.com/DataPresenter" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    mc:Ignorable="d" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">

    <!-- ____________________________________________________________________________ -->
    <!--                                                                              -->
    <!--                             Converters                                       -->
    <!-- ____________________________________________________________________________ -->
    <igDP:TextAlignmentToHorizontalAlignmentConverter x:Key="textAlignmentToHorizontalAlignmentConverter" />

    <!--SSP 7/20/09 - NAS9.2 Field Chooser - Added NotBoolToVisibilityConverter-->
    <igWindows:NotBoolToVisibilityConverter x:Key="NotBoolToVisConverter" />
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
    <!-- _________________________ CellValuePresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:CellValuePresenter}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BackgroundHover" Value="Transparent" />
        <Setter Property="BorderHoverBrush" Value="Transparent" />
        <Setter Property="BackgroundActive">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FF85A2B2" />
                    <GradientStop Offset="1.1" Color="#00FFFFFF" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderActiveBrush" Value="#00151C55" />
        <Setter Property="BackgroundSelected">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FFCAEBFF" />
                    <GradientStop Offset="1.1" Color="#00FFFFFF" />
                    <GradientStop Color="#83CAEBFF" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderSelectedBrush" Value="#FF666666" />
        <Setter Property="BackgroundFieldSelected">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FFDDDDDD" />
                    <GradientStop Offset="1.1" Color="#00FFFFFF" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderFieldSelectedBrush" Value="#FF666666" />
        <Setter Property="BackgroundPrimary" Value="#7FE9E9E9" />
        <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9" />
        <Setter Property="ForegroundStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- AS 5/23/07 BR23120 -->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                    <igWindows:CardPanel>
                        <Border x:Name="MainBorder" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="Active" Fill="{TemplateBinding BackgroundActive}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True" Opacity="1" Visibility="Collapsed" StrokeThickness="1" Stroke="{TemplateBinding BorderActiveBrush}" />
                        <ContentPresenter x:Name="PART_EditorSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Style="{TemplateBinding ForegroundStyle}" />
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <!-- HighlightAsPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!-- IsFieldSelected -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!--<Setter Property="Visibility" Value="Visible" TargetName="LeftBorder" />-->
                        </Trigger>
                        <!-- IsActive -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="Active" Value="Visible" />
                        </Trigger>
                        <!-- IsMouseOver -->
                        <!--REMOVE-->
                        <!-- Field.IsFixedStateChanging    JM 01-22-09 NA 9.1 FixedFields   -->
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" Value="#AA8DBAEB" />
                            <Setter Property="BorderBrush" Value="#AA8DBAEB" />
                        </DataTrigger>
                        <!--SSP 5/27/09 NAS9.2 IDataErrorInfo Support-->
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!-- _________________________ DataRecordPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:DataRecordPresenter}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}" />
        <Setter Property="NestedContentBackground" Value="Transparent" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderBrush" Value="#FFCCCCCC" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <Border Visibility="Collapsed" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, AddRowBackground}}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" x:Name="addRowFooter" VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <!-- Expansion Checkbox -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
                            <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
                            <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
                            <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="5" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7" Visibility="Collapsed" />
                            <igWindows:ExpansionIndicator x:Name="ExpansionIndicator" Panel.ZIndex="1" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="2" Grid.Column="0" Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}" CommandParameter="{TemplateBinding Record}" ToggleMode="Manual" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!-- Header Background -->
                            <!-- Added 8/2/2006 GH -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
                            <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
                            <igWindows:CardPanel x:Name="SpacerFill" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="5" Visibility="Visible">
                                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}" />
                                <Rectangle x:Name="lightLine" Fill="#3FFFFFFF" VerticalAlignment="Top" Margin="0,1,0,0" Width="Auto" Height="1" />
                                <Rectangle x:Name="darkLine" Fill="#66000000" VerticalAlignment="Top" Margin="0,0,0,0" Width="Auto" Height="1" />
                            </igWindows:CardPanel>
                            <!-- End Added 8/2/2006 GH -->
                            <!-- Header Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
                            <ContentPresenter x:Name="PART_HeaderContentSite" Grid.Row="0" Grid.Column="2" Content="{TemplateBinding HeaderContent}" Visibility="Visible" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" d:IsHidden="True" />
                            <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
                            <Border x:Name="RecordSeparator" Grid.Row="1" Grid.Column="0" Visibility="Collapsed" Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}}" Grid.ColumnSpan="5" />
                            <!-- Record Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
                            <ContentPresenter x:Name="PART_RecordContentSite" Grid.Row="2" Grid.Column="2" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <!-- Nested Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
                            <!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
                            <Border x:Name="PART_NestedContentSite" Grid.Row="4" Grid.Column="2" Visibility="Visible" HorizontalAlignment="Left" VerticalAlignment="Top" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding NestedContentBackground}">
                                <!-- AS 11/14/07 BR26035 
                                The namescope was broken because the recordlistcontrol was not in the logical tree. We 
                                need to use a ContentControl instead so the content	is made a logical child. -->
                                <ContentControl RenderTransform="{TemplateBinding ScrollableElementTransform}" Content="{TemplateBinding NestedContent}" Margin="2,0,0,0" x:Name="contentControl" />
                                <!--Margin="10,10,0,0" />-->
                            </Border>
                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="4" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5" />
                            <!--<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>-->
                            <Setter TargetName="RecordSeparator" Property="Width" Value="10" />
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto" />
                            <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0" />
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible" />
                            <!-- END SSP 5/6/08 - Record Separators -->
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                                <Condition Property="IsHeaderRecord" Value="False" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3" />
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <!--JJD 9/4/07 - BR26153 -->
                            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0" />
                        </Trigger>
                        <!--JJD 9/4/07 - BR26153 -->
                        <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHeaderRecord" Value="True" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="False">
                            <Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible" />
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,0,0,1" />
                            <Setter Property="Margin" Value="0,0,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible" />
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0" />
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter Property="Margin" Value="0,1,0,0" />
                        </MultiDataTrigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="5" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorBefore" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="5" />
                        </MultiTrigger>
                        <!-- END SSP 5/6/08 - Record Separators -->
                        <!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
                        <Trigger Property="IsFilteredOut" Value="True">
                            <Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!-- Record Content -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CardBackground}}" />
                        <ContentPresenter x:Name="PART_RecordContentSite" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!-- _________________________ DataRecordCellArea __________________________________________ -->
    <Style TargetType="{x:Type igDP:DataRecordCellArea}">
        <!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#00FFFFFF" Offset="0" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#00000000" />
        <Setter Property="BackgroundHover">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FFD3F5FF" />
                    <GradientStop Offset="1" Color="#FFB9D8FF" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderHoverBrush" Value="#FFAECDF9" />
        <Setter Property="BackgroundActive">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#BFE8E8E8" />
                    <GradientStop Offset="1" Color="#00EEEEEE" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderActiveBrush" Value="#00000000" />
        <Setter Property="BackgroundAlternate">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#0C000000" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderAlternateBrush" Value="#00000000" />
        <Setter Property="BackgroundSelected">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#7FD3F5FF" />
                    <GradientStop Offset="1" Color="#7FB9D8FF" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderSelectedBrush" Value="#00000000" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordCellArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="timelineIsActive">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsActive_off">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected_off">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover_off">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <igWindows:CardPanel>
                        <!-- Background -->
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <!-- Background Alternate -->
                        <Border x:Name="Alternate" Visibility="Collapsed" Background="{TemplateBinding BackgroundAlternate}" BorderBrush="{TemplateBinding BorderAlternateBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="1" />
                        <!-- Background Selected -->
                        <Border x:Name="Selected" Visibility="Visible" Background="{TemplateBinding BackgroundSelected}" BorderBrush="{TemplateBinding BorderSelectedBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="0" />
                        <!-- Background Hover -->
                        <Border x:Name="Hover" Visibility="Visible" Background="{TemplateBinding BackgroundHover}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderHoverBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                        <!-- Background Active -->
                        <Border x:Name="Active" Visibility="Collapsed" Background="{TemplateBinding BackgroundActive}" BorderBrush="{TemplateBinding BorderActiveBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" />
                        <ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" Content="{TemplateBinding Content}" />
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAlternate" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                                <Condition Property="IsAddRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Alternate" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="Active" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="timelineIsSelected_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="timelineIsSelected_off_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected_off}" />
                            </MultiTrigger.ExitActions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igDP:LabelPresenter}">
        <Setter Property="Padding" Value="7,4" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}" />
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}" />
        <Setter Property="InnerBorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelInnerBorder}}" />
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelOuterBorder}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}" />
        <!--SSP 7/6/09 - Field Chooser - Added ToolTip property on the field.-->
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbHighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00" />
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00" />
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHighlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr" Margin="2,4,2,4" Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition x:Name="fishColumn" Width="0" />
                        </Grid.ColumnDefinitions>
                        <!-- Background Bar -->
                        <Border Width="Auto" Height="Auto" RenderTransformOrigin="0.5,0.5" CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelCornerRadius}}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" x:Name="background" />
                        <!-- Highlight -->
                        <Border x:Name="highlight" Opacity="0" Width="Auto" Height="Auto" CornerRadius="2,2,2,2" Background="{TemplateBinding LabelHighlight}" SnapsToDevicePixels="True" />
                        <Border BorderBrush="{TemplateBinding OuterBorderBrush}" BorderThickness="1" CornerRadius="1.55015910897703" Background="Transparent" Margin="0,0,0,0" x:Name="lineOuter" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                        <Border BorderBrush="{TemplateBinding InnerBorderBrush}" BorderThickness="1" CornerRadius="0.550159108977027" Background="Transparent" Margin="1,1,1,1" x:Name="lineInner" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                        <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHeadHighlight" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding LabelHighlight}" Opacity="0" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHeadInnerStroke" Visibility="Collapsed" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z" Fill="{TemplateBinding InnerBorderBrush}" Grid.Column="1" Margin="-1,1,1,1" SnapsToDevicePixels="True" />
                        <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="sortIndicatorAndLabel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="LabelContent" Focusable="False" Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" d:LayoutOverrides="Width, Height" VerticalAlignment="Center" />
                            <igWindows:SortIndicator x:Name="SortIndicator" SortStatus="{TemplateBinding SortStatus}" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Grid.Column="1" Margin="5,0,0,0" />
                            <!-- SSP 3/31/08 - Summaries Functionality -->
                            <igDP:SummaryButton x:Name="SummaryButton" Field="{TemplateBinding Field}" Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Grid.Column="2" Margin="5,0,0,0" Opacity="0.4" />
                            <!-- JJD 1/06/09 - Filtering Functionality -->
                            <igDP:FilterButton x:Name="FilterButton" Field="{TemplateBinding Field}" Visibility="{TemplateBinding FilterButtonVisibility}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Grid.Column="3" Opacity="0.4" Margin="5,0,0,0" />
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton x:Name="FixedButton" Field="{TemplateBinding Field}" Visibility="{TemplateBinding FixedButtonVisibility}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Grid.Column="4" Margin="2,0,2,0" Opacity="0.4" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- HighlightPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top" />
                            <Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center" />
                            <Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0" />
                        </Trigger>
                        <!-- Only animate highlight -->

                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="CornerRadius" Value="2,0,0,2" />
                            <Setter TargetName="highlight" Property="CornerRadius" Value="2,0,0,2" />
                            <Setter TargetName="lineOuter" Property="CornerRadius" Value="2,0,0,2" />
                            <Setter TargetName="lineInner" Property="CornerRadius" Value="2,0,0,2" />
                            <Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineOuter" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineInner" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineInner" Property="Margin" Value="1,1,0,1" />
                            <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHead" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishColumn" Property="Width" Value="14" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="labelCntr" Property="Margin" Value="-24,4,2,4" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="25,4,5,4" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4,2,4" />
                        </DataTrigger>

                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>