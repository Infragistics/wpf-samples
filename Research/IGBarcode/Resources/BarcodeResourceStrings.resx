<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AILength" xml:space="preserve">
    <value>[Localizable] The AI should have at least 2 digits.</value>
  </data>
  <data name="BadFormedUCCValue" xml:space="preserve">
    <value>[Localizable] The UCC Barcode Data is not well formed. It should look like (AI)GTIN.</value>
  </data>
  <data name="Code39_NonNumericError" xml:space="preserve">
    <value>[Localizable] The character '{0}' is invalid for CODE39 Data. The valid ones are: {1}</value>
  </data>
  <data name="CountryError" xml:space="preserve">
    <value>[Localizable] Error converting country code. It should be a numeric value.</value>
  </data>
  <data name="EmptyValueMsg" xml:space="preserve">
    <value>[Localizable] The Data value is empty.</value>
  </data>
  <data name="EncodingError" xml:space="preserve">
    <value>[Localizable] Error in the convertion. Refer to the documentation for the valid properties values.</value>
  </data>
  <data name="ErrorMessageText" xml:space="preserve">
    <value>[Localizable] Invalid value! Reference the documentation for the valid barcode Data structure.</value>
  </data>
  <data name="GS1ExMaxAlphanumNumber" xml:space="preserve">
    <value>[Localizable] The GS1 DataBar Expanded family can encode up to 41 alphanumeric characters.</value>
  </data>
  <data name="GS1ExMaxNumericNumber" xml:space="preserve">
    <value>[Localizable] The GS1 DataBar Expanded family can encode up to 74 numeric characters.</value>
  </data>
  <data name="GS1Length" xml:space="preserve">
    <value>[Localizable] The GS1 DataBar Data is used for GTIN - 8, 12, 13, 14 and its length should be 7, 11, 12 or 13. The last digit is reserved for a check sum.</value>
  </data>
  <data name="GS1LimitedFirstChar" xml:space="preserve">
    <value>[Localizable] GS1 DataBar Limited should have 0 or 1 in the first digit. When encoding GTIN-14 Data Structures with an Indicator value greater than 1, it must be used Omnidirectional, Stacked, Stacked Omnidirectional or Truncated barcode type.</value>
  </data>
  <data name="I25Length" xml:space="preserve">
    <value>[Localizable] The Interleaved2of5 barcode should have even number of digits. You can put 0 in the front of it if they are odd number.</value>
  </data>
  <data name="IntelligentMailLength" xml:space="preserve">
    <value>[Localizable] The length of the Intelligent Mail barcode Data should be 20, 25, 29 or 31 characters - 20 digits track code (2 for barcode identifier, 3 for service type identifier, 6 or 9 for mailer identifier and 9 or 6 for serial number) and 0, 5, 9 or 11 zip code symbols.</value>
  </data>
  <data name="IntelligentMailSecondDigit" xml:space="preserve">
    <value>[Localizable] The second digit should be in the range of 0-4.</value>
  </data>
  <data name="InvalidAI" xml:space="preserve">
    <value>[Localizable] Invalid Application Identifier element strings. Please, ensure that the AI string in the Data is well formed.</value>
  </data>
  <data name="InvalidCharacter" xml:space="preserve">
    <value>[Localizable] The character '{0}' is invalid for the current barcode type. The valid ones are: {1}</value>
  </data>
  <data name="InvalidDimension" xml:space="preserve">
    <value>[Localizable] The Barcode dimension can not be determined because of an incorrect combination of Stretch, BarsFillMode and XDimension properties' values.</value>
  </data>
  <data name="InvalidHeight" xml:space="preserve">
    <value>[Localizable] The barcode grid rows ({0} number) can not be fit in such a height ({1} pixels).</value>
  </data>
  <data name="InvalidLength" xml:space="preserve">
    <value>[Localizable] The barcode Data should has {0} number of digits.</value>
  </data>
  <data name="InvalidPostalCode" xml:space="preserve">
    <value>[Localizable] Invalid PostalCode value - Mode 2 encodes up to 9 digits postal code (U.S. zip code) while Mode 3 encodes up to 6 characters alpha-numeric code.</value>
  </data>
  <data name="InvalidPropertyValue" xml:space="preserve">
    <value>[Localizable] The {0} property value should be in the range of {1}-{2}.</value>
  </data>
  <data name="InvalidVersion" xml:space="preserve">
    <value>[Localizable] The SizeVersion number does not generate enough cells to encode the data with the current encoding mode and error correction level.</value>
  </data>
  <data name="InvalidWidth" xml:space="preserve">
    <value>[Localizable] The barcode grid columns ({0} number) can not be fit in such a width ({1} pixels). Check the XDimension value.</value>
  </data>
  <data name="InvalidXDimensionValue" xml:space="preserve">
    <value>[Localizable] The XDimension value should be in the range of {0} to {1} for the current Barcode type.</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>[Localizable] The length {0} of the text exceeds the maximum encodable for the current type of barcode. It could encode max {1} characters.</value>
  </data>
  <data name="NotSupportedEncoding" xml:space="preserve">
    <value>[Localizable] The encoding corresponding under the {0} {1} is not supported.</value>
  </data>
  <data name="PDF417InvalidRowsColumnsCombination" xml:space="preserve">
    <value>[Localizable] The codewords (Data &amp; error correction) are more than can be encoded in symbol with a matrix {0}x{1}.</value>
  </data>
  <data name="PrimaryMessageError" xml:space="preserve">
    <value>[Localizable] Can not extract the primary message from the Data value. Refer to the documentation for its structure.</value>
  </data>
  <data name="ServiceClassError" xml:space="preserve">
    <value>[Localizable] Error converting service class. It should be a numeric value.</value>
  </data>
  <data name="SmallSize" xml:space="preserve">
    <value>[Localizable] Can not fit the grid in Size({0}, {1}) with the defined Stretch settings.</value>
  </data>
  <data name="UnencodableCharacter" xml:space="preserve">
    <value>[Localizable] The character '{0}' can not be encoded.</value>
  </data>
  <data name="UPCEFirstDigit" xml:space="preserve">
    <value>[Localizable] The first UPCE digit shall always be zero by specification.</value>
  </data>
  <data name="WarningString" xml:space="preserve">
    <value>[Localizable] XamBarcode Warning: </value>
  </data>
  <data name="WrongCompactionMode" xml:space="preserve">
    <value>[Localizable] The Data message can not be compacted with {0} mode.</value>
  </data>
</root>