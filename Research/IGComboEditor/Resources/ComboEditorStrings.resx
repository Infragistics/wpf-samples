<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CE_CustomFilter_Contains" xml:space="preserve">
    <value>Contains</value>
  </data>
  <data name="CE_CustomFilter_DoesNotContain" xml:space="preserve">
    <value>DoesNotContain</value>
  </data>
  <data name="CE_CustomFilter_EndsWith" xml:space="preserve">
    <value>EndsWith</value>
  </data>
  <data name="CE_CustomFilter_Header" xml:space="preserve">
    <value>Comparison Operators</value>
  </data>
  <data name="CE_CustomFilter_StartsWith" xml:space="preserve">
    <value>StartsWith</value>
  </data>
  <data name="CE_Items_Add" xml:space="preserve">
    <value>Add New Customer</value>
  </data>
  <data name="CE_Items_Delete" xml:space="preserve">
    <value>Delete Selected Customer</value>
  </data>
  <data name="CE_Items_Disable" xml:space="preserve">
    <value>Disable Selected Customer Selection</value>
  </data>
  <data name="CE_Items_PanelHeader" xml:space="preserve">
    <value>Customer Name:</value>
  </data>
  <data name="CE_Items_SelectCustomer" xml:space="preserve">
    <value>Select Customer Name ...</value>
  </data>
  <data name="CE_ManyItems_Hint" xml:space="preserve">
    <value>Opening of the ComboBox with 5000 elements could slow your user interface for some time.</value>
  </data>
  <data name="CE_ManyItems_Note" xml:space="preserve">
    <value>Note:</value>
  </data>
  <data name="CE_Selectable_EmptyText1" xml:space="preserve">
    <value>Select Author ...</value>
  </data>
  <data name="CE_Selectable_EmptyText2" xml:space="preserve">
    <value>Select Book Title ...</value>
  </data>
  <data name="CE_Selectable_MultiChbCombo" xml:space="preserve">
    <value>Checkbox Multi-Select ComboEditor:</value>
  </data>
  <data name="CE_Selectable_MultiChbComboTxt" xml:space="preserve">
    <value>Select Multiple Items Using Checkboxes</value>
  </data>
  <data name="CE_Selectable_MultiSelectEditable" xml:space="preserve">
    <value>Multi-Select Editable ComboEditor:</value>
  </data>
  <data name="CE_Selectable_MultiSelectEditableTxt" xml:space="preserve">
    <value>Select Multiple Items Separated With A Custom Delimiter - Semicolon</value>
  </data>
  <data name="CE_Selectable_MultiSelectReadOnly" xml:space="preserve">
    <value>Multi-Select Read-Only ComboEditor:</value>
  </data>
  <data name="CE_Selectable_MultiSelectReadOnlyTxt" xml:space="preserve">
    <value>Select Multiple Items Using CTRL Key And After That Click Outside The List</value>
  </data>
  <data name="CE_SelectAddress" xml:space="preserve">
    <value>Select Address ...</value>
  </data>
  <data name="CE_SelectCity" xml:space="preserve">
    <value>Select City ...</value>
  </data>
  <data name="CE_SelectCompany" xml:space="preserve">
    <value>Select Company ...</value>
  </data>
  <data name="CE_SelectContactName" xml:space="preserve">
    <value>Select Contact Name ...</value>
  </data>
  <data name="CE_SelectCountry" xml:space="preserve">
    <value>Select Country ...</value>
  </data>
  <data name="CE_SelectionChanged_Info" xml:space="preserve">
    <value>Customer Information</value>
  </data>
  <data name="CE_Settings" xml:space="preserve">
    <value>XamComboEditor Settings</value>
  </data>
  <data name="CE_Settings_EnableEdit" xml:space="preserve">
    <value>Enable Editing</value>
  </data>
  <data name="CE_Standard_AutoComplete" xml:space="preserve">
    <value>Autocomplete Style:</value>
  </data>
  <data name="CE_Standard_AutoCompleteTxt" xml:space="preserve">
    <value>Type In The XamComboEditor And AutoComplete Will Be Turned On</value>
  </data>
  <data name="CE_Standard_GoogleStyleFiltered" xml:space="preserve">
    <value>Google Suggest Style - filtered items list:</value>
  </data>
  <data name="CE_Standard_GoogleStyleFilteredTxt" xml:space="preserve">
    <value>Type In The XamComboEditor To Filter A List With Addresses</value>
  </data>
  <data name="CE_Standard_GoogleStyleFullList" xml:space="preserve">
    <value>Google Suggest Style - full items list:</value>
  </data>
  <data name="CE_Standard_GoogleStyleFullListTxt" xml:space="preserve">
    <value>Click On The XamComboEditor And Type To Open A List With Names</value>
  </data>
  <data name="CE_Standard_NoPopup" xml:space="preserve">
    <value>Autocomplete Style - No Popup:</value>
  </data>
  <data name="CE_Standard_NoPopupTxt" xml:space="preserve">
    <value>Type In The XamComboEditor, AutoComplete Will Be Turned On Without Popup List</value>
  </data>
  <data name="CE_Standard_ReadOnlyCombo" xml:space="preserve">
    <value>Standard Read-Only Combobox:</value>
  </data>
  <data name="CE_Standard_ReadOnlyComboTxt" xml:space="preserve">
    <value>Click On The XamComboEditor To Open A List With Companies</value>
  </data>
  <data name="XWG_Grid_ProductCategory" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="XWG_Grid_ProductName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="XWG_Grid_ProductSKU" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="XWG_Grid_UnitPrice" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="XWG_Grid_UnitsStock" xml:space="preserve">
    <value>Units In Stock</value>
  </data>
  <data name="CE_SelectAdmittanceId" xml:space="preserve">
    <value>Select Admittance ID...</value>
  </data>
  <data name="CE_SelectPatientName" xml:space="preserve">
    <value>Select Patient Name...</value>
  </data>
  <data name="CE_DropDownButtonDisplayMode" xml:space="preserve">
    <value>Drop-Down Button Display Mode:</value>
  </data>
  <data name="CE_Allergies" xml:space="preserve">
    <value>Allergies</value>
  </data>
  <data name="CE_ExtaMeds" xml:space="preserve">
    <value>Takes Additional Medications</value>
  </data>
  <data name="CE_SpecialCase" xml:space="preserve">
    <value>Select a special case ...</value>
  </data>
  <data name="XWG_Patient_SpecialPatientInformation" xml:space="preserve">
    <value>Patients that need special attention</value>
  </data>
  <data name="CE_AllPatients" xml:space="preserve">
    <value>All Patients:</value>
  </data>
  <data name="CE_SpecialCases" xml:space="preserve">
    <value>Special Cases:</value>
  </data>
  <data name="CE_Allow_DropDown_Resizing" xml:space="preserve">
    <value>Allow DropDown Resizing</value>
  </data>
  <data name="CE_Max_DropDown_Height" xml:space="preserve">
    <value>Max Drop-Down Height</value>
  </data>
  <data name="CE_Max_DropDown_Width" xml:space="preserve">
    <value>Max Drop-Down Width</value>
  </data>
  <data name="CE_Min_DropDown_Width" xml:space="preserve">
    <value>Min Drop-Down Width</value>
  </data>
  <data name="CE_SelectionChanged_EventFired" xml:space="preserve">
    <value>{0}: SelectionChanged event was fired - AddedItems: {1}, RemovedItems: {2} .</value>
  </data>
  <data name="CE_SelectionChanged_None" xml:space="preserve">
    <value>&lt;None&gt;</value>
  </data>
  <data name="CE_ApplyFilter" xml:space="preserve">
    <value>Apply Filter</value>
  </data>
  <data name="CE_ClearFilters" xml:space="preserve">
    <value>Clear Filters</value>
  </data>
  <data name="CE_SelectFieldName" xml:space="preserve">
    <value>Select a data field:</value>
  </data>
  <data name="CE_SelectOperator" xml:space="preserve">
    <value>Select an operator:</value>
  </data>
  <data name="CE_Msg_SelectField" xml:space="preserve">
    <value>Please, select a field!</value>
  </data>
  <data name="CE_Msg_SelectOperator" xml:space="preserve">
    <value>Please, select an operator!</value>
  </data>
  <data name="CE_Min_DropDown_Height" xml:space="preserve">
    <value>Min Drop-Down Height</value>
  </data>
  <data name="CE_Data_Bool" xml:space="preserve">
    <value>Bool values list</value>
  </data>
  <data name="CE_Data_Chars" xml:space="preserve">
    <value>Char values list</value>
  </data>
  <data name="CE_Data_Dates" xml:space="preserve">
    <value>DateTime values list</value>
  </data>
  <data name="CE_Data_Double" xml:space="preserve">
    <value>Double values list</value>
  </data>
  <data name="CE_Data_Enum" xml:space="preserve">
    <value>Enum data</value>
  </data>
  <data name="CE_Data_Int" xml:space="preserve">
    <value>Int values list</value>
  </data>
</root>