<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EllipseShapeText" xml:space="preserve">
    <value>テキストにアンカーされている楕円。</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>エラー</value>
  </data>
  <data name="FooterText" xml:space="preserve">
    <value>このテキストはフッターに表示されます。</value>
  </data>
  <data name="FormattedContentHeading" xml:space="preserve">
    <value>書式設定付き Word 文書</value>
  </data>
  <data name="FormattedContentSampleText1" xml:space="preserve">
    <value>この段落にはさまざまなフォント設定が適用され、右揃えになっています。</value>
  </data>
  <data name="FormattedContentSampleText2" xml:space="preserve">
    <value>サンプル テキスト：同じトピックに対する文書たちは段落に含まれます。記載する場合は、段落で文書をグループ化することが必要になります。段落の使用することにより、小論の区別、開始、終了などが把握しやすくなり、小論の論理を分かりやすくなります。</value>
  </data>
  <data name="FormattedContentSampleText3" xml:space="preserve">
    <value>これらのページは FinalSection オブジェクトで定義されています。ページのサイズは 17.5x12.5 センチで Orientation プロパティは Landscape に設定されています。ページ毎に異なるページ属性を作成するためには、Section オブジェクト プロパティを設定して、ドキュメントのセクション コレクション オブジェクトにセクション オブジェクトを追加します。</value>
  </data>
  <data name="HeaderFooterSampleText1" xml:space="preserve">
    <value>Lorem Ipsum</value>
  </data>
  <data name="HeaderFooterSampleText2" xml:space="preserve">
    <value>Lorem Ipsum は印刷業界でよく使われているダミー テキストです。16 世紀で本の見本を作成するために初めて使用されてから、印刷業界の標準ダミー テキストになりました。電子文書に画期的な進歩があった今も引き続き使用されていますLorem Ipsum を含む Letraset シートのリリースで大衆文化に入り、最近では Aldus PageMaker などのソフトに Lorem Ipsum を含みます。</value>
  </data>
  <data name="HeadersHeading" xml:space="preserve">
    <value>ヘッダー、フッター、ページ番号</value>
  </data>
  <data name="HeaderText" xml:space="preserve">
    <value>このテキストはヘッダーとして表示されます。</value>
  </data>
  <data name="Hyperlink" xml:space="preserve">
    <value>ハイパーリンク</value>
  </data>
  <data name="HyperlinkAddress" xml:space="preserve">
    <value>http://jp.infragistics.com</value>
  </data>
  <data name="HyperlinkText" xml:space="preserve">
    <value>Infragistics Inc.</value>
  </data>
  <data name="HyperlinkTooltip" xml:space="preserve">
    <value>インフラジスティックス ウェブ サイトへのリンクです。</value>
  </data>
  <data name="ImagesAlternateTextDesc" xml:space="preserve">
    <value>Word 画像</value>
  </data>
  <data name="ImagesHeading" xml:space="preserve">
    <value>画像</value>
  </data>
  <data name="ImagesSampleText1" xml:space="preserve">
    <value>アンカー画像：アンカー画像は文書内に特定な位置にアンカーされている画像です。インライン画像はその隣の内容と同時に移動しますが、アンカー画像は段落内の位置が固定され、隣のテキストがその周りに移動します。</value>
  </data>
  <data name="ImagesSampleText2" xml:space="preserve">
    <value>インライン画像：隣の内容と同時に移動する画像です。</value>
  </data>
  <data name="IsocelesShapeText" xml:space="preserve">
    <value>テキストにアンカーされている二等辺三角形。</value>
  </data>
  <data name="LineShapeText" xml:space="preserve">
    <value>テキストにアンカーされているテキスト。</value>
  </data>
  <data name="NestedTableHeading1" xml:space="preserve">
    <value>入れ子の表</value>
  </data>
  <data name="NestedTableHeading2" xml:space="preserve">
    <value>入れ子の表</value>
  </data>
  <data name="NestedTableSampleText1" xml:space="preserve">
    <value>Row1 Col1</value>
  </data>
  <data name="NestedTableSampleText2" xml:space="preserve">
    <value>入れ子の表 Row1 Col1</value>
  </data>
  <data name="NestedTableSampleText3" xml:space="preserve">
    <value>入れ子の表 Row1 Col2</value>
  </data>
  <data name="NestedTableSampleText4" xml:space="preserve">
    <value>入れ子の表 Row2 Col1</value>
  </data>
  <data name="NestedTableSampleText5" xml:space="preserve">
    <value>この入れ子の表には画像およびハイパーリンクが表示されます。</value>
  </data>
  <data name="NestedTableSampleText6" xml:space="preserve">
    <value>この段落にはハイパーリンクが表示されます。</value>
  </data>
  <data name="NestedTableSampleText7" xml:space="preserve">
    <value>Row2 Col1</value>
  </data>
  <data name="NestedTableSampleText8" xml:space="preserve">
    <value>Row2 Col2</value>
  </data>
  <data name="RectangleShapeText" xml:space="preserve">
    <value>テキストにアンカーされている矩形。</value>
  </data>
  <data name="RightTrianglShapeText" xml:space="preserve">
    <value>テキストにアンカーされている直角三角形。</value>
  </data>
  <data name="ShapesHeading" xml:space="preserve">
    <value>形状</value>
  </data>
  <data name="SimpleWordDocHeading" xml:space="preserve">
    <value>Word 文書</value>
  </data>
  <data name="SimpleWordDocSampleText" xml:space="preserve">
    <value>Infragistics® Word Library で作成された Word 文書の例です。このドキュメントのタイトルおよびおび作成者は Document Properties オブジェクトで設定されています。</value>
  </data>
  <data name="SimpleWordDocTitle" xml:space="preserve">
    <value>サンプル書類</value>
  </data>
  <data name="TableHeading" xml:space="preserve">
    <value>テーブル</value>
  </data>
  <data name="TableHyperlinkAddress" xml:space="preserve">
    <value>http://www.google.co.jp</value>
  </data>
  <data name="TableHyperlinkText" xml:space="preserve">
    <value>グーグル</value>
  </data>
  <data name="TableImgAltTextDesc" xml:space="preserve">
    <value>テーブル セル内の画像</value>
  </data>
  <data name="TableSampleText1" xml:space="preserve">
    <value>テーブルのヘッダー</value>
  </data>
  <data name="TableSampleText2" xml:space="preserve">
    <value>同じトピックに対する文書を同じ段落に含みます。</value>
  </data>
  <data name="TableSampleText3" xml:space="preserve">
    <value>Row2 Column2</value>
  </data>
  <data name="TableSampleText4" xml:space="preserve">
    <value>このテーブル セルにはハイパーリンクがあります。</value>
  </data>
  <data name="Streamer_btnFormattedContent" xml:space="preserve">
    <value>書式設定付き Word 文書</value>
  </data>
  <data name="Streamer_btnHeaderFooter" xml:space="preserve">
    <value>ヘッダーとフッター</value>
  </data>
  <data name="Streamer_btnHyperlinks" xml:space="preserve">
    <value>ハイパーリンク</value>
  </data>
  <data name="Streamer_btnImages" xml:space="preserve">
    <value>画像</value>
  </data>
  <data name="Streamer_btnNestedTable" xml:space="preserve">
    <value>入れ子の表</value>
  </data>
  <data name="Streamer_btnShapes" xml:space="preserve">
    <value>矩形</value>
  </data>
  <data name="Streamer_btnTable" xml:space="preserve">
    <value>テーブル</value>
  </data>
  <data name="Streamer_btnWordDoc" xml:space="preserve">
    <value>Word 文書</value>
  </data>
  <data name="Streamer_ConfigArea_Header" xml:space="preserve">
    <value>Word 文書の作成</value>
  </data>
</root>