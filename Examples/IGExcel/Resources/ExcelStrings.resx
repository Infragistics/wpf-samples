<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrMsg_FileAlreadyExistsAndInUse" xml:space="preserve">
    <value>Could not export the content to a file named:
{0}
Such file already exists and it is in use.</value>
  </data>
  <data name="ErrMsg_OpenPasswordIsInvalid" xml:space="preserve">
    <value>Open password is invalid</value>
  </data>
  <data name="ExcelEngine_Combo_XLS" xml:space="preserve">
    <value>Excel XLS file format</value>
  </data>
  <data name="ExcelEngine_Combo_XLSX" xml:space="preserve">
    <value>Excel 2007 XLSX file format</value>
  </data>
  <data name="ExcelEngine_DataGrid_Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="ExcelEngine_DataGrid_OnBackOrder" xml:space="preserve">
    <value>On Back Order</value>
  </data>
  <data name="ExcelEngine_DataGrid_ProductName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ExcelEngine_DataGrid_QuantityPerUnit" xml:space="preserve">
    <value>Quantity Per Unit</value>
  </data>
  <data name="ExcelEngine_DataGrid_SKU" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="ExcelEngine_DataGrid_Supplier" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="ExcelEngine_DataGrid_UnitPrice" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="ExcelEngine_DataGrid_UnitsInStock" xml:space="preserve">
    <value>Units In Stck</value>
  </data>
  <data name="ExcelEngine_OptionsLabel" xml:space="preserve">
    <value>Choose Excel Format</value>
  </data>
  <data name="ExcelEngine_PasswordToFileWriteLabel" xml:space="preserve">
    <value>Password used for file modification</value>
  </data>
  <data name="ExcelEngine_PasswordToOpenLabel" xml:space="preserve">
    <value>Password used to open the file</value>
  </data>
  <data name="ExcelShapes_Diamod" xml:space="preserve">
    <value>Diamond with text</value>
  </data>
  <data name="ExcelShapes_Diamod_InsideText" xml:space="preserve">
    <value>Text inside</value>
  </data>
  <data name="ExcelShapes_Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="ExcelShapes_Rectangle" xml:space="preserve">
    <value>Rectangle</value>
  </data>
  <data name="ExcelShapes_ShapesToExport" xml:space="preserve">
    <value>Choose shapes to export</value>
  </data>
  <data name="ExcelShapes_SheetName" xml:space="preserve">
    <value>Shapes Sheet</value>
  </data>
  <data name="Excel_ButtonCaptionExport" xml:space="preserve">
    <value>Export Data</value>
  </data>
  <data name="Excel_ButtonCaptionImport" xml:space="preserve">
    <value>Import Data</value>
  </data>
  <data name="Excel_Cell_Comment" xml:space="preserve">
    <value>Cell Comment</value>
  </data>
  <data name="Excel_Cell_Formula" xml:space="preserve">
    <value>Cell Formula</value>
  </data>
  <data name="Excel_Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="Excel_Format_String" xml:space="preserve">
    <value>Format String</value>
  </data>
  <data name="Excel_Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Excel_Set_Comment" xml:space="preserve">
    <value>Set Comment</value>
  </data>
  <data name="Excel_Set_Formula" xml:space="preserve">
    <value>Set Formula</value>
  </data>
  <data name="Excel_Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="Excel_Unit_Price" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="ExportToExcel_Filter_Note" xml:space="preserve">
    <value>Note: Data is filtered, then exported from the XamDataGrid to an xls or xlsx file. See C# code for more details.</value>
  </data>
  <data name="ExportToExcel_Message_ExcelError_Caption" xml:space="preserve">
    <value>Error Displaying Exported Workbook</value>
  </data>
  <data name="ExportToExcel_Message_ExcelError_Text" xml:space="preserve">
    <value>An error was encountered while trying to run Excel to display the exported Workbook (do you have Excel installed)).  System message: {0}</value>
  </data>
  <data name="ExportToExcel_Message_ExcelExportError_Text" xml:space="preserve">
    <value>An error was encountered while trying to export to a file; it's possible the application does not have sufficient permissions.  System message: {0}</value>
  </data>
  <data name="ExportToExcel_Message_ExportCompleted_Caption" xml:space="preserve">
    <value>Export Completed</value>
  </data>
  <data name="ExportToExcel_Message_ExportCompleted_Text" xml:space="preserve">
    <value>The Export completed successfully. Excel will now be executed to display the exported Workbook.</value>
  </data>
  <data name="ExportToExcel_Message_FileError_Caption" xml:space="preserve">
    <value>Error Creating Unique File Name For Exported Workbook</value>
  </data>
  <data name="ExportToExcel_Message_FileError_Text" xml:space="preserve">
    <value>Could not create a unique name in the current working folder for the exported Workbook file!</value>
  </data>
  <data name="ImportFromExcel_BtnClearData" xml:space="preserve">
    <value>Clear Data</value>
  </data>
  <data name="ImportFromExcel_BtnSortData" xml:space="preserve">
    <value>Sort Data</value>
  </data>
  <data name="ImportFromExcel_Note" xml:space="preserve">
    <value>Note: Data is imported from an xls or xlsx file embedded as a resource. See the C# code for more details.</value>
  </data>
  <data name="ImportFromExcel_SaveAndOpen" xml:space="preserve">
    <value>Save and Open the document</value>
  </data>
  <data name="NamedTables_AboveAverage" xml:space="preserve">
    <value>Above Average</value>
  </data>
  <data name="NamedTables_BelowAverage" xml:space="preserve">
    <value>Below Average</value>
  </data>
  <data name="NamedTables_ColumnName" xml:space="preserve">
    <value>Column Name</value>
  </data>
  <data name="NamedTables_ConvertTableToRange" xml:space="preserve">
    <value>Convert this table to a range in generated file</value>
  </data>
  <data name="NamedTables_ExportModifications" xml:space="preserve">
    <value>Export modifications</value>
  </data>
  <data name="NamedTables_Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="NamedTables_Formula" xml:space="preserve">
    <value>Formula</value>
  </data>
  <data name="NamedTables_HeaderCellGridInfo_01" xml:space="preserve">
    <value>This is</value>
  </data>
  <data name="NamedTables_HeaderCellGridInfo_02" xml:space="preserve">
    <value>table column information. You can change sort direction and filter for each column.</value>
  </data>
  <data name="NamedTables_Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="NamedTables_LoadExcelDescription" xml:space="preserve">
    <value>You can load Excel named tables by using the Load tables button.</value>
  </data>
  <data name="NamedTables_LoadTables" xml:space="preserve">
    <value>Load tables</value>
  </data>
  <data name="NamedTables_MakeSureNoOpenFile" xml:space="preserve">
    <value>Please, make sure that there is no open file with the name:</value>
  </data>
  <data name="NamedTables_NoFormulaApplied" xml:space="preserve">
    <value>No formula applied.</value>
  </data>
  <data name="NamedTables_NotApplied" xml:space="preserve">
    <value>Not Applied</value>
  </data>
  <data name="NamedTables_ShowHeaderCell" xml:space="preserve">
    <value>Show header cell information</value>
  </data>
  <data name="NamedTables_ShowTotalRow" xml:space="preserve">
    <value>Show total row information</value>
  </data>
  <data name="NamedTables_SortCondition" xml:space="preserve">
    <value>Sort condition</value>
  </data>
  <data name="NamedTables_SortDirection_Ascending" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="NamedTables_SortDirection_Descending" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="NamedTables_TableName" xml:space="preserve">
    <value>Table name:</value>
  </data>
  <data name="NamedTables_TableStyle" xml:space="preserve">
    <value>Table style:</value>
  </data>
  <data name="NamedTables_TotalRowGridInfo_01" xml:space="preserve">
    <value>Below you can find more detailed information about</value>
  </data>
  <data name="NamedTables_TotalRowGridInfo_02" xml:space="preserve">
    <value>total row labels, formulas and values.</value>
  </data>
  <data name="NamedTables_TotalRowNotVisible" xml:space="preserve">
    <value>Total row is not visible for this table.</value>
  </data>
  <data name="NamedTables_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="NamedTables_YearToDate" xml:space="preserve">
    <value>Year to date</value>
  </data>
  <data name="NewColorModel_Export_Description_Color_One_and_Two" xml:space="preserve">
    <value>{0} color {1} and color {2} is used</value>
  </data>
  <data name="NewColorModel_Export_Description_LinearGradient" xml:space="preserve">
    <value>Here Linear Gradient fill with</value>
  </data>
  <data name="NewColorModel_Export_Description_PatternFill" xml:space="preserve">
    <value>Here Pattern Fill with Background color {0}, pattern color {1} and fill pattern style {2} is used</value>
  </data>
  <data name="NewColorModel_Export_Description_RectangularGradient" xml:space="preserve">
    <value>Here Rectangular Gradient fill with </value>
  </data>
  <data name="NewColorModel_Export_Description_SolidColorFill" xml:space="preserve">
    <value>Here Solid Fill with color {0}  and a tint value {1} is used.</value>
  </data>
  <data name="NewColorModel_Export_WarningMessage" xml:space="preserve">
    <value>"Please, make sure that there is no open file with the name: {0}"</value>
  </data>
  <data name="NewColorModel_Generate" xml:space="preserve">
    <value>Generate file</value>
  </data>
  <data name="NewColorModel_GradientFillDescription" xml:space="preserve">
    <value>You can specify type and two colors of the gradient brush. Cells in region A8:B9 in generated excel file will be filled according your choices.</value>
  </data>
  <data name="NewColorModel_GradientFillOptions" xml:space="preserve">
    <value>Gradient fill options:</value>
  </data>
  <data name="NewColorModel_PatternFillDescription" xml:space="preserve">
    <value>You can specify background color, patter fill color and pattern type. Cells in region A5:B6 in generated file will be filled according your choices.</value>
  </data>
  <data name="NewColorModel_PatternFillOptions" xml:space="preserve">
    <value>Pattern Fill options:</value>
  </data>
  <data name="NewColorModel_SelectBackgroundColor" xml:space="preserve">
    <value>Select Background Color:</value>
  </data>
  <data name="NewColorModel_SelectGradientColorNo1" xml:space="preserve">
    <value>Select Gradient Color #1:</value>
  </data>
  <data name="NewColorModel_SelectGradientColorNo2" xml:space="preserve">
    <value>Select Gradient Color #2:</value>
  </data>
  <data name="NewColorModel_SelectGradientType" xml:space="preserve">
    <value>Select Gradient type: </value>
  </data>
  <data name="NewColorModel_SelectPatternColor" xml:space="preserve">
    <value>Select Pattern Color:</value>
  </data>
  <data name="NewColorModel_SelectPatternType" xml:space="preserve">
    <value>Select Pattern Type:</value>
  </data>
  <data name="NewColorModel_SelectSolidColor" xml:space="preserve">
    <value>Select Solid Color: </value>
  </data>
  <data name="NewColorModel_SelectTint" xml:space="preserve">
    <value>Select tint: </value>
  </data>
  <data name="NewColorModel_SolidColorAndTintDescription" xml:space="preserve">
    <value>You can specify color to fill cells background and tint of this color. Cells in region A2:B3 in generated file will be filled with specified color and specified tint will be applied.</value>
  </data>
  <data name="NewColorModel_SolidColorFillOptions" xml:space="preserve">
    <value>Solid Color Fill options:</value>
  </data>
  <data name="XWG_Excel_ButtonCaptionExport" xml:space="preserve">
    <value>Export Data</value>
  </data>
  <data name="XWG_Patient_AdmittanceDate" xml:space="preserve">
    <value>Admittance Date</value>
  </data>
  <data name="XWG_Patient_DOB" xml:space="preserve">
    <value>Date of Birth</value>
  </data>
  <data name="XWG_Patient_FirstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="XWG_Patient_Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="XWG_Patient_LastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="XWG_Patient_Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="XWG_Patient_Severity" xml:space="preserve">
    <value>Severity</value>
  </data>
</root>