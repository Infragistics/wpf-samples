<framework:SampleContainer x:Class="IGOrgChart.Samples.Styling.CustomExpansionIndicator"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ig="http://schemas.infragistics.com/xaml"
    xmlns:framework="clr-namespace:Infragistics.Samples.Framework;assembly=Infragistics.Samples.Shared" 
    xmlns:model="clr-namespace:IGOrgChart.Model"
    mc:Ignorable="d" d:DesignHeight="500" d:DesignWidth="700"
    Title="CustomExpansionIndicator Page">

    <framework:SampleContainer.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/IGOrgChart;component/Assets/Global.xaml" />
                
                
            </ResourceDictionary.MergedDictionaries>
            <!--Brushes-->
            <SolidColorBrush x:Key="NodeStrokeOver" Color="{StaticResource Color_011}" />
            <SolidColorBrush x:Key="NodeStrokePress" Color="{StaticResource Color_011}" />
            <SolidColorBrush x:Key="NodeStrokeFocus" Color="{StaticResource Color_021}" />
            <SolidColorBrush x:Key="GenericBackground" Color="{StaticResource Color_002}" />
            <!-- #BEGIN SNIPPET# -->
            <!--Department Group Expansion Indicator Style-->
            <Style x:Key="DepartmentGroupExpansionIndicatorStyle" TargetType="ToggleButton">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="over" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressed" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement" />
                                                <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <!--<DoubleAnimation Duration="0:0:0.3" To="180" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Rotation)" Storyboard.TargetName="path" d:IsOptimized="True" />-->
                                                <PointAnimation Duration="0:0:0.3" To="0.5,0.5" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="path" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <!--<VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Rotation)" Storyboard.TargetName="path" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>-->
                                        <VisualState x:Name="Indeterminate" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="focused" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="Background" CornerRadius="3">
                                    <Grid>
                                        <Border x:Name="normal" CornerRadius="2" Background="{StaticResource ChartSeriesBrush5}" BorderBrush="{StaticResource ChartSeriesBrush5}" />
                                        <Border x:Name="over" CornerRadius="2" Background="{StaticResource NodeStrokeOver}" Opacity="0" />
                                        <Border x:Name="pressed" CornerRadius="2" Background="{StaticResource NodeStrokePress}" Opacity="0" />
                                        <Border x:Name="focused" CornerRadius="2" Background="{StaticResource NodeStrokeFocus}" Opacity="0" />
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <Path x:Name="path" Data="M3,0 L0,6 L6,6 Z" Fill="White" VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                    <Path.RenderTransform>
                                        <RotateTransform  />
                                    </Path.RenderTransform>
                                </Path>
                                <Rectangle x:Name="DisabledVisualElement" Fill="#FFFFFFFF" IsHitTestVisible="false" Opacity="0" RadiusY="3" RadiusX="3" />
                                <Rectangle x:Name="FocusVisualElement" IsHitTestVisible="false" Margin="1" Opacity="0" RadiusY="2" RadiusX="2" Stroke="#FF6DBDD1" StrokeThickness="1" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- #END SNIPPET# -->
          
            <!--Department Expansion Indicator Style-->
            <Style x:Key="DepartmentExpansionIndicatorStyle" TargetType="ToggleButton">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="over" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressed" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement" />
                                                <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <!--<VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="180" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Rotation)" Storyboard.TargetName="Arrow" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Rotation)" Storyboard.TargetName="Arrow" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>-->
                                        <VisualState x:Name="Indeterminate" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="focused" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="Background" CornerRadius="3">
                                    <Grid>
                                        <Border x:Name="normal" CornerRadius="2" Background="{StaticResource ChartSeriesBrush9}" BorderBrush="{StaticResource ChartSeriesBrush9}" />
                                        <Border x:Name="over" CornerRadius="2" Background="{StaticResource NodeStrokeOver}" Opacity="0" />
                                        <Border x:Name="pressed" CornerRadius="2" Background="{StaticResource NodeStrokePress}" Opacity="0" />
                                        <Border x:Name="focused" CornerRadius="2" Background="{StaticResource NodeStrokeFocus}" Opacity="0" />
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <Path x:Name="Arrow" Height="8" Width="7" Stretch="Fill" Opacity="1" Data="M 21,15 C21,15 21,10 21,10 21,10 18,10 18,10 18,10 22,5 22,5 22,5 26,10 26,10 26,10 23,10 23,10 23,10 23,15 23,15 23,15 20,15 20,15 20,15 21,15 21,15 z" Fill="{StaticResource GenericBackground}" UseLayoutRounding="False" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.500,0.500">
                                    <Path.RenderTransform>
                                        <RotateTransform />
                                    </Path.RenderTransform>
                                </Path>
                                <Rectangle x:Name="DisabledVisualElement" Fill="#FFFFFFFF" IsHitTestVisible="false" Opacity="0" RadiusY="3" RadiusX="3" />
                                <Rectangle x:Name="FocusVisualElement" IsHitTestVisible="false" Margin="1" Opacity="0" RadiusY="2" RadiusX="2" Stroke="#FF6DBDD1" StrokeThickness="1" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!--Employee Position Expansion Indicator Style-->
            <Style x:Key="EmployeePositionExpansionIndicatorStyle" TargetType="ToggleButton">
                <Setter Property="MinHeight" Value="26"/>
                <Setter Property="MinWidth" Value="26"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="over" d:IsOptimized="True" />
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressed" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed" />
                                        <VisualState x:Name="Disabled" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="expand">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked" />
                                        <VisualState x:Name="Indeterminate" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="focused" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="Background">
                                    <Grid>
                                        <Ellipse Width="26" Height="26" x:Name="normal" Fill="{StaticResource ChartSeriesBrush3}" Stroke="{StaticResource ChartSeriesBrush3}" />
                                        <Ellipse Width="26" Height="26" x:Name="over" Fill="{StaticResource NodeStrokeOver}" Opacity="0" />
                                        <Ellipse Width="26" Height="26" x:Name="pressed" Fill="{StaticResource NodeStrokePress}" Opacity="0" />
                                        <Ellipse Width="26" Height="26" x:Name="focused" Fill="{StaticResource NodeStrokeFocus}" Opacity="0" />
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <Path x:Name="expand" Height="7" Width="7" Stretch="Fill" Opacity="1" Data="M 10,10 C10,10 10,13 10,13 10,13 7,13 7,13 7,13 7,15 7,15 7,15 10,15 10,15 10,15 10,18 10,18 10,18 12,18 12,18 12,18 12,15 12,15 12,15 15,15 15,15 15,15 15,13 15,13 15,13 12,13 12,13 12,13 12,10 12,10 12,10 10,10 10,10 z" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="False" Visibility="Collapsed" />
                                <Path x:Name="collapse" Stretch="Fill" Opacity="1" Data="M7,13 C7,13 7,15 7,15 C7,15 15,15 15,15 C15,15 15,13 15,13 C15,13 7,13 7,13 z" Fill="White" UseLayoutRounding="False" HorizontalAlignment="Center" VerticalAlignment="Center" Width="7" Height="2" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
        </ResourceDictionary>
    </framework:SampleContainer.Resources>

    <Grid x:Name="LayoutRoot"
          Width="Auto">

        <ig:XamOrgChart ItemsSource="{Binding DepartmentGroups}"
                        ZoomLevel="1">
            <!--Set the data context of the OrgChart-->
            <ig:XamOrgChart.DataContext>
                <model:DepartmentModel />
            </ig:XamOrgChart.DataContext>

            <ig:XamOrgChart.GlobalNodeLayouts>
                <!-- #BEGIN SNIPPET# -->
                <!--Applying the Expansion Indicator Styles-->
                <ig:OrgChartNodeLayout TargetTypeName="DepartmentGroup"
                                       DisplayMemberPath="GroupName"
                                       ExpansionIndicatorStyle="{StaticResource DepartmentGroupExpansionIndicatorStyle}" />
                <ig:OrgChartNodeLayout TargetTypeName="Department"
                                       DisplayMemberPath="DepartmentName"
                                       ExpansionIndicatorStyle="{StaticResource DepartmentExpansionIndicatorStyle}" />
                <ig:OrgChartNodeLayout TargetTypeName="EmployeePosition"
                                       DisplayMemberPath="PositionName"
                                       ExpansionIndicatorStyle="{StaticResource EmployeePositionExpansionIndicatorStyle}" />
                <!--The Employee nodes do not have children nodes so they won't have an Expansion Indicator-->
                <ig:OrgChartNodeLayout TargetTypeName="Employee"
                                       DisplayMemberPath="FullName" />
                <!-- #END SNIPPET# -->
            </ig:XamOrgChart.GlobalNodeLayouts>
            
        </ig:XamOrgChart>

    </Grid>
</framework:SampleContainer>
