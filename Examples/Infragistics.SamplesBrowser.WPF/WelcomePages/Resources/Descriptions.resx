<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComboEditor_Welcome_Paragraph1" xml:space="preserve">
    <value>If you have many choices to display to users of your WPF application, then there is no more performant solution than xamComboEditor™. It's a virtualized, flat data bound dropdown container for single- and multiple-selection that excels past the in-box WPF combo when displaying large numbers of items.</value>
  </data>
  <data name="DragDropFramework_Welcome_Paragraph1" xml:space="preserve">
    <value>The Drag and Drop Framework adds a new level of interactivity to your controls! Now your end-users can drag and re-organize UI elements in an intuitive manner.</value>
    <comment>Welcome paragraph</comment>
  </data>
  <data name="Excel_Welcome_Paragraph1" xml:space="preserve">
    <value>Using the Infragistics Excel Engine™ allows you to work with spreadsheet data using familiar Microsoft® Excel® spreadsheet objects like Workbooks, Worksheets, Cells, Formulas and many more.</value>
    <comment>Welcome paragraph</comment>
  </data>
  <data name="Math_Welcome_Paragraph1" xml:space="preserve">
    <value>The Math Library provides you with a unified set of core functions that will allow you to perform a large range of mathematical operations with ease. Perform mathematical calculations that are fast, accurate and memory efficient. Build your own math-driven applications without having to translate your data structures across multiple formats. Employ numerical methods; build compartmental models; perform Monte Carlo simulations; and solve regression problems.</value>
    <comment>Welcome paragraph</comment>
  </data>
  <data name="CalculationManager_Welcome_Paragraph_1" xml:space="preserve">
    <value>Manages all formulas as well as getting values from sources and setting values on targets of those formulas. The xamCalculationManager has many pre-defined functions which emulate Excel functions as well as allowing developers to register custom functions. </value>
  </data>
  <data name="Calendar_Welcome_Paragraph1" xml:space="preserve">
    <value>Add calendaring support to you application using the xamCalendar control. These samples demonstrate how to fully customize the layout and styling of the control, starting with simple property settings and finishing with more advanced Style and Template changes.</value>
  </data>
  <data name="CarouselListBox_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamCarouselListbox picks up where the xamCarouselPanel leaves off by adding support for bound data. Working with the xamCarouselListbox is much like working with the inbox Listbox, only the resulting visuals are much more compelling!</value>
    <comment>The first paragraph in the welcome section</comment>
  </data>
  <data name="CarouselListBox_Welcome_Paragraph2" xml:space="preserve">
    <value>The samples included in this section should be thought of as a four-step tutorial. You will begin by configuring various settings of the control then binding to an XMLDataSource then progressively customize the appearance of the items in the xamCarouselListbox.</value>
    <comment>The second paragraph in the welcome section</comment>
  </data>
  <data name="CarouselPanel_Welcome_Paragraph1" xml:space="preserve">
    <value>Familiarize yourself with the family of Carousel controls by starting with the xamCarouselPanel. Like other panels included in WPF (Grid, Canvas, StackPanel) this advanced panel accepts any number of items then positions those items automatically.</value>
    <comment>The first paragraph in the welcome section</comment>
  </data>
  <data name="CarouselPanel_Welcome_Paragraph2" xml:space="preserve">
    <value>The samples included here illustrate the many visualizations that can be achieved by working with the ViewSettings property of the xamCarouselPanel. Spend some time mastering the ViewSettings property of this control, then move on to the data-bound xamCarouselListBox.</value>
    <comment>The second paragraph in the welcome section</comment>
  </data>
  <data name="ColorPicker_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamColorPicker control is an editor that allows your end users to select a color from a pre-defined palette of colors. The control exposes the palette inside a dropdown container and as well as containing a set of pre-defined palettes, it also allows you to define your own custom set of palettes. The value returned by the xamColorPicker control is the selected color.</value>
  </data>
  <data name="DataCards_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDataCards control displays flat data using 'cards' similar to the Contacts folder in Microsoft® Outlook 2007.</value>
  </data>
  <data name="DataCarousel_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDataCarousel combines the rich layout capabilities of the xamCarouselPanel with the robust data capabilities of the xamDataGrid. Where the xamCarouselListbox is limited to presenting flat data structures, the xamDataCarousel is capable of presenting hierarchical data.</value>
  </data>
  <data name="DataCarousel_Welcome_Paragraph2" xml:space="preserve">
    <value>The samples here should look familiar -- they are combinations of xamCarouselPanel and xamDataGrid samples. You'll see how both layout and data techniques can be pulled from these other controls and applied in unique ways to the xamDataCarousel.</value>
  </data>
  <data name="DataGrid_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDataGrid is a highly versatile, powerful presentation control that can be used to produce polished reports, tables, ledgers, product listings, and much more.</value>
    <comment>The first paragraph of text in the Welcome page.</comment>
  </data>
  <data name="DataGrid_Welcome_Paragraph2" xml:space="preserve">
    <value>These samples demonstrate many of the xamDataGrid's features, including data binding, hierarchical data rendering, field sorting, field grouping, field resizing and advanced styling and layout techniques. Because the control embraces the WPF styling architecture, you have full control over the final presentation.</value>
    <comment>The second paragraph of text in the Welcome page.</comment>
  </data>
  <data name="DataTree_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDataTree is a tree control designed for high performance and focuses on data bound tree scenarios. This control simplifies the process of creating a tree that is bound to a N level deep data structure. It also automates the process of creating node hierarchies while preserving the flexibility in node display that is provided by XAML.</value>
  </data>
  <data name="DialogWindow_Welcome_Paragraph1" xml:space="preserve">
    <value>Designed to replicate the functionality of a traditional, standard Windows Forms dialog window, the xamDialogWindow™ allows you to popup both modal and non-modal dialog windows within your applications easily. Its flexible XAML templating and styling capabilities combined with programmable dialog behaviors such as minimize, maximize, restore and close, enable you to add the dialog window and Multiple Document Interface (MDI) user interface patterns to any application.</value>
  </data>
  <data name="DockManager_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDockManager empowers you to deliver highly flexible application layouts that your customers have come to expect with modern software. Replicate the look and feel of Visual Studio, or create a dockable, office style application using the xamDockManager alongside the xamRibbon. With the included Office 2007 themes, it's easy to create a visually cohesive application. </value>
  </data>
  <data name="Editors_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamEditors are a set of editor controls that enhance your users' data entry experience by validating data at the time of entry, facilitating data input of formatted values, providing intuitive cues to guide the user along, and fitting into the look and feel of your application by supporting custom styles and templates that control their appearance.</value>
  </data>
  <data name="Editors_Welcome_Paragraph2" xml:space="preserve">
    <value>These samples demonstrate the features and capabilities of the editor controls in standalone scenarios, allowing you to focus on the editors and not get bogged down with control integration. Once you have an understanding of how each editor works, consult the Infragistics WPF help to see how the editor controls can be integrated with the other controls that ship in the Infragistics WPF suite.</value>
  </data>
  <data name="FormulaEditor_Welcome_Paragraph_1" xml:space="preserve">
    <value>Provides a full-fledged formula editing experience for the end user, it also contains a button which allows the user to display the FormulaEditorDialog. The FormulaEditorDialog provides an editing experience, but adds some more assistance in the form of operand and function lists, buttons to insert commonly used operators, and syntax errors which always display and can bring the user to the place in the formula which needs to be corrected.</value>
  </data>
  <data name="FunnelChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>A funnel chart is a single series chart that displays data in a funnel shape with a variable number of sections each representing the data as different portions of 100%. It is typically used to show a process with a value that begins at 100% at the top of the funnel and ends with a lower percentage of the whole at the bottom.</value>
  </data>
  <data name="Grid_Welcome_Paragraph1" xml:space="preserve">
    <value>Our WPF data grid is faster than other WPF grid controls when performing some common business usage scenarios. As an editable hierarchical data grid control designed for high performance, your users can work with many hundred thousand rows in a single bound! With unrivaled data and UI virtualization on rows and columns your users get superior performance and responsiveness. It's fully featured to show master/detail relationships between records with lightning-fast expansion, column movement, group-by and filter rows, and sort at blazing speed.</value>
  </data>
  <data name="Inputs_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamInputs are a set of Input controls that enhance your users' data entry experience by validating data at the time of entry, facilitating data input of formatted values, providing intuitive cues to guide the user along, and fitting into the look and feel of your application by supporting custom that control their appearance.</value>
  </data>
  <data name="Menu_Welcome_Paragraph1" xml:space="preserve">
    <value>Create multi-level menus that popup, dropdown and nest using the xamMenu™ control for WPF. Submenus slide open and close with smooth, graceful animation. Any hierarchy of commands or options can be databound against and used to present horizontal or vertical menus, with customizable menu items that can involve pictures, checkboxes and even placing context menus anywhere that users can pop-up by click or command.</value>
  </data>
  <data name="PersistenceFramework_Welcome_Paragraph1" xml:space="preserve">
    <value>Persist control settings from any WPF dependency object (including non-Infragistics controls) using Infragistics' Control Persistence Framework to manage saving and loading of those settings you want persisted to any external source like a file or a database. This framework makes it very easy for you to give your users the ability to save off their preferences and the layout of your application's user interface down to detailed settings such as which grid columns are fixed, and then re-load that same layout when they come back again.</value>
    <comment>Welcome paragraph</comment>
  </data>
  <data name="PieChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>Using the xamPieChart control you can create simple or exploded pie charts, with a customizable threshold for inclusion in an "Other" category, and text labels and images that can be displayed within or outside of the pie in a manner that avoids overlapping. Users can click or drill down to view underlying data, explode out a section of the pie, and get information via tooltips.</value>
  </data>
  <data name="MultiColumnComboEditor_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamMultiColumnComboEditor acts just like a grid; it can automatically generate columns for every property on the data object that is contained in the IEnumerable that is set on the control’s ItemsSource property.  The control’s AutoGenerateColumns property (which defaults to true) controls this behavior.</value>
  </data>
  <data name="MonthCalendar_Welcome_Paragraph1" xml:space="preserve">
    <value>Add calendaring support to you application using the xamMonthCalendar control. These samples demonstrate how to fully customize the layout and styling of the control, starting with simple property settings and finishing with more advanced Style and Template changes.</value>
  </data>
  <data name="OutlookBar_Welcome_Paragraph1" xml:space="preserve">
    <value>Add Outlook-style navigation to your WPF applications using the xamOutlookBar. These samples step you through creating a xamOutlookBar then demonstrate how to interact with the control at runtime. Check out the Themes and Custom Styles section to learn how to customize the look and feel of the control to match the style of your application.</value>
  </data>
  <data name="ResourceWasher_Welcome_Paragraph1" xml:space="preserve">
    <value>With Resource Washing, you can set the color (the WashColor) on groups of resources (WashGroups) in an existing ResourceDictionary to update the color of the controls in your application.</value>
  </data>
  <data name="Ribbon_Welcome_Paragraph1" xml:space="preserve">
    <value>Replicate the look and feel of Microsoft Office applications with the xamRibbon control. Get started with the xamRibbon by stepping through these samples in order. You'll first learn how to add common features via XAML, then see how to add interaction.</value>
    <comment>The text on the XamRibbon's Welcome page.</comment>
  </data>
  <data name="Reporting_Welcome_Paragraph1" xml:space="preserve">
    <value>Use the WPF Reporting Engine to create printable documents that can either be sent directly to the printer or saved as XPS documents. Print the XamDataGrid or any visual element in your application using the Reporting Engine. These samples start with simple document creation and advance to more complex templating and customization.</value>
    <comment>The Welcome page description</comment>
  </data>
  <data name="Schedule_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamSchedule family of controls consists of different views used to present the calendar days in different perspectives, designed to address any scheduling requirements your applications may have. The views are coupled with an easy-to-use xamScheduleDataManager responsible for providing the resources, calendars, activities and other configuration settings.</value>
  </data>
  <data name="Slider_Welcome_Paragraph1" xml:space="preserve">
    <value>With the xamSlider™ family of controls you can give your users a much more enjoyable editing experience that your relegating more traditional edit boxes to the dust bin. From simple sliders with one thumb to range sliders that can have two or more, from numbers to dates, and from generic base class to the specific data types you need, xamSlider has it all. Its tremendous templating support allows you to create impressively unique-looking sliders that are more than mere editors, but superior user experiences.</value>
  </data>
  <data name="SpellChecker_Welcome_Paragraph1" xml:space="preserve">
    <value>Buzz! Another typo bites the dust, when you're using Infragistics' spell checker with its support for multiple languages. As a UI control, the xamSpellChecker™ is completely customizable dialog provides a spelling correction user interface to the end user.</value>
  </data>
  <data name="Word_Welcome_Paragraph1" xml:space="preserve">
    <value>Using the Infragistics Word Engine™ allows you to work with document data using familiar Microsoft® Word® objects like Paragraphs, Fonts, Headers, Footers, Images and many more.</value>
  </data>
  <data name="TabControl_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamTabControl picks up where the Inbox TabControl leaves off, giving you the ability to add close buttons to each tab or the tab strip itself. Further, you can specify pre and post tab content, giving you the flexibility to replicate the look and feel of a wide variety of modern tab interfaces. And, like all of the other Infragistics WPF controls, the control ships with a number of themes that let you quickly change the look and feel.</value>
  </data>
  <data name="TagCloud_Welcome_Paragraph1" xml:space="preserve">
    <value>When it's raining tags, it's pouring with the xamTagCloud™. Choose key words or phrases ("tags") and you can weight them by their frequency of occurence, importance, or any other scoring algorithm you devise and the tag cloud control will display them. Tags deemed most important stand out with a heavyweight font size greater than their peers, while little-used tags appear diminuitive in size. Users will have no trouble identifying what the most prevalent tags are when you're using xamTagCloud to show them.</value>
  </data>
  <data name="TileManager_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamTileManager allows users to fully configure the layout by enabling moving and resizing of tiles and the ability to change the state of tiles at run time. Users may expect you to save and load their custom layouts between sessions so they are not forced to reconfigure the xamTileManager every time the application restarts.</value>
  </data>
  <data name="ContextMenu_Welcome_Paragraph1" xml:space="preserve">
    <value>Popup context-sensitive, cascading menus pertinent to your application from anywhere within your line of business application, with complete control over its placement, positioning and appearance.</value>
  </data>
  <data name="DataPresenter_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamDataPresenter control presents data any way you like it, if the way you like it is lightning fast and with the flexibility of our pluggable view architecture. Grid, carousel, card view or your own custom view, all in one control.</value>
  </data>
  <data name="DataChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>Our data chart control has been designed for handling high volumes of data ranging into the millions of data points, and into which updates can occur every few milliseconds. It spares nothing to achieve this blazing speed, which is the hallmark of Infragistics' controls. It has also been designed to facilitate the stacking of multiple chart areas in the same chart, and overlay multiple chart layers so that your users can add statistical and technical indicators to their analyses with ease. When your application needs heavy-duty data visualization, choose our data chart control.</value>
  </data>
  <data name="Barcode_Welcome_Paragraph_1" xml:space="preserve">
    <value>Identify physical assets quickly and accurately with controls that produce on-screen barcode images conformant to the world’s most popular and widely-used barcode symbologies.</value>
  </data>
  <data name="BarcodeReader_Welcome_Paragraph_1" xml:space="preserve">
    <value>Decode barcodes of various symbologies including QR, EAN/UPC, Code 39, Code 128, Maxi Code and Interleaved 2 of 5.</value>
  </data>
  <data name="BulletGraph_Welcome_Paragraph1" xml:space="preserve">
    <value>Deliver a simple and concise view of key performance indicators (KPI) to dashboard users that show progress towards goals, a clear indication of good, better and best ranges, and allows multiple measurements to be easily compared.</value>
  </data>
  <data name="Timeline_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamTimeline™ empowers users to quickly understand and visualize sequences of events in WPF which could be the steps in a narrative for a business process or workflow, important project milestones, key frames in a video, a transaction history on an account, or any similar timeline.</value>
  </data>
  <data name="Treemap_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamTreemap™ (a.k.a., heatmaps in the financial industry) show the relative weight of hierarchical data relationships at more than one level with no drilldown required. Users can communicate data more effectively in color with either a group-based organizational mechanism or a graduated scale-based mechanism similar to choropleth shading.</value>
  </data>
  <data name="Zoombar_Welcome_Paragraph_1" xml:space="preserve">
    <value>A virtual magnifying glass for application users, xamZoombar™ embeds itself into charts and timelines so that the user can zoom in, zoom out and pan their view of the data from side to side. Users can dynamically change scale and scroll through ranges of data - from regions on a chart to intervals along a timeline.</value>
  </data>
  <data name="Gauge_Welcome_Paragraph_1" xml:space="preserve">
    <value>Make your data visualizations and dashboards more engaging with segmented displays for your applications that show your data as digital letters or numbers.</value>
  </data>
  <data name="GeographicMap_Welcome_Paragraph_1" xml:space="preserve">
    <value>Create highly detailed, thematic geographical maps using an innovative feature set that includes custom shape templates, the ability to render polylines and polyshapes, Map Progression, Scatter Area Plots, an intuitive Overview Pane and much more. The xamGeographicMap enables users to deep zoom into satellite, aerial, remote sensing, street map, or other kinds of tiled imagery from external geospatial imagery services, including Bing Maps and OpenStreetMap.</value>
  </data>
  <data name="Map_Welcome_Paragraph_1" xml:space="preserve">
    <value>Create expressive business intelligence solutions with stunning WPF maps that tap your business’ geographic and geospatial data with rich functionality and styling. The xamMap uses the Shapefile format to render any geometric shape, including geographic maps, seating charts and floor plans. Also it enables users to deep zoom into satellite, aerial, remote sensing, street map, or other kinds of tiled imagery from external geospatial imagery services, including Bing Maps and OpenStreetMap.</value>
  </data>
  <data name="NetworkNode_Welcome_Paragraph1" xml:space="preserve">
    <value>Visualize relationships within a network - from biological systems, server infrastructures, email communication patterns, to complex social or professional networks. The xamNetworkNode allows loading data from Load Graph Modeling Language (GML) file.</value>
  </data>
  <data name="OrgChart_Welcome_Paragraph1" xml:space="preserve">
    <value>Make sense of organizations visually with high performance, stylable organization charts that represent company, department, workgroup or other hierarchical structures.</value>
  </data>
  <data name="PivotGrid_Welcome_Paragraph_1" xml:space="preserve">
    <value>Get the facts straight with the xamPivotGrid that lets your users slice, dice and filter the multidimensional data of your OLAP cube or data warehouse, putting the full power of online analytical processing within your applications. Our latest version of the xamPivotGrid improves performance and usability.</value>
  </data>
  <data name="Sparkline_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamSparkline control is a data-intense, design-simple graphic that allows end users to spot trends, variations and patterns in data in a clear and compact representation.
</value>
  </data>
  <data name="SyntaxEditor_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamSyntaxEditor is a powerful text editing control that is used to provide a code editing experience similar to Microsoft’s Visual Studio code editor. It is built on top of our syntax parsing engine which allows you to apply a set of language specific grammatical rules to highlight both language constructs as well as error information if the text does not conform to the syntax rules of the language.</value>
  </data>
  <data name="UndoRedo_Welcome_Paragraph_1" xml:space="preserve">
    <value>The Infragistics Undo/Redo Framework™ provides support for undo\redo functionality available in most applications. Using the framework API, you can implement unlimited linear multilevel undo and redo of the end-user operations.
The framework maintains operations history, executes undo\redo operations, and may group several operations into one single history item. Commands are provided to invoke an undo/redo operation from within your UI.</value>
  </data>
  <data name="Gantt_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamGantt control visualizes project tasks, relationships and dependencies between them. The main purpose of the control is to provide a user interface similar to the Microsoft Project 2010 for creating project plans, controlling the product management and displaying the project progress over time.</value>
  </data>
  <data name="SyntaxParsing_Welcome_Paragraph1" xml:space="preserve">
    <value>The syntax parsing engine is a fully functional text parser engine that can be used standalone or with editor controls like the new xamSyntaxEditor. The syntax parsing engine can take an EBNF based language and parse it into its language specific tokens, keywords, and constructs.</value>
  </data>
  <data name="DoughnutChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>Express your data with multiple series using this rich Doughnut Chart. Similar to a Pie Chart, the Doughnut Chart is used to show categorical statistics expressed in percentages. Yet with its hollow center, it's best for displaying multiple series using concentric rings where each ring represents a data series. Bind easily to data, configure the inner radius, display exploded slices, customize themes, and more with this well-rounded control.</value>
  </data>
  <data name="RadialGauge_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamRadialGauge is powerful yet simple to use. Just drop it on your page and you’re ready to go with the default look and feel. Simply tweak the configuration options to your liking to meet whatever custom look you desire in your application.</value>
  </data>
  <data name="RichTextEditor_Welcome_Paragraph1" xml:space="preserve">
    <value>The XamRichTextEditor is a highly customizable rich text editing control that provides functionality modeled after the features and behavior of Microsoft Word.  The XamRichTextEditor is provided in both WPF and Silverlight versions with an API that is common across both platforms, enabling you to incorporate rich text editing capabilities into your cross platform applications.</value>
  </data>
  <data name="LinearGauge_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamLinearGauge is powerful yet simple to use. Just drop it on your page and you’re ready to go with the default look and feel. Simply tweak the configuration options to your liking to meet whatever custom look you desire in your application.</value>
  </data>
  <data name="RadialMenu_Welcome_Paragraph1" xml:space="preserve">
    <value>Inspired by the Microsoft OneNote radial menu, the xamRadialMenu provides a circular menu that orients the commands around the user, rather than requiring the user to negotiate a nested hierarchy of drop downs. Most commonly used as a context menu, the xamRadialMenu allows you to drill down into related sub-menu items with the ability to navigate back to the main level menu item.</value>
  </data>
  <data name="Diagram_Welcome_Paragraph_1" xml:space="preserve">
    <value>The WPF xamDiagram allows you to create your very own diagramming solution, with all of the features that you would expect in a diagramming tool such as Visio. The xamDiagram ships with all the features you will need to start writing anything from simple flow charts and activity diagrams, to complex LinqToSQL relationship diagrams.</value>
  </data>
  <data name="PropertyGrid_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamPropertyGrid control provides the user with a friendly properties editing experience of a single object or multiple objects with plain properties or complex list type properties.</value>
  </data>
  <data name="Spreadsheet_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamSpreadsheet control allows visualizing and editing of spreadsheet data, represented by the data model supported by the Infragistics Excel Engine comprising of Workbooks, Worksheets, Cells, Formulas and more.</value>
  </data>
  <data name="ThemeManager_Welcome_Paragraph1" xml:space="preserve">
    <value>Infragistics Theme Manager™ provides an easier way for applying a theme to an application or a control with a single line of code.</value>
  </data>
  <data name="TreeGrid_Welcome_Paragraph_1" xml:space="preserve">
    <value>The xamTreeGrid™ combines the powerful abilities of displaying data in rows and columns with a tree column for expand/collapse hierarchical data. The control is a part of the data presenter family and is essentially a xamDataPresenter that implements a single TreeView without the ability to dynamically switch between views.</value>
  </data>
  <data name="BusyIndicator_Welcome_Paragraph1" xml:space="preserve">
    <value>The xamBusyIndicator control is a ContentControl that provides visual notification that a long-running activity has started as well as reports the actual progress.</value>
  </data>
  <data name="SurfaceChartWelcome_Welcome_Paragraph1" xml:space="preserve">
    <value>The Surface Chart 3D control allows fast, visually appealing and customizable three-dimensional surface visualization. The control offers a full set of API options to achieve any 3D surface plotting requirement and very intuitive default values to minimize the coding required.</value>
  </data>
  <data name="CategoryChartWelcome_Welcome_Paragraph1" xml:space="preserve">
    <value>Our Category Chart  is a simplified version of XamDataChart used to easily display category data with minimal configuration.</value>
  </data>
  <data name="ShapeChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>The Shape Chart allows you to display Cartesian and geographic shapes on a chart surface. This control requires minimal configuration for plotting your data and it provides same high performance as the Data Chart. Packed with all the functionality you expect from Infragistics’ charts, think of the Shape Chart as your go-to chart for floor plans, diagrams, maps, or any scatter points stored either as flat data or as hierarchical data.</value>
  </data>
  <data name="ScatterChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>This new community technology preview, the Scatter Chart, allows you to display Cartesian and geographic points in a chart surface. This control requires minimal configuration for plotting your data and it provides same high performance as the Data Chart. Packed with all the functionality you expect from Infragistics’ charts, think of the Scatter Chart as your go-to chart for any scatter points stored either as flat data or as hierarchical data.</value>
  </data>
  <data name="FinancialChart_Welcome_Paragraph_1" xml:space="preserve">
    <value>The XamFinancialChart is a lightweight, high-performance chart. This chart can be easily configured to display financial data using an extremely simple and intuitive API. All you need to do is bind your data (a collection or a collection of collections) and the chart takes care of everything else. The chart offers multiple ways for the user to visualize and interpret the data, including several display modes for price and volume, and many financial indicators. The chart also makes use of label formatting to give the data context.</value>
  </data>
</root>