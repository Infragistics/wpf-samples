<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="XWB_Alphanumeric" xml:space="preserve">
    <value>英数字文字をエンコードします。</value>
  </data>
  <data name="XWB_ApplicationIndicator" xml:space="preserve">
    <value>アプリケーション インジケーターは Fnc1Mode=Industry のときのみ使用します。有効な値は {a-z, A-Z, 00-99} です。</value>
  </data>
  <data name="XWB_ApplyData" xml:space="preserve">
    <value>データを適用する</value>
  </data>
  <data name="XWB_BarcodeData" xml:space="preserve">
    <value>バーコードのデータ</value>
  </data>
  <data name="XWB_BarcodeType" xml:space="preserve">
    <value>タイプ:</value>
  </data>
  <data name="XWB_BarsFillMode" xml:space="preserve">
    <value>バー塗りつぶしモード</value>
  </data>
  <data name="XWB_ButtonClear" xml:space="preserve">
    <value>クリア</value>
  </data>
  <data name="XWB_Byte" xml:space="preserve">
    <value>データをバイトにエンコードします。</value>
  </data>
  <data name="XWB_Code128Barcode" xml:space="preserve">
    <value>Code128Barcode</value>
  </data>
  <data name="XWB_Code128Ucc" xml:space="preserve">
    <value>* Code 128 UCC バーコード記号体系は有効な AI 番号をエンコードします。このサンプルでは、バーコードがアプリケーション識別子 (01) で開始します。次の 14 数字は (2 数字の) 映画のコード、映画の開始時間、映画の日付、席行、席例、割引コードです。</value>
  </data>
  <data name="XWB_Code39Barcode" xml:space="preserve">
    <value>Code39Barcode</value>
  </data>
  <data name="XWB_CountryCode" xml:space="preserve">
    <value>国コード (モード 2 または 3)</value>
  </data>
  <data name="XWB_Data" xml:space="preserve">
    <value>データ:</value>
  </data>
  <data name="XWB_Dimensions" xml:space="preserve">
    <value>次元</value>
  </data>
  <data name="XWB_DimensionsNote" xml:space="preserve">
    <value>* XDimension プロパティは Stretch="None" と使用されることに注意してください。</value>
  </data>
  <data name="XWB_EanUpcBarcode" xml:space="preserve">
    <value>EanUpcBarcode</value>
  </data>
  <data name="XWB_Eci" xml:space="preserve">
    <value>ECI なし</value>
  </data>
  <data name="XWB_ErrorCorrection" xml:space="preserve">
    <value>エラー訂正</value>
  </data>
  <data name="XWB_ErrorCorrectionLevel" xml:space="preserve">
    <value>ErrorCorrectionLevel:</value>
  </data>
  <data name="XWB_ErrorMessage" xml:space="preserve">
    <value>データは無効です。Code 39 の有効な文字は 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-.$/+% です。割り当てられたデータは小文字を含みます。</value>
  </data>
  <data name="XWB_Extended" xml:space="preserve">
    <value>拡張選択</value>
  </data>
  <data name="XWB_GenerateChecksum" xml:space="preserve">
    <value>チェックサムの作成</value>
  </data>
  <data name="XWB_Gs1DataBarBarcode" xml:space="preserve">
    <value>Gs1DataBarBarcode</value>
  </data>
  <data name="XWB_Interleaved2Of5Barcode" xml:space="preserve">
    <value>Interleaved2Of5Barcode</value>
  </data>
  <data name="XWB_InvalidData" xml:space="preserve">
    <value>無効なデータ</value>
  </data>
  <data name="XWB_Kanji" xml:space="preserve">
    <value>漢字をエンコードします。</value>
  </data>
  <data name="XWB_Link" xml:space="preserve">
    <value>http://jp.infragistics.com/dotnet/netadvantage/silverlight/data-visualization/barcode.aspx#Overview</value>
  </data>
  <data name="XWB_Mode" xml:space="preserve">
    <value>モード</value>
  </data>
  <data name="XWB_Numeric" xml:space="preserve">
    <value>数字をエンコードします。</value>
  </data>
  <data name="XWB_PostalCode" xml:space="preserve">
    <value>郵便コード (モード 2 または 3)</value>
  </data>
  <data name="XWB_Print" xml:space="preserve">
    <value>印刷</value>
  </data>
  <data name="XWB_PropChanged" xml:space="preserve">
    <value>プロパティが変更されました:</value>
  </data>
  <data name="XWB_PropertyChanged" xml:space="preserve">
    <value>変更したプロパティ</value>
  </data>
  <data name="XWB_RaisedEvents" xml:space="preserve">
    <value>発生したイベント</value>
  </data>
  <data name="XWB_RoyalMailBarcode" xml:space="preserve">
    <value>RoyalMailBarcode</value>
  </data>
  <data name="XWB_SampleData" xml:space="preserve">
    <value>サンプル データ:</value>
  </data>
  <data name="XWB_Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="XWB_SenderLine1" xml:space="preserve">
    <value>UNITED STATES POSTAL SERVICE</value>
    <comment>Must remain in ASCII characters</comment>
  </data>
  <data name="XWB_SenderLine2" xml:space="preserve">
    <value>5501 ANYWHERE HWY</value>
    <comment>Must remain in ASCII characters</comment>
  </data>
  <data name="XWB_SenderLine3" xml:space="preserve">
    <value>MERRIFIELD VA 22082-8412</value>
    <comment>Must remain in ASCII characters</comment>
  </data>
  <data name="XWB_Settings" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="XWB_Show_Hide_Barcode_Text" xml:space="preserve">
    <value>バーコードのテキストを表示する</value>
  </data>
  <data name="XWB_Stretches" xml:space="preserve">
    <value>引き伸ばし</value>
  </data>
  <data name="XWB_Symbology_Types" xml:space="preserve">
    <value>記号タイプ</value>
  </data>
  <data name="XWB_SymbolType" xml:space="preserve">
    <value>記号タイプ:</value>
  </data>
  <data name="XWB_Undefined" xml:space="preserve">
    <value>デフォルトのエンコード モード (一番効果的なモード)。</value>
  </data>
  <data name="XWB_UseMinECL" xml:space="preserve">
    <value>最小レベルのエラー修正の使用</value>
  </data>
  <data name="XWB_Use_Invalid_Data" xml:space="preserve">
    <value>無効なデータを使用する</value>
  </data>
  <data name="XWB_ValidData" xml:space="preserve">
    <value>有効なデータ</value>
  </data>
  <data name="XWB_ExportToImage_Export" xml:space="preserve">
    <value>エクスポート</value>
  </data>
  <data name="XWB_ExportToImage_Export_Options" xml:space="preserve">
    <value>エクスポート オプション</value>
  </data>
  <data name="XWB_ExportToImage_File_Format" xml:space="preserve">
    <value>ファイル形式</value>
  </data>
  <data name="XWB_ExportToImage_Jpeg_Quality" xml:space="preserve">
    <value>JPEG の描画</value>
  </data>
  <data name="XWB_QRCode" xml:space="preserve">
    <value>QR コード:</value>
  </data>
  <data name="XB_EciHeaderDisplayMode_Note" xml:space="preserve">
    <value>EciHeaderDisplayMode プロパティを Show に設定すると、EciNumber が QrCode ビットでエンコードされます。</value>
  </data>
</root>