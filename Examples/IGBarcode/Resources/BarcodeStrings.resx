<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="XWB_Alphanumeric" xml:space="preserve">
    <value>Encodes alphanumeric characters.</value>
  </data>
  <data name="XWB_ApplicationIndicator" xml:space="preserve">
    <value>The Application Indicator is used only with Fnc1Mode=Industry. The valid values are {a-z, A-Z, 00-99}.</value>
  </data>
  <data name="XWB_ApplyData" xml:space="preserve">
    <value>Apply Data</value>
  </data>
  <data name="XWB_BarcodeData" xml:space="preserve">
    <value>Barcode Data</value>
  </data>
  <data name="XWB_BarcodeType" xml:space="preserve">
    <value>TYPE:</value>
  </data>
  <data name="XWB_BarsFillMode" xml:space="preserve">
    <value>Bars Fill Mode</value>
  </data>
  <data name="XWB_ButtonClear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="XWB_Byte" xml:space="preserve">
    <value>Encodes the data as bytes.</value>
  </data>
  <data name="XWB_Code128Barcode" xml:space="preserve">
    <value>Code128Barcode</value>
  </data>
  <data name="XWB_Code128Ucc" xml:space="preserve">
    <value>* The Code 128 UCC barcode symbology encodes a valid AI number. In the sample it starts with an application identifier (01) which is followed by 14 digits - code of the movie, start of the show, date of the show, row, column and discount code (two digits for each).</value>
  </data>
  <data name="XWB_Code39Barcode" xml:space="preserve">
    <value>Code39Barcode</value>
  </data>
  <data name="XWB_CountryCode" xml:space="preserve">
    <value>Country code (modes 2 and 3)</value>
  </data>
  <data name="XWB_Data" xml:space="preserve">
    <value>Data:</value>
  </data>
  <data name="XWB_Dimensions" xml:space="preserve">
    <value>Dimensions</value>
  </data>
  <data name="XWB_DimensionsNote" xml:space="preserve">
    <value>*Note that the XDimension property is used with Stretch="None".</value>
  </data>
  <data name="XWB_EanUpcBarcode" xml:space="preserve">
    <value>EanUpcBarcode</value>
  </data>
  <data name="XWB_Eci" xml:space="preserve">
    <value>No ECI</value>
  </data>
  <data name="XWB_ErrorCorrection" xml:space="preserve">
    <value>Error Correction</value>
  </data>
  <data name="XWB_ErrorCorrectionLevel" xml:space="preserve">
    <value>ErrorCorrectionLevel:</value>
  </data>
  <data name="XWB_ErrorMessage" xml:space="preserve">
    <value>The data is invalid because Code 39 only accepts 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-.$/+%. The assigned data contains lower case characters.</value>
  </data>
  <data name="XWB_Extended" xml:space="preserve">
    <value>Extended</value>
  </data>
  <data name="XWB_GenerateChecksum" xml:space="preserve">
    <value>Generate checksum</value>
  </data>
  <data name="XWB_Gs1DataBarBarcode" xml:space="preserve">
    <value>Gs1DataBarBarcode</value>
  </data>
  <data name="XWB_Interleaved2Of5Barcode" xml:space="preserve">
    <value>Interleaved2Of5Barcode</value>
  </data>
  <data name="XWB_InvalidData" xml:space="preserve">
    <value>Invalid Data</value>
  </data>
  <data name="XWB_Kanji" xml:space="preserve">
    <value>Encodes Kanji characters.</value>
  </data>
  <data name="XWB_Link" xml:space="preserve">
    <value>http://www.infragistics.com/products/silverlight/barcode</value>
  </data>
  <data name="XWB_Mode" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="XWB_Numeric" xml:space="preserve">
    <value>Encodes digits.</value>
  </data>
  <data name="XWB_PostalCode" xml:space="preserve">
    <value>Postal code (modes 2 and 3)</value>
  </data>
  <data name="XWB_Print" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="XWB_PropChanged" xml:space="preserve">
    <value>Property Changed:</value>
  </data>
  <data name="XWB_PropertyChanged" xml:space="preserve">
    <value>Properties Changed</value>
  </data>
  <data name="XWB_RaisedEvents" xml:space="preserve">
    <value>Raised Events</value>
  </data>
  <data name="XWB_RoyalMailBarcode" xml:space="preserve">
    <value>RoyalMailBarcode</value>
  </data>
  <data name="XWB_SampleData" xml:space="preserve">
    <value>Sample Data:</value>
  </data>
  <data name="XWB_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="XWB_SenderLine1" xml:space="preserve">
    <value>UNITED STATES POSTAL SERVICE</value>
  </data>
  <data name="XWB_SenderLine2" xml:space="preserve">
    <value>5501 ANYWHERE HWY</value>
  </data>
  <data name="XWB_SenderLine3" xml:space="preserve">
    <value>MERRIFIELD VA 22082-8412</value>
  </data>
  <data name="XWB_Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="XWB_Show_Hide_Barcode_Text" xml:space="preserve">
    <value>Show/Hide Barcode Text</value>
  </data>
  <data name="XWB_Stretches" xml:space="preserve">
    <value>Stretches</value>
  </data>
  <data name="XWB_Symbology_Types" xml:space="preserve">
    <value>Symbology Types</value>
  </data>
  <data name="XWB_SymbolType" xml:space="preserve">
    <value>Symbol type:</value>
  </data>
  <data name="XWB_Undefined" xml:space="preserve">
    <value>Default encoding mode - the most efficient.</value>
  </data>
  <data name="XWB_UseMinECL" xml:space="preserve">
    <value>Use Minimum Error Correction Level</value>
  </data>
  <data name="XWB_Use_Invalid_Data" xml:space="preserve">
    <value>Use Invalid Data</value>
  </data>
  <data name="XWB_ValidData" xml:space="preserve">
    <value>Valid Data</value>
  </data>
  <data name="XWB_ExportToImage_Export" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="XWB_ExportToImage_Export_Options" xml:space="preserve">
    <value>Export Options</value>
  </data>
  <data name="XWB_ExportToImage_File_Format" xml:space="preserve">
    <value>File Format</value>
  </data>
  <data name="XWB_ExportToImage_Jpeg_Quality" xml:space="preserve">
    <value>Jpeg Quality</value>
  </data>
  <data name="XWB_QRCode" xml:space="preserve">
    <value>QR Code:</value>
  </data>
  <data name="XB_EciHeaderDisplayMode_Note" xml:space="preserve">
    <value>Set the EciHeaderDisplayMode property to Show, so the EciNumber is encoded in the QrCode bits.</value>
  </data>
</root>