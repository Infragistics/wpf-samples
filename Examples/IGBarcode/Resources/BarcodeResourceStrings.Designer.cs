//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IGBarcode.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class BarcodeResourceStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public BarcodeResourceStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("IGBarcode.Resources.BarcodeResourceStrings", typeof(BarcodeResourceStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The AI should have at least 2 digits..
        /// </summary>
        public static string AILength {
            get {
                return ResourceManager.GetString("AILength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The UCC Barcode Data is not well formed. It should look like (AI)GTIN..
        /// </summary>
        public static string BadFormedUCCValue {
            get {
                return ResourceManager.GetString("BadFormedUCCValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The character &apos;{0}&apos; is invalid for CODE39 Data. The valid ones are: {1}.
        /// </summary>
        public static string Code39_NonNumericError {
            get {
                return ResourceManager.GetString("Code39_NonNumericError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Error converting country code. It should be a numeric value..
        /// </summary>
        public static string CountryError {
            get {
                return ResourceManager.GetString("CountryError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The Data value is empty..
        /// </summary>
        public static string EmptyValueMsg {
            get {
                return ResourceManager.GetString("EmptyValueMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Error in the convertion. Refer to the documentation for the valid properties values..
        /// </summary>
        public static string EncodingError {
            get {
                return ResourceManager.GetString("EncodingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Invalid value! Reference the documentation for the valid barcode Data structure..
        /// </summary>
        public static string ErrorMessageText {
            get {
                return ResourceManager.GetString("ErrorMessageText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The GS1 DataBar Expanded family can encode up to 41 alphanumeric characters..
        /// </summary>
        public static string GS1ExMaxAlphanumNumber {
            get {
                return ResourceManager.GetString("GS1ExMaxAlphanumNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The GS1 DataBar Expanded family can encode up to 74 numeric characters..
        /// </summary>
        public static string GS1ExMaxNumericNumber {
            get {
                return ResourceManager.GetString("GS1ExMaxNumericNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The GS1 DataBar Data is used for GTIN - 8, 12, 13, 14 and its length should be 7, 11, 12 or 13. The last digit is reserved for a check sum..
        /// </summary>
        public static string GS1Length {
            get {
                return ResourceManager.GetString("GS1Length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] GS1 DataBar Limited should have 0 or 1 in the first digit. When encoding GTIN-14 Data Structures with an Indicator value greater than 1, it must be used Omnidirectional, Stacked, Stacked Omnidirectional or Truncated barcode type..
        /// </summary>
        public static string GS1LimitedFirstChar {
            get {
                return ResourceManager.GetString("GS1LimitedFirstChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The Interleaved2of5 barcode should have even number of digits. You can put 0 in the front of it if they are odd number..
        /// </summary>
        public static string I25Length {
            get {
                return ResourceManager.GetString("I25Length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The length of the Intelligent Mail barcode Data should be 20, 25, 29 or 31 characters - 20 digits track code (2 for barcode identifier, 3 for service type identifier, 6 or 9 for mailer identifier and 9 or 6 for serial number) and 0, 5, 9 or 11 zip code symbols..
        /// </summary>
        public static string IntelligentMailLength {
            get {
                return ResourceManager.GetString("IntelligentMailLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The second digit should be in the range of 0-4..
        /// </summary>
        public static string IntelligentMailSecondDigit {
            get {
                return ResourceManager.GetString("IntelligentMailSecondDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Invalid Application Identifier element strings. Please, ensure that the AI string in the Data is well formed..
        /// </summary>
        public static string InvalidAI {
            get {
                return ResourceManager.GetString("InvalidAI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The character &apos;{0}&apos; is invalid for the current barcode type. The valid ones are: {1}.
        /// </summary>
        public static string InvalidCharacter {
            get {
                return ResourceManager.GetString("InvalidCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The Barcode dimension can not be determined because of an incorrect combination of Stretch, BarsFillMode and XDimension properties&apos; values..
        /// </summary>
        public static string InvalidDimension {
            get {
                return ResourceManager.GetString("InvalidDimension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The barcode grid rows ({0} number) can not be fit in such a height ({1} pixels)..
        /// </summary>
        public static string InvalidHeight {
            get {
                return ResourceManager.GetString("InvalidHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The barcode Data should has {0} number of digits..
        /// </summary>
        public static string InvalidLength {
            get {
                return ResourceManager.GetString("InvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Invalid PostalCode value - Mode 2 encodes up to 9 digits postal code (U.S. zip code) while Mode 3 encodes up to 6 characters alpha-numeric code..
        /// </summary>
        public static string InvalidPostalCode {
            get {
                return ResourceManager.GetString("InvalidPostalCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The {0} property value should be in the range of {1}-{2}..
        /// </summary>
        public static string InvalidPropertyValue {
            get {
                return ResourceManager.GetString("InvalidPropertyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The SizeVersion number does not generate enough cells to encode the data with the current encoding mode and error correction level..
        /// </summary>
        public static string InvalidVersion {
            get {
                return ResourceManager.GetString("InvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The barcode grid columns ({0} number) can not be fit in such a width ({1} pixels). Check the XDimension value..
        /// </summary>
        public static string InvalidWidth {
            get {
                return ResourceManager.GetString("InvalidWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The XDimension value should be in the range of {0} to {1} for the current Barcode type..
        /// </summary>
        public static string InvalidXDimensionValue {
            get {
                return ResourceManager.GetString("InvalidXDimensionValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The length {0} of the text exceeds the maximum encodable for the current type of barcode. It could encode max {1} characters..
        /// </summary>
        public static string MaxLength {
            get {
                return ResourceManager.GetString("MaxLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The encoding corresponding under the {0} {1} is not supported..
        /// </summary>
        public static string NotSupportedEncoding {
            get {
                return ResourceManager.GetString("NotSupportedEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The codewords (Data &amp; error correction) are more than can be encoded in symbol with a matrix {0}x{1}..
        /// </summary>
        public static string PDF417InvalidRowsColumnsCombination {
            get {
                return ResourceManager.GetString("PDF417InvalidRowsColumnsCombination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Can not extract the primary message from the Data value. Refer to the documentation for its structure..
        /// </summary>
        public static string PrimaryMessageError {
            get {
                return ResourceManager.GetString("PrimaryMessageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Error converting service class. It should be a numeric value..
        /// </summary>
        public static string ServiceClassError {
            get {
                return ResourceManager.GetString("ServiceClassError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] Can not fit the grid in Size({0}, {1}) with the defined Stretch settings..
        /// </summary>
        public static string SmallSize {
            get {
                return ResourceManager.GetString("SmallSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The character &apos;{0}&apos; can not be encoded..
        /// </summary>
        public static string UnencodableCharacter {
            get {
                return ResourceManager.GetString("UnencodableCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The first UPCE digit shall always be zero by specification..
        /// </summary>
        public static string UPCEFirstDigit {
            get {
                return ResourceManager.GetString("UPCEFirstDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] XamBarcode Warning: .
        /// </summary>
        public static string WarningString {
            get {
                return ResourceManager.GetString("WarningString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Localizable] The Data message can not be compacted with {0} mode..
        /// </summary>
        public static string WrongCompactionMode {
            get {
                return ResourceManager.GetString("WrongCompactionMode", resourceCulture);
            }
        }
    }
}
