<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Gauge_Settings1" xml:space="preserve">
    <value>Setting one</value>
  </data>
  <data name="Gauge_Settings2" xml:space="preserve">
    <value>Setting two</value>
  </data>
  <data name="Gauge_Settings3" xml:space="preserve">
    <value>Setting three</value>
  </data>
  <data name="LinearGauge_options" xml:space="preserve">
    <value>OPTIONS</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>OPTIONS</value>
  </data>
  <data name="TeamBudget" xml:space="preserve">
    <value>Team Events’ Budget Utilization</value>
  </data>
  <data name="TeamBudgetDescription" xml:space="preserve">
    <value>The target value shows the allocated budget, the progress bar shows the amount spent until now and the growing ranges indicates the team’s happiness on company organized activities.</value>
  </data>
  <data name="Transition_Duration" xml:space="preserve">
    <value>Transition Duration</value>
  </data>
  <data name="AbsoluteZero" xml:space="preserve">
    <value>Absolute Zero</value>
  </data>
  <data name="AbsoluteZero_Description" xml:space="preserve">
    <value>By international agreement, absolute zero is defined as 0K on the Kelvin scale and as −273.15° on the Celsius scale.</value>
  </data>
  <data name="WindSpeed" xml:space="preserve">
    <value>Wind Speed (mph)</value>
  </data>
  <data name="WindSpeedDescription" xml:space="preserve">
    <value>Raw Data from NOAA. Wind information from Los Angeles (07\16\2013) weather station.</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="WindSpeedGauge" xml:space="preserve">
    <value>Wind Speed Gauge (mph)</value>
  </data>
  <data name="SaharaDesert" xml:space="preserve">
    <value>Sahara Desert</value>
  </data>
  <data name="SaharaDesert_Description" xml:space="preserve">
    <value>Sahara summer temperatures can show a daily range of more than 50 ºC - reaching that temperature during the day then plunging below freezing at night. The highest recorded temperature was 58 ºC (136.4 ºF), in Libya.</value>
  </data>
  <data name="SunkostSalesAvgOrder" xml:space="preserve">
    <value>Avg Order</value>
  </data>
  <data name="SunkostSalesDescription" xml:space="preserve">
    <value>The sales totals to date for 2013, clearly exceed the total sales for all of 2012 (the begginning of the middle range). The 2013 sales numbers suggest that our new marketing campaign is successful, resulting in increased product penetration and a significant sales boost, working our way up to the targeted goals for the whole year (the begginning of the rightmost range).</value>
  </data>
  <data name="SunkostSalesHeader" xml:space="preserve">
    <value>Sunkost: Sales Target of 2013</value>
  </data>
  <data name="SunkostSalesNewCustomers" xml:space="preserve">
    <value>New Customers</value>
  </data>
  <data name="SunkostSalesProfit" xml:space="preserve">
    <value>Profit</value>
  </data>
  <data name="SunkostSalesRevenue" xml:space="preserve">
    <value>YTD Revenue</value>
  </data>
  <data name="NutritionCarbohydrates" xml:space="preserve">
    <value>Carbohydrates</value>
  </data>
  <data name="NutritionDescription" xml:space="preserve">
    <value>Total calories intake ratio between fat, carbohydrates and protein, where middle ranges are healthy ratios and the needles show common practice.</value>
  </data>
  <data name="NutritionFat" xml:space="preserve">
    <value>Fat</value>
  </data>
  <data name="NutritionProtein" xml:space="preserve">
    <value>Protein</value>
  </data>
  <data name="NutritionTitle" xml:space="preserve">
    <value>Healthy Eating</value>
  </data>
  <data name="Orientation" xml:space="preserve">
    <value>Toggle Orientation</value>
  </data>
  <data name="NeedleDragging_High" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="NeedleDragging_Low" xml:space="preserve">
    <value>Low</value>
  </data>
  <data name="NeedleDragging_Medium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="SaharaDesert_Cold" xml:space="preserve">
    <value>Cold</value>
  </data>
  <data name="SaharaDesert_Hot" xml:space="preserve">
    <value>Hot</value>
  </data>
  <data name="SaharaDesert_Mild" xml:space="preserve">
    <value>Mild</value>
  </data>
  <data name="SaharaDesert_Warm" xml:space="preserve">
    <value>Warm</value>
  </data>
</root>