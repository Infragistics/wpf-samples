<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnAddBindingToDP" xml:space="preserve">
    <value>Add Binding to Dependency Property</value>
  </data>
  <data name="btnAddNewPhone" xml:space="preserve">
    <value>Add New Phone</value>
  </data>
  <data name="btnAddress" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="btnCellNumber" xml:space="preserve">
    <value>Cell Number</value>
  </data>
  <data name="btnCity" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="btnDepartment" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="btnEmail" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="btnEmployeeName" xml:space="preserve">
    <value>Employee Name</value>
  </data>
  <data name="btnPhoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="btnPhoto" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="btnRemoveBindingFromDP" xml:space="preserve">
    <value>Remove Binding from Dependency Property</value>
  </data>
  <data name="btnState" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="buttonDefaultContent" xml:space="preserve">
    <value>This is a Button</value>
  </data>
  <data name="clrCyan" xml:space="preserve">
    <value>Cyan</value>
  </data>
  <data name="clrMagenta" xml:space="preserve">
    <value>Magenta</value>
  </data>
  <data name="clrOrange" xml:space="preserve">
    <value>Orange</value>
  </data>
  <data name="companyName" xml:space="preserve">
    <value>Infragistics</value>
  </data>
  <data name="lblBindingValue" xml:space="preserve">
    <value>Binding Value:</value>
  </data>
  <data name="lblCell" xml:space="preserve">
    <value>Cell</value>
  </data>
  <data name="lblChooseEmployee" xml:space="preserve">
    <value>Choose employee(s) on the left and inspect its(their) properties on the right.</value>
  </data>
  <data name="lblChoosePropertyDefinition" xml:space="preserve">
    <value>Choose a property definition way on the left and see how its reset property value works on the right.</value>
  </data>
  <data name="lblChooseType" xml:space="preserve">
    <value>Choose a type on the left and inspect its properties on the right.</value>
  </data>
  <data name="lblDescriptionArea" xml:space="preserve">
    <value>Description Area</value>
  </data>
  <data name="lblEmployeeCollectionDescription" xml:space="preserve">
    <value>Employee's Collection</value>
  </data>
  <data name="lblFilterArea" xml:space="preserve">
    <value>Filter Area</value>
  </data>
  <data name="lblHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="lblOffice" xml:space="preserve">
    <value>Office</value>
  </data>
  <data name="lblOptionsMenu" xml:space="preserve">
    <value>Options Menu</value>
  </data>
  <data name="lblPersonBasicCustomEditor" xml:space="preserve">
    <value>This is a custom editor for type "PersonBasic"</value>
  </data>
  <data name="lblPersonPhoneNumbersCustomEditor" xml:space="preserve">
    <value>This is a custom editor for type "PersonPhoneNumbers"</value>
  </data>
  <data name="lblPhoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="lblPhoneType" xml:space="preserve">
    <value>Phone Type</value>
  </data>
  <data name="lblPreventEditingOfBoundProperties" xml:space="preserve">
    <value>Prevent Editing of Bound Properties:</value>
  </data>
  <data name="lblScrollBar" xml:space="preserve">
    <value>Scroll Bar</value>
  </data>
  <data name="lblSelectedBrush" xml:space="preserve">
    <value>Selected Brush Resource:</value>
  </data>
  <data name="lblSortCatDescending" xml:space="preserve">
    <value>Sort Categories Descending</value>
  </data>
  <data name="lblSortPropDescending" xml:space="preserve">
    <value>Sort Properties Descending</value>
  </data>
  <data name="person1FirstName" xml:space="preserve">
    <value>Jonathan</value>
  </data>
  <data name="person1LastName" xml:space="preserve">
    <value>Bailey</value>
  </data>
  <data name="person2FirstName" xml:space="preserve">
    <value>Maria</value>
  </data>
  <data name="person2LastName" xml:space="preserve">
    <value>Anders</value>
  </data>
  <data name="smpl_ChangingDefaultEditor_01" xml:space="preserve">
    <value>The default editor for the Int32 type is just a plain text box as seen next to the "Person Age" property. However, if you define your own editing data template and set it by using an editor definition you can have a custom editing control like the slider shown next to the "Level" property.</value>
  </data>
  <data name="smpl_EditingTemplateSelector_01" xml:space="preserve">
    <value>There are two data templates defined in XAML. The first data template (with the "SpinIntEditor" key showing increase and decrease buttons right of the value) is used for all properties of type Int32. The second data template (with the "SliderIntEditor" key showing a slider) will be set by the template selector only on the property with name "Level".</value>
  </data>
  <data name="textBoxDefaultContent" xml:space="preserve">
    <value>This is a TextBox</value>
  </data>
  <data name="txtDependencyPropertyTestValue" xml:space="preserve">
    <value>dependency property test value</value>
  </data>
</root>