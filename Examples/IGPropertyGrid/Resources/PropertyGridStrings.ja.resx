<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnAddBindingToDP" xml:space="preserve">
    <value>バインディングを依存プロパティに追加</value>
  </data>
  <data name="btnAddNewPhone" xml:space="preserve">
    <value>電話番号の追加</value>
  </data>
  <data name="btnAddress" xml:space="preserve">
    <value>住所</value>
  </data>
  <data name="btnCellNumber" xml:space="preserve">
    <value>携帯電話番号</value>
  </data>
  <data name="btnCity" xml:space="preserve">
    <value>市</value>
  </data>
  <data name="btnDepartment" xml:space="preserve">
    <value>部署</value>
  </data>
  <data name="btnEmail" xml:space="preserve">
    <value>メール</value>
  </data>
  <data name="btnEmployeeName" xml:space="preserve">
    <value>従業員名</value>
  </data>
  <data name="btnPhoneNumber" xml:space="preserve">
    <value>電話番号</value>
  </data>
  <data name="btnPhoto" xml:space="preserve">
    <value>写真</value>
  </data>
  <data name="btnRemoveBindingFromDP" xml:space="preserve">
    <value>バインディングを依存プロパティから削除</value>
  </data>
  <data name="btnState" xml:space="preserve">
    <value>州</value>
  </data>
  <data name="buttonDefaultContent" xml:space="preserve">
    <value>Button</value>
  </data>
  <data name="clrCyan" xml:space="preserve">
    <value>シアン</value>
  </data>
  <data name="clrMagenta" xml:space="preserve">
    <value>マゼンタ</value>
  </data>
  <data name="clrOrange" xml:space="preserve">
    <value>オレンジ</value>
  </data>
  <data name="companyName" xml:space="preserve">
    <value>Infragistics</value>
  </data>
  <data name="lblBindingValue" xml:space="preserve">
    <value>バインディング値:</value>
  </data>
  <data name="lblCell" xml:space="preserve">
    <value>携帯</value>
  </data>
  <data name="lblChooseEmployee" xml:space="preserve">
    <value>左側で従業員を選択すると、右側にプロパティが表示されます。</value>
  </data>
  <data name="lblChoosePropertyDefinition" xml:space="preserve">
    <value>左側でプロパティ定義を選択すると、右側でプロパティ値の [リセット] 機能を確認できます。</value>
  </data>
  <data name="lblChooseType" xml:space="preserve">
    <value>左側で型を選択すると、右側にプロパティが表示されます。</value>
  </data>
  <data name="lblDescriptionArea" xml:space="preserve">
    <value>説明領域</value>
  </data>
  <data name="lblEmployeeCollectionDescription" xml:space="preserve">
    <value>Employee コレクション</value>
  </data>
  <data name="lblFilterArea" xml:space="preserve">
    <value>フィルター領域</value>
  </data>
  <data name="lblHome" xml:space="preserve">
    <value>自宅</value>
  </data>
  <data name="lblOffice" xml:space="preserve">
    <value>勤務先</value>
  </data>
  <data name="lblOptionsMenu" xml:space="preserve">
    <value>オプション メニュー</value>
  </data>
  <data name="lblPersonBasicCustomEditor" xml:space="preserve">
    <value>これは "PersonBasic" 型のカスタム エディターです。</value>
  </data>
  <data name="lblPersonPhoneNumbersCustomEditor" xml:space="preserve">
    <value>これは "PersonPhoneNumbers" 型のカスタム エディターです。</value>
  </data>
  <data name="lblPhoneNumber" xml:space="preserve">
    <value>電話番号</value>
  </data>
  <data name="lblPhoneType" xml:space="preserve">
    <value>種類</value>
  </data>
  <data name="lblPreventEditingOfBoundProperties" xml:space="preserve">
    <value>バインドされたプロパティの編集の防止</value>
  </data>
  <data name="lblScrollBar" xml:space="preserve">
    <value>スクロール バー</value>
  </data>
  <data name="lblSelectedBrush" xml:space="preserve">
    <value>選択したブラシ リソース:</value>
  </data>
  <data name="lblSortCatDescending" xml:space="preserve">
    <value>項目を降順で並べ替え</value>
  </data>
  <data name="lblSortPropDescending" xml:space="preserve">
    <value>プロパティを降順で並べ替え</value>
  </data>
  <data name="person1FirstName" xml:space="preserve">
    <value>ジョン</value>
  </data>
  <data name="person1LastName" xml:space="preserve">
    <value>ベーリー</value>
  </data>
  <data name="person2FirstName" xml:space="preserve">
    <value>マリア</value>
  </data>
  <data name="person2LastName" xml:space="preserve">
    <value>アンダー</value>
  </data>
  <data name="smpl_ChangingDefaultEditor_01" xml:space="preserve">
    <value>Int32 型のデフォルト エディターは、「Person Age」プロパティの隣に表示されるテキスト ボックスです。ただし、カスタム編集テンプレートを定義し、エディター定義により設定すると、「Level」プロパティの隣に表示されるスライダーのようなカスタム編集コントロールを使用できます。</value>
  </data>
  <data name="smpl_EditingTemplateSelector_01" xml:space="preserve">
    <value>XAML で定義したデータ テンプレートが 2 つあります。最初のデータ テンプレート ("SpinIntEditor" キーがあり、値の右側で増加と減少ボタンがあるテンプレート) は、Int32 型のプロパティに使用されます。第 2 のテンプレート (スライダーを表示する "SliderIntEditor" キーがあるテンプレート) は、「Level」名前を持つプロパティのみでテンプレート セレクターにより設定されます。</value>
  </data>
  <data name="textBoxDefaultContent" xml:space="preserve">
    <value>TextBox</value>
  </data>
  <data name="txtDependencyPropertyTestValue" xml:space="preserve">
    <value>依存プロパティのテスト値</value>
  </data>
</root>