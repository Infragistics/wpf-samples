//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IGShowcase.FinanceDashboard.StockDataServiceProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="StockDataServiceProxy.StockDataServiceProxy")]
    public interface StockDataServiceProxy {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:StockDataServiceProxy/RequestStockData", ReplyAction="urn:StockDataServiceProxy/RequestStockDataResponse")]
        System.IAsyncResult BeginRequestStockData(string symbol, System.AsyncCallback callback, object asyncState);
        
        string EndRequestStockData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:StockDataServiceProxy/RequestStockHistory", ReplyAction="urn:StockDataServiceProxy/RequestStockHistoryResponse")]
        System.IAsyncResult BeginRequestStockHistory(string symbol, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> EndRequestStockHistory(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface StockDataServiceProxyChannel : IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestStockDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestStockDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestStockHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestStockHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockDataServiceProxyClient : System.ServiceModel.ClientBase<IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy>, IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy {
        
        private BeginOperationDelegate onBeginRequestStockDataDelegate;
        
        private EndOperationDelegate onEndRequestStockDataDelegate;
        
        private System.Threading.SendOrPostCallback onRequestStockDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestStockHistoryDelegate;
        
        private EndOperationDelegate onEndRequestStockHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onRequestStockHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StockDataServiceProxyClient() {
        }
        
        public StockDataServiceProxyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockDataServiceProxyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockDataServiceProxyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockDataServiceProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RequestStockDataCompletedEventArgs> RequestStockDataCompleted;
        
        public event System.EventHandler<RequestStockHistoryCompletedEventArgs> RequestStockHistoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy.BeginRequestStockData(string symbol, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestStockData(symbol, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy.EndRequestStockData(System.IAsyncResult result) {
            return base.Channel.EndRequestStockData(result);
        }
        
        private System.IAsyncResult OnBeginRequestStockData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string symbol = ((string)(inValues[0]));
            return ((IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy)(this)).BeginRequestStockData(symbol, callback, asyncState);
        }
        
        private object[] OnEndRequestStockData(System.IAsyncResult result) {
            string retVal = ((IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy)(this)).EndRequestStockData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestStockDataCompleted(object state) {
            if ((this.RequestStockDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestStockDataCompleted(this, new RequestStockDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestStockDataAsync(string symbol) {
            this.RequestStockDataAsync(symbol, null);
        }
        
        public void RequestStockDataAsync(string symbol, object userState) {
            if ((this.onBeginRequestStockDataDelegate == null)) {
                this.onBeginRequestStockDataDelegate = new BeginOperationDelegate(this.OnBeginRequestStockData);
            }
            if ((this.onEndRequestStockDataDelegate == null)) {
                this.onEndRequestStockDataDelegate = new EndOperationDelegate(this.OnEndRequestStockData);
            }
            if ((this.onRequestStockDataCompletedDelegate == null)) {
                this.onRequestStockDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestStockDataCompleted);
            }
            base.InvokeAsync(this.onBeginRequestStockDataDelegate, new object[] {
                        symbol}, this.onEndRequestStockDataDelegate, this.onRequestStockDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy.BeginRequestStockHistory(string symbol, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestStockHistory(symbol, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy.EndRequestStockHistory(System.IAsyncResult result) {
            return base.Channel.EndRequestStockHistory(result);
        }
        
        private System.IAsyncResult OnBeginRequestStockHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string symbol = ((string)(inValues[0]));
            return ((IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy)(this)).BeginRequestStockHistory(symbol, callback, asyncState);
        }
        
        private object[] OnEndRequestStockHistory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> retVal = ((IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy)(this)).EndRequestStockHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestStockHistoryCompleted(object state) {
            if ((this.RequestStockHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestStockHistoryCompleted(this, new RequestStockHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestStockHistoryAsync(string symbol) {
            this.RequestStockHistoryAsync(symbol, null);
        }
        
        public void RequestStockHistoryAsync(string symbol, object userState) {
            if ((this.onBeginRequestStockHistoryDelegate == null)) {
                this.onBeginRequestStockHistoryDelegate = new BeginOperationDelegate(this.OnBeginRequestStockHistory);
            }
            if ((this.onEndRequestStockHistoryDelegate == null)) {
                this.onEndRequestStockHistoryDelegate = new EndOperationDelegate(this.OnEndRequestStockHistory);
            }
            if ((this.onRequestStockHistoryCompletedDelegate == null)) {
                this.onRequestStockHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestStockHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginRequestStockHistoryDelegate, new object[] {
                        symbol}, this.onEndRequestStockHistoryDelegate, this.onRequestStockHistoryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy CreateChannel() {
            return new StockDataServiceProxyClientChannel(this);
        }
        
        private class StockDataServiceProxyClientChannel : ChannelBase<IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy>, IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy {
            
            public StockDataServiceProxyClientChannel(System.ServiceModel.ClientBase<IGShowcase.FinanceDashboard.StockDataServiceProxy.StockDataServiceProxy> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRequestStockData(string symbol, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = symbol;
                System.IAsyncResult _result = base.BeginInvoke("RequestStockData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRequestStockData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RequestStockData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRequestStockHistory(string symbol, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = symbol;
                System.IAsyncResult _result = base.BeginInvoke("RequestStockHistory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> EndRequestStockHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem> _result = ((System.Collections.ObjectModel.ObservableCollection<Infragistics.Framework.StockPriceItem>)(base.EndInvoke("RequestStockHistory", _args, result)));
                return _result;
            }
        }
    }
}
