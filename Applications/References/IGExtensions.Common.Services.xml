<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IGExtensions.Common.Services</name>
    </assembly>
    <members>
        <member name="T:IGExtensions.Common.Services.Assets.Resources.ServiceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.Assets.Resources.ServiceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.Assets.Resources.ServiceStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.Assets.ServiceLocalizer">
            <summary>
            Represents service assets localizer that provides access to the <see cref="P:IGExtensions.Common.Services.Assets.ServiceLocalizer.ServiceStrings"/> as well as to the <see cref="T:IGExtensions.Common.Assets.Resources.CommonStrings"/> 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.Assets.ServiceLocalizer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.Assets.ServiceLocalizer.ServiceStrings">
            <summary>
            Gets service strings resource 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.FlickrData">
            <summary>
             Represents class with information about an images from Yahoo pipes
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.FlickrData.#ctor(System.String,System.Double,System.Double,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Services.FlickrData"/> class.
            </summary>
            <param name="imgSrc">The img SRC.</param>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
            <param name="dateTaken">The date taken.</param>
        </member>
        <member name="P:IGExtensions.Common.Services.FlickrData.ImgSrc">
            <summary>
             Gets source path to an image
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.FlickrData.Latitude">
            <summary>
             Gets Latitude of geographic location associated with the image
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.FlickrData.Longitude">
            <summary>
             Gets Longitude of geographic location associated with the image
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.FlickrData.DateTaken">
            <summary>
             Gets DateTime when the image was taken
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.EarthQuakesService">
            <summary>
            Represents a service for retrieving information about latest earth quakes from USGS
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Services.EarthQuakesService.UsgsEarthQuakesFormat">
            <summary>
            Refer to http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php
            </summary>
        </member>
        <member name="E:IGExtensions.Common.Services.EarthQuakesService.EarthQuakesChanged">
            <summary>
            Occurs when the list of earthquakes is changed
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.OnEarthQuakesRequested(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Called when [RequestEarthQuakes is completed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.OpenReadCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.StartService">
            <summary>
            Called by an application in order to initialize the application extension service.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakesInLastHour(System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes in last hour
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakesInLastDay(System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes in last day 
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakesInLastWeek(System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes in last week
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakesInLastMonth(System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes in last month
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakes(System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes in last week
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.RequestEarthQuakes(System.String,System.Action{System.Collections.Generic.IList{IGExtensions.Common.Models.EarthQuakeData}})">
            <summary>
            Request earthquakes with no default callback method
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.EarthQuakesService.ProcessEarthQuakes(System.IO.Stream,System.Boolean)">
            <summary>
            Processes the stock details.
            </summary>
            <param name="data">The data.</param>
            <param name="forceUpdate">The data.</param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Services.EarthQuakeDataRoot">
            <summary>
            
            <para> description: http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php </para>
            <para> auto-generated: http://json2csharp.com/ </para>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeDataRoot.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.EarthQuakeProperties">
            <summary>
            Represents properties of an earthquake
            <para>description: http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php </para>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.Magnitude">
            <summary>
            Gets or sets Magnitude
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.MagnitudeType">
            <summary>
            Gets or sets Magnitude Type
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.Reports">
            <summary>
            Gets or sets Reports
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.Intensity">
            <summary>
            Gets or sets Intensity
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.Significance">
            <summary>
            Gets or sets Significance
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.EarthQuakeProperties.Time">
            <summary>
            Gets or sets Time
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.FlickrImagesService">
            <summary>
            Represents a service for quarrying images from Yahoo pipes
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.FlickrImagesService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Services.FlickrImagesService"/> class.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.FlickrImagesService.GetFlickrData(System.String,System.String,System.Int32,System.Action{System.Collections.Generic.IEnumerable{IGExtensions.Common.Services.FlickrData}})">
            <summary>
            Gets the flickr data.
            </summary>
            <param name="query">The query.</param>
            <param name="location">The location.</param>
            <param name="max">The max.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.FlickrImagesService.OpenReadCompleted(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Opens the read completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.OpenReadCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.FlickrImagesService.ProcessResult(System.IO.Stream)">
            <summary>
            Processes the result.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Services.ServiceLocator">
            <summary>
            Represents XAML wrapper class for locating common services provided by IGExtensions library
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.ServiceLocator.GetInstance``1">
            <summary>
            Gets the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Services.StockDataCacheService">
            <summary>
            Represents a service for caches stock market quotes 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Services.StockDataCacheService.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Services.StockDataCacheService"/> class.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.SetCacheDuration(System.TimeSpan)">
            <summary>
            Sets the duration of the cache.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.UpdateCache(System.String,System.Collections.Generic.IEnumerable{IGExtensions.Common.Models.StockTickerData})">
            <summary>
            Updates the cache.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.GetFromCache(System.String)">
            <summary>
            Gets from cache.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.HasCacheExpired(System.String)">
            <summary>
            Determines whether [has cache expired] [the specified symbol].
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>
            	<c>true</c> if [has cache expired] [the specified symbol]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.IsSymbolInCache(System.String)">
            <summary>
            Determines whether [is symbol in cache] [the specified symbol].
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>
            	<c>true</c> if [is symbol in cache] [the specified symbol]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Services.StockDataCacheService.UpdateCache">
            <summary>
            Updates the cache.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.CacheItem`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IGExtensions.Common.Services.CacheItem`1.Data">
            <summary>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.CacheItem`1.LastUpdate">
            <summary>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Services.CacheItem`1.IsExpired">
            <summary>
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.StockYahooDataService">
            <summary>
            Represents a service that retrieves stock data from Yahoo!
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Services.StockYahooDataService.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Services.StockYahooDataService"/> class.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RefreshDetails(System.Collections.Generic.IList{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,IGExtensions.Common.Models.StockTickerDetails}})">
            <summary>
            Refreshes the details.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RequestStockHistory(System.String,System.DateTime,System.Action{System.String,IGExtensions.Common.Models.StockTickerList})">
            <summary>
            Refreshes the data.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="startDate">The start date.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RequestStockHistory(System.String,System.DateTime,System.DateTime,System.Action{System.String,IGExtensions.Common.Models.StockTickerList})">
            <summary>
            Refreshes the data.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RefreshSectorSummary(System.Action{System.Collections.Generic.IDictionary{System.String,IGExtensions.Common.Models.StockData}})">
            <summary>
            Refreshes the sector summary.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RefreshIndustrySummary(System.Int32,System.Action{System.Collections.Generic.IDictionary{System.String,IGExtensions.Common.Models.StockData}})">
            <summary>
            Refreshes the industry summary per sector.
            </summary>
            <param name="index">The index of the sector.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.RefreshCompanySummary(System.Int32,System.Action{System.Collections.Generic.IDictionary{System.String,IGExtensions.Common.Models.StockData}})">
            <summary>
            Refreshes the companies summary per industry.
            </summary>
            <param name="index">The index of the industry.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.OnRefreshDetailsCompleted(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Called when [refresh details complete].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.OpenReadCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.OnRefreshDataCompleted(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Called when [refresh data complete].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.OpenReadCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.AlignStockData(IGExtensions.Common.Models.StockTickerList)">
            <summary>
            Align stock data with other stocks by prepending empty data items 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.ProcessStockDetails(System.IO.Stream)">
            <summary>
            Processes the stock details.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.ProcessStockData(System.IO.Stream)">
            <summary>
            Processes the stock data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.OnRefreshFinancialDataCompleted(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Called when [refresh sector summary complete].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.OpenReadCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Services.StockYahooDataService.ProcessFinancialData(System.IO.Stream)">
            <summary>
            Processes the sector summary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Services.WeatherService">
            <summary>
            Represents a service that retrieves weather data from Google 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.WeatherService.GetWeatherGoogle(System.String)">
            <summary>
            Requests weather data from 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.WeatherService.RequestCallbackWeatherGoogle(System.IAsyncResult)">
            <summary>
            Request's callback for weather from Google
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.WeatherService.GetWeatherNOAA(System.String)">
            <summary>
            Requests weather data from Google
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Services.WeatherService.RequestCallbackWeatherNOAA(System.IAsyncResult)">
            <summary>
            Request's callback for weather from Google
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.WeatherNoaaRequestState">
            <summary>
            Represents a state for weather request from Google.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Services.WeatherGoogleRequestState">
            <summary>
            Represents a state for weather request from Google.
            </summary>
        </member>
    </members>
</doc>
