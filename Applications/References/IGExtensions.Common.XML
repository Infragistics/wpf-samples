<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IGExtensions.Common</name>
    </assembly>
    <members>
        <member name="T:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings.WashColorSelector">
            <summary>
              Looks up a localized string similar to Wash Color Selector:.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings.WashEditorTitle">
            <summary>
              Looks up a localized string similar to Color Wash Editor.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ColorWashEditorStrings.WashModeSelector">
            <summary>
              Looks up a localized string similar to Wash Mode Selector:.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Assets.Resources.CommonLocalizer">
            <summary>
            Represents common assets localizer that provides access to the <see cref="P:IGExtensions.Common.Assets.Resources.CommonLocalizer.CommonStrings"/> 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonLocalizer.CommonStrings">
            <summary>
            Gets common strings resource 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonLocalizer.GeoStrings">
            <summary>
            Gets geographic strings resource 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Assets.Resources.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoDownloadLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/application-samples.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoDownloadLinkWPF">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/wpf/application-samples.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoDownloadTitle">
            <summary>
              Looks up a localized string similar to Download Source Code.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoHeader">
            <summary>
              Looks up a localized string similar to Info.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoWebsiteLink">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppInfoWebsiteTitle">
            <summary>
              Looks up a localized string similar to Visit Company Website.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppLanguage">
            <summary>
              Looks up a localized string similar to en.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppShareTitle">
            <summary>
              Looks up a localized string similar to SHARE:.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppTooltip_ColorWasherButton">
            <summary>
              Looks up a localized string similar to Opens Color Washer window where you can wash application theme using Infragistics Resource Washer..
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppTooltip_InfoButton">
            <summary>
              Looks up a localized string similar to Opens Information window about this application..
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppTooltip_ShareButton">
            <summary>
              Looks up a localized string similar to Shares this link to this application on social portals such as Facebook, Twitter and many more..
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppUsedControls">
            <summary>
              Looks up a localized string similar to Used Infragistics Controls:.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppView_About">
            <summary>
              Looks up a localized string similar to About.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.AppView_ColorWasher">
            <summary>
              Looks up a localized string similar to Color Washer.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.DataChartSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/data-chart/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.DockManagerSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/dock-manager.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.GeographicMapSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/geographic-map/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.OutlookBarSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/outlook-bar/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.PivotGridSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/pivot-grid.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.ResourceWasherSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/resource-washer/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.ResourceWasherSamplesLinksSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/resource-washer/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SliderSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/slider/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_BTS">
            <summary>
              Looks up a localized string similar to Bureau of Transportation Statistics.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_CIA">
            <summary>
              Looks up a localized string similar to CIA World Factbook.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_GeoCommons">
            <summary>
              Looks up a localized string similar to GeoCommons.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_IAT">
            <summary>
              Looks up a localized string similar to India Airline Traffic, Jet Lite, Jet Airways.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_NOAA">
            <summary>
              Looks up a localized string similar to NOAA National Weather.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_USAT">
            <summary>
              Looks up a localized string similar to FAA, US Airways, American Airlines, United Airlines, Delta Air Lines.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_USCB">
            <summary>
              Looks up a localized string similar to U.S. Census Bureau.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_USGS">
            <summary>
              Looks up a localized string similar to U.S. Geological Survey.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceData_USNA">
            <summary>
              Looks up a localized string similar to U.S. National Atlas.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceImagery_BingMaps">
            <summary>
              Looks up a localized string similar to Bing Maps.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceImagery_EsriMaps">
            <summary>
              Looks up a localized string similar to Esri.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceImagery_MapQuest">
            <summary>
              Looks up a localized string similar to Map Quest.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.SourceImagery_OpenStreetMap">
            <summary>
              Looks up a localized string similar to Open Street Map.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.Sources">
            <summary>
              Looks up a localized string similar to DATA SOURCES.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.TileManagerSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/tile-manager/.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.CommonStrings.TreeSamplesLinkSL">
            <summary>
              Looks up a localized string similar to http://www.infragistics.com/products/silverlight/tree/.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Assets.Resources.GeoStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Berlin">
            <summary>
              Looks up a localized string similar to Berlin.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Delhi">
            <summary>
              Looks up a localized string similar to Delhi.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_London">
            <summary>
              Looks up a localized string similar to London.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_LosAngeles">
            <summary>
              Looks up a localized string similar to LosAngeles.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Manila">
            <summary>
              Looks up a localized string similar to Manila.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_MexicoCity">
            <summary>
              Looks up a localized string similar to MexicoCity.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Moscow">
            <summary>
              Looks up a localized string similar to Moscow.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Mumbai">
            <summary>
              Looks up a localized string similar to Mumbai.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_NewYork">
            <summary>
              Looks up a localized string similar to NewYork.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_SaoPaulo">
            <summary>
              Looks up a localized string similar to SaoPaulo.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Sedney">
            <summary>
              Looks up a localized string similar to Sedney.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Seoul">
            <summary>
              Looks up a localized string similar to Seoul.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Shanghai">
            <summary>
              Looks up a localized string similar to Shanghai.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Tokyo">
            <summary>
              Looks up a localized string similar to Tokyo.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.GeoStrings.XWM_Location_Warsaw">
            <summary>
              Looks up a localized string similar to Warsaw.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Assets.Resources.ShareLinkStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.BlogFeed">
            <summary>
              Looks up a localized string similar to Blog Feed.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Blogger">
            <summary>
              Looks up a localized string similar to Post To Blogger.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Delicious">
            <summary>
              Looks up a localized string similar to Add To Delicious.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Digg">
            <summary>
              Looks up a localized string similar to Share On Digg.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Facebook">
            <summary>
              Looks up a localized string similar to Share On Facebook.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.FriendFeed">
            <summary>
              Looks up a localized string similar to Share On Friend Feed.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.GoogleBookmark">
            <summary>
              Looks up a localized string similar to Google Bookmark.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.GooglePlus">
            <summary>
              Looks up a localized string similar to Share On Google Plus.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.LinkedIn">
            <summary>
              Looks up a localized string similar to Share On LinkedIn.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.MySpace">
            <summary>
              Looks up a localized string similar to Share On MySpace.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.PinIt">
            <summary>
              Looks up a localized string similar to Pin It.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.PrintFriendly">
            <summary>
              Looks up a localized string similar to Create PDF And Print Friendly.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Reddit">
            <summary>
              Looks up a localized string similar to Share On Reddit.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.StumbleUpon">
            <summary>
              Looks up a localized string similar to Share On StumbleUpon.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Assets.Resources.ShareLinkStrings.Tweet">
            <summary>
              Looks up a localized string similar to Tweet This.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Commands.RelayCommand`1">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Commands.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Commands.RelayCommand`1"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:IGExtensions.Common.Commands.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="M:IGExtensions.Common.Commands.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Commands.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:IGExtensions.Common.Commands.RelayCommand`1.SafeConvert(System.Object)">
            <summary>
            Converts the value to type T.  If the conversion is not possible
            a null value is returned (instead of an exception)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:IGExtensions.Common.Controls.AppLogo.AppImage">
            <summary>
            Gets or sets images source for an application
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.AppScaleViewer">
            <summary>
            Represents the Application Scale Viewer that scales its contents with aspect ratio
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleViewer.#ctor">
            <summary>
            Constructs an instance of the AppScaleContainer
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleViewer.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleViewer.ArrangeOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleContainer.#ctor">
            <summary>
            Constructs an instance of the AppScaleContainer
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Controls.AppScaleContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Controls.DesignControl">
            <summary>
            Interaction logic for DesignControl.xaml
            </summary>
            <summary>
            DesignControl
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.DesignControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBaseEditor.PropertyName">
            <summary>
            Gets or sets the PropertyName property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBaseEditor.PropertyToolTip">
            <summary>
            Gets or sets the PropertyToolTip property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBaseEditor.PropertyNameVisibility">
            <summary>
            Gets or sets the PropertyNameVisibility property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBaseEditor.PropertyToolTipVisibility">
            <summary>
            Gets or sets the PropertyToolTipVisibility property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBrushCollectionEditor.BrushCollection">
            <summary>
            Gets or sets the BrushCollection property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.PropertyBrushCollectionEditor.BrushCollectionPreviewProperty">
            <summary>
            Identifies the BrushCollectionPreview dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBrushCollectionEditor.BrushCollectionPreview">
            <summary>
            Gets the BrushCollectionPreview.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBrushColorEditor.OpacitySliderVisibility">
            <summary>
            Gets or sets the OpacitySliderVisibility property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBrushColorEditor.PropertyColor">
            <summary>
            Gets or sets the PropertyColor property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyBrushColorEditor.BrushColor">
            <summary>
            Gets or sets the BrushColor property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyColorCollectionEditor.ColorCollection">
            <summary>
            Gets or sets the ColorCollection property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.PropertyColorCollectionEditor.ColorCollectionPreviewProperty">
            <summary>
            Identifies the ColorCollectionPreview dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyColorCollectionEditor.ColorCollectionPreview">
            <summary>
            Gets the ColorCollectionPreview.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.NavigationSampleLink.Component">
            <summary>
            Gets or sets the Component property 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.AutoCompleteBox">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.AutoCompleteBox"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ObservableControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionViewer.BrushCollection">
            <summary>
            Gets or sets the BrushCollection property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.BrushCollectionViewer.PaletteColorsProperty">
            <summary>
            Identifies the PaletteColors dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionViewer.PaletteColors">
            <summary>
            Gets or sets the fill value for this scale.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.BrushCollectionViewer.PreviewBrushProperty">
            <summary>
            Identifies the PreviewBrush dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionViewer.PreviewBrush">
            <summary>
            Gets the PreviewBrush.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionSelector.SelectedBrushCollectionIndex">
            <summary>
            Gets or sets SelectedBrushCollectionIndex property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionSelector.BrushCollectionList">
            <summary>
            Gets or sets the BrushCollectionList property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionSelector.BrushesReversedToggleVisibility">
            <summary>
            Gets or sets the BrushesReversedToggleVisibility property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.BrushCollectionSelector.IsReversedBrushItemsProperty">
            <summary>
            Identifies the IsReversedBrushItems dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.BrushCollectionSelector.IsReversedBrushItems">
            <summary>
            Gets or sets IsReversedBrushItems is reversed.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorPicker">
            <summary>
            Represents a control for selecting a brush from color palette 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.ColorPicker.#ctor">
            <summary>
            Constructs an instance of the ColorPicker 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.ColorPicker.ContrastColor(System.Windows.Media.Color)">
            <summary>
            Determines which color, white or black, is ideal to contrast the parameter color.
            </summary>
            <param name="color"></param>
            <returns>Color</returns>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.ColorSamplerMode">
            <summary>
            Gets or sets the ColorSamplerMode property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.ColorSamplerBackground">
            <summary>
            Gets or sets the ColorSamplerBackground property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.ColorSamplerToggleVisibility">
            <summary>
            Gets or sets the ColorSamplerToggleVisibility property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.ColorSamplerPreviewVisibility">
            <summary>
            Gets or sets the ColorSamplerPreviewVisibility property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.ColorOpacitySliderVisibility">
            <summary>
            Gets or sets the ColorOpacitySliderVisibility property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.ColorPicker.SelectedBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorPicker.SelectedBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.ColorPicker.ContrastSelectedBrushProperty">
            <summary>
            Gets or sets the ContrastSelectedBrush property.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashEditor">
            <summary>
            ColorWashEditor
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.ColorWashEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashEditorPanel">
            <summary>
            Represents a control for selecting settings for the <see cref="T:Infragistics.Windows.Themes.ResourceWasher"/> 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.ColorWashEditorPanel.#ctor">
            <summary>
            Constructs an instance of the ColorWashEditorPanel 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashSettings">
            <summary>
            Represents color wash settings for the <see cref="T:IGExtensions.Common.Controls.ColorWashEditorPanel"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.ColorWashSettings.#ctor">
            <summary>
            Constructs an instance of the ColorWashSettings 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorWashSettings.WashMode">
            <summary>
            Gets or sets Wash Mode
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.ColorWashSettings.WashColor">
            <summary>
            Gets or sets Wash Color
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashManager">
            <summary>
            Represents color wash manager that keeps track of current wash settings 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWasher">
            <summary>
            Represents an extension for the <see cref="T:Infragistics.Windows.Themes.ResourceWasher"/>
            <remarks>
            WPF http://www.infragistics.com/products/wpf/resource-washer
            </remarks>
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashGroupCollection">
            Represents an extension for the <see cref="T:Infragistics.Windows.Themes.WashGroupCollection"/>
        </member>
        <member name="T:IGExtensions.Common.Controls.ColorWashGroup">
            Represents an extension for the <see cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueRangeMinString">
            <summary>
            Gets or sets the PropertyValueRangeMinString property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueRangeMaxString">
            <summary>
            Gets or sets the PropertyValueRangeMaxString property 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueFormatPropertyName">
            <summary>
            Gets or sets the PropertyName property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueFormat">
            <summary>
            Gets or sets the PropertyValueFormat property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueAbsoluteMin">
            <summary>
            Gets or sets the PropertyValueAbsoluteMin property Absolute
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueAbsoluteMax">
            <summary>
            Gets or sets the PropertyValueAbsoluteMax property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueRangeMin">
            <summary>
            Gets or sets the PropertyValueRangeMin property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyRangeEditor.PropertyValueRangeMax">
            <summary>
            Gets or sets the PropertyValueRangeMax property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyValueEditor.PropertyValueString">
            <summary>
            Gets or sets the PropertyValueString property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyValueEditor.PropertyValueFormat">
            <summary>
            Gets or sets the PropertyValueFormat property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyValueEditor.PropertyValue">
            <summary>
            Gets or sets the PropertyValue property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyValueEditor.PropertyValueMin">
            <summary>
            Gets or sets the PropertyValueMin property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PropertyValueEditor.PropertyValueMax">
            <summary>
            Gets or sets the PropertyValueMax property 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.Expander">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.Expander"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.PageBusyIndicator">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Controls.PageBusyIndicator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PageBusyIndicator.Visibility">
            <summary>
            Gets or sets Visibility of the  PageBusyIndicator
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PageBusyIndicator.IndicatorIsBusy">
            <summary>
            Gets or sets the state whether the PageBusyIndicator is busy
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PageBusyIndicator.IndicatorOverlayBrush">
            <summary>
            Gets or sets Overlay Brush of the PageBusyIndicator
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PageBusyIndicator.IndicatorOverlayOpacity">
            <summary>
            Gets or sets Overlay Brush of the PageBusyIndicator
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.PageBusyIndicator.IndicatorSize">
            <summary>
            Gets or sets size of the PageBusyIndicator
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.MovableControl.IsMovable">
            <summary>
            Gets or sets whether this control is movable within its parent's boundaries.  
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.OptionsPanel">
            <summary>
            Represents a panel control that can be drag within its parent control's boundaries. 
            <para>This control is used in samples that provide options/controls for interacting with IG controls. </para>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.OptionsPanel.HeaderText">
            <summary>
            Gets or sets Header Text of the OptionsPanel
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.OptionsPanel.IsMovable">
            <summary>
            Gets or sets whether the OptionsPanel can be movable within its parent control's boundaries.  
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Controls.OptionsPanel.IsExpandable">
            <summary>
            Gets or sets whether the OptionsPanel can be movable within its parent control's boundaries.  
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.GridSplitter">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.GridSplitter"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.TabControl">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.TabControl"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.TabItem">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.TabItem"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Controls.WrapPanel">
            <summary>
            Represents common <see cref="T:System.Windows.Controls.WrapPanel"/> control wrapper for SL and WPF
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Converters.AssetsPathConverter">
            <summary>
            
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Converters.AssetsPathConverter.ComponentName">
            <summary>
            Gets or sets component name used to build path to an asset: /[ComponentName];component/[ComponentAssetsPath]  
            <example> component = "IGExtensions.Common" </example>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Converters.AssetsPathConverter.ComponentAssetsPath">
            <summary>
            Gets or sets component path to an asset: /[ComponentName];component/[ComponentAssetsPath]  
            <example> path = "/assets/images/" </example>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Converters.AssetsPathConverter.IsCultureSpecific">
            <summary>
            Gets or sets whether or component path is culture specific, and it requires "en", "ja" in the component path 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.AssetsPathConverter.LocalizePath(System.String,System.Boolean)">
            <summary>
            Returns localized storage path for all assets such as xml, mdb, and images files
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.AssetsPathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
            <param name="value">The source data being passed to the target.</param><param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param><param name="parameter">An optional parameter to be used in the converter logic.</param><param name="culture">The culture of the conversion.</param>
        </member>
        <member name="M:IGExtensions.Common.Converters.AssetsPathConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <returns>
            The value to be passed to the source object.
            </returns>
            <param name="value">The target data being passed to the source.</param><param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param><param name="parameter">An optional parameter to be used in the converter logic.</param><param name="culture">The culture of the conversion.</param>
        </member>
        <member name="T:IGExtensions.Common.Converters.BoolToVisibilityConverter">
            <summary>
            Represents a value converter for converting <see cref="T:System.Boolean"/> value to <see cref="T:System.Windows.Visibility"/> enum.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.DateToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.DateToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:IGExtensions.Common.Converters.ImagePathConverter">
            <summary>
            Represents a converter for paths to images 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.ImagePathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.ImagePathConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.ImagePathConverter.GetImageLocalPath(System.String)">
            <summary>
            Returns localized path to an image resource.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:IGExtensions.Common.Converters.NotNullToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.NotNullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.NotNullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:IGExtensions.Common.Converters.StringFormatConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.ValueFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:IGExtensions.Common.Converters.ValueFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:IGExtensions.Common.Converters.VisibilityConverter">
            <summary>
            Converts a Boolean value to <see cref="T:System.Windows.Visibility"/> enumerable values based on properties
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Converters.WarpGradientParameters.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Converters.WarpGradientParameters"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:IGExtensions.Common.Converters.WarpGradientParameters.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:IGExtensions.Common.Converters.WarpGradientParameters.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="T:IGExtensions.Common.DataProviders.CultureInfoProvider">
            <summary>
            Represents a data provider for CultureInfo
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.CultureInfoProvider.GetUiCultureInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.StorageDataProvider.LocalizePath(System.String,System.Boolean)">
            <summary>
            Returns localized storage path for all assets such as xml, mdb, and images files
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.StorageDataProvider.GetStorageImagePath(System.String)">
            <summary>
            Returns the localized full path for a given image asset
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.StorageDataProvider.GetStorageImagePath">
            <summary>
            Returns the localized full path for all images assets
            <para>NOTE: By default, images are not localizable </para> 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.DataProviders.XmlDataProvider">
            <summary>
            Represents a data provider for accessing XML files.
            </summary>
        </member>
        <member name="E:IGExtensions.Common.DataProviders.XmlDataProvider.LoadXmlDataCompleted">
            <summary>
            Occurs when finished downloading a xml file.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.XmlDataProvider.LoadXmlDataResource(System.String,System.String)">
            <summary>
            Gets xml file as XDocument from specified path, e.g. Assets/Data/[Local]/FileName.xml
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.XmlDataProvider.LoadXmlDataReader(System.String,System.String)">
            <summary>
            Gets xml file as XmlReader from specified path, e.g. Assets/Data/[Local]/FileName.xml
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.XmlDataProvider.LoadXmlDataAsync(System.String)">
            <summary>
            Gets xml file from ~/SamplesCommon/sl/[Local]/xml location
            </summary>
            <param name="xmlFileName">File name without file path: "Customer.xml" </param>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.XmlDataProvider.GetXmlDataAsync(System.String,System.Object)">
            <summary>
            Gets xml file from specified path, e.g. ~/SamplesCommon/sl/[Local]/xml path
            </summary>
            <param name="xmlFileName">File name without file path: "Customer.xml" </param>
            <param name="userState"></param>
        </member>
        <member name="E:IGExtensions.Common.DataProviders.IXmlDataProvider.LoadXmlDataCompleted">
            <summary>
            Occurs when finished loading a xml file.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.DataProviders.HttpQueryProvider">
            <summary>
            Represents a provider Http Queries
            </summary>
        </member>
        <member name="M:IGExtensions.Common.DataProviders.HttpQueryProvider.QueryStringParameters">
            <summary>
            Retrieve the query string parameters (useful for click-once deployments).
            </summary>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Frameworks.MotionTimeFramework">
            <summary>
            Represents the Motion Framework for animating data over time 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Frameworks.MotionTimeFramework.IsMotionStarted">
            <summary>
            Gets or sets weather the Motion Framework is started 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Frameworks.MotionTimeFramework.MotionSlider">
            <summary>
            Gets or sets the slider of the Motion Framework
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Frameworks.AnimationFramework.AnimateProperty(System.Windows.DependencyObject,System.String,System.Double,System.Double)">
            <summary>
            Animate a property of <see cref="T:System.Windows.DependencyObject"/> using <see cref="T:System.Windows.Media.Animation.DoubleAnimation"/>
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
            <param name="targetValue"></param>
            <param name="seconds"></param>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianPoint.X">
            <summary>
            Gets or sets X property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianPoint.Y">
            <summary>
            Gets or sets Y property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.CenterX">
            <summary>
            Gets or sets Center X property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.CenterY">
            <summary>
            Gets or sets Center Y property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.X">
            <summary>
            Gets or sets X property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.Y">
            <summary>
            Gets or sets Y property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.Width">
            <summary>
            Gets or sets Width property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CartesianRegion.Height">
            <summary>
            Gets or sets Height property 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoCalculator">
            <summary>
            Provides formulas for calculating values between geographic objects
            <para><see cref="T:IGExtensions.Common.Models.GeoPoint"/>, <see cref="T:IGExtensions.Common.Models.GeoLocation"/>,  </para>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetBearingAppx(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable)">
            <summary>
            Calculates angle bearing from origin location towards destination location, in degrees
            <para> North = 0, East = 90, South = 180, West = 270 </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetBearing(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable)">
            <summary>
            Calculates the initial bearing from origin location in direction of destination location, in degrees from true North
            <para> North = 0, East = 90, South = 180, West = 270 </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetBearingFinal(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable)">
            <summary>
            Calculates the final bearing at destination location from origin geographic, in degrees from true North
            <para> North = 0, East = 90, South = 180, West = 270 </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetBearingFinal(IGExtensions.Common.Models.IGeoLocatable,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the final bearing at destination location from origin geographic, in degrees from true North
            <para> North = 0, East = 90, South = 180, West = 270 </para>
            </summary>
            <param name="origin">location in geographic degrees </param>
            <param name="bearing">bearing in geographic degrees from origin</param>
            <param name="distance">distance in km from origin</param>
            <param name="radius">radius in km</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetDestination(IGExtensions.Common.Models.IGeoLocatable,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the destination location at distance and in direction of bearing from origin location 
            <para>Using the Spherical law of cosines </para>
            </summary>
            <param name="origin">location in geographic degrees </param>
            <param name="bearing">bearing in geographic degrees from origin</param>
            <param name="distance">distance in km</param>
            <param name="radius">radius in km</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetLatitudeMax(IGExtensions.Common.Models.IGeoLocatable,System.Double)">
            <summary>
            Calculates the maximum latitude of a great circle path from origin location in direction of bearing angle
            <para>using Clairaut’s formula</para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="bearing">bearing from origin in geographic degrees</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetIntersection(IGExtensions.Common.Models.IGeoLocatable,System.Double,IGExtensions.Common.Models.IGeoLocatable,System.Double,System.Double)">
            <summary>
            Calculates intersection point of paths from two geographic locations
            </summary>
            <param name="origin1">origin of first location in geographic degrees</param>
            <param name="origin2">origin of second location in geographic degrees</param>
            <param name="bearing1">bearing from first location in geographic degrees</param>
            <param name="bearing2">bearing from second location in geographic degrees</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetMidpoint(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable)">
            <summary>
            Calculates mid point between two geographic locations on the Great Circle  
            <para>Using the Spherical law of cosines </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetDistanceH(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable,System.Double)">
            <summary>
            Calculates distance between two geographic locations on the Great Circle   
            <para>Using the Haversine formula</para>
            <remarks>"Virtues of the Haversine" by R. W. Sinnott, Sky and Telescope, vol 68, no 2, 1984</remarks>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetDistance(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable,System.Double)">
            <summary>
            Calculates distance between two geographic locations on the Great Circle  
            <para>Using the Spherical law of cosines </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetDistanceAppx(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable,System.Double)">
            <summary>
            Calculates distance between two geographic locations on equirectangular map projection  
            <para>Using Pythagoras’ theorem </para>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetRadiusAppx(System.Double,System.Double)">
            <summary>
            Calculates radius of a geographic sphere at a given latitude
            </summary>
            <param name="latitude">latitude in geographic degrees</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
            <remarks>radius defaults to Earth's equatorial radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetPathPoints(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.IGeoLocatable,System.Double,System.Double)">
            <summary>
            Calculates geographic path between two geographic locations on the Great Circle 
            <para>Using the Spherical law of cosines </para>
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
            <param name="interval">interval between consecutive points of the geographic path, in kilometers</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetPathPoints(System.Collections.Generic.IEnumerable{IGExtensions.Common.Models.IGeoLocatable},System.Double,System.Double)">
            <summary>
            Calculates geographic path between two geographic locations on the Great Circle 
            <para>Using the Spherical law of cosines </para>
            </summary>
            <param name="geoShape">list of points in geographic shape</param>
            <param name="interval">interval between consecutive points of the geographic path, in kilometers</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCalculator.GetRhumb(IGExtensions.Common.Models.GeoPoint,IGExtensions.Common.Models.GeoPoint,System.Double)">
            <summary>
            Calculates distance/bearing between two geographic locations on Rhumb line (loxodrome)
            </summary>
            <param name="origin">origin location in geographic degrees</param>
            <param name="destination">destination location in geographic degrees</param>
            <param name="radius">radius of a geographic sphere, in kilometers</param>
            <remarks>radius defaults to Earth's mean radius</remarks>
        </member>
        <member name="M:IGExtensions.Common.Models.DoubleEx.ToRadians(System.Double)">
            <summary> Converts a value to radians </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.DoubleEx.ToDegrees(System.Double)">
            <summary> Converts a value to degrees, in range -180 and 180 </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.DoubleEx.ToDegreesNormalized(System.Double)">
            <summary> Converts a value to degrees with negative values normalized between 0 and 360 </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.DoubleEx.ToDegreesReversed(System.Double)">
            <summary> Converts a angle (in degrees) to reversed angle with negative values normalized between 0 and 360 </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoCoordinateGrid">
            <summary>
            GeoCoordinateGrid is collection of vertical (Longitude) and horizontal (Latitude) lines in Geodetic coordinate system. 
            It also provides functionality for creating coordinate lines at specific intervals
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoCoordinateGrid.LongitudeLines">
            <summary>
            List of Geodetic Longitude (vertical) lines
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoCoordinateGrid.LatitudeLines">
            <summary>
            List of Geodetic Latitude (horizontal) lines
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCoordinateGrid.GetLongitudeLines">
            <summary>
            Create of Geodetic Longitude (vertical) lines every 10 degrees
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoCoordinateGrid.GetLatitudeLines">
            <summary>
            Create of Geodetic Latitude (horizontal) lines every 10 degrees
            </summary>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoCoordinateLine">
            <summary>
            GeoCoordinateLine is a line in Geodetic coordinate system between two GeoLocation objects
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoCoordinateLine.Origin">
            <summary>
            Gets or Sets the top-left corner (Origin) of GeoRegion
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoCoordinateLine.Ending">
            <summary>
            Gets or Sets the bottom-right corner (Ending) of GeoRegion
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoLongitudeLine">
            <summary>
            GeoLongitudeLine is a vertical line with specific Longitude value in Geodetic coordinate system
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLongitudeLine.Longitude">
            <summary> 
            Gets or sets the Longitude: location of a place on Earth 
            East (+) or West (-) of the prime meridian (Greenwich, in England), Range -180 to 180 </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoLatitudeLine">
            <summary>
            GeoLatitudeLine is a horizontal line with specific Longitude value in Geodetic coordinate system
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLatitudeLine.Latitude">
            <summary> 
            Gets or sets the Latitude: location of a place on Earth 
            North (+) or South (-) of the equator, Range -90 to 90 </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoDistance">
            <summary>
            Represents distance in geographic context and provides conversion between kilometers, miles, and degrees
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoDistance.Kilometers">
            <summary>
            Gets or sets the distance in kilometers
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoDistance.Miles">
            <summary>
            Gets or sets the distance in nautical miles 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoDistance.Degrees">
            <summary>
            Gets or sets the distance in geographic degrees 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.Radius">
            <summary>
            Earth's mean radius in kilometers
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.RadiusPolar">
            <summary>
            Earth's polar radius in kilometers
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.RadiusEquatorial">
            <summary>
            Earth's equatorial radius in kilometers  
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.CircumferenceEquatorial">
            <summary>
            Earth's equatorial circumference in kilometers  
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.CircumferencePolar">
            <summary>
            Earth's equatorial circumference in kilometers  
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.Circumference">
            <summary>
            Earth's mean circumference in kilometers  
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Earths.CircumferenceOneDegree">
            <summary>
            Earth's one degree of mean circumference in kilometers  
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoGlobal.Worlds">
            <summary>
            World's actual geographic constants
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Worlds.ActualWidth">
            <summary>
            World's actual width in geographic degrees
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Worlds.ActualHeight">
            <summary>
            World's actual height in geographic degrees
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Worlds.ActualRegion">
            <summary>
            World's actual region in geographic degrees
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoGlobal.WorldsMercator">
            <summary>
            Map geographic constants in the Spherical Mercator projection
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.WorldsMercator.MapWidth">
            <summary>
            World's width in geographic degrees on Spherical Mercator projection 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.WorldsMercator.MapHeight">
            <summary>
            World's height in geographic degrees on Spherical Mercator projection 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.WorldsMercator.MapRegion">
            <summary>
            World's region in geographic degrees on Spherical Mercator projection 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Converters.KilometersToMiles">
            <summary>
            converter factor for kilometers to nautical miles 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Converters.MilesToKilometers">
            <summary>
            converter factor for nautical miles to kilometers 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Converters.DegreesToKilometers">
            <summary>
            converter factor for geographic degrees to kilometers 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.Converters.KilometersToDegrees">
            <summary>
            converter factor for kilometers to geographic degrees 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.AirplaneAverageSpeed">
            <summary>
            Airplane average speed in km per hour, based on Boeing-747
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoGlobal.AirplaneAverageRange">
            <summary>
            Airplane average speed in km per hour, based on Boeing-747
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoLocation">
            <summary>
            Represents a location in geographic coordinate system and provides methods for converting between different objects.
            <remarks>This is an ObservableModel object and all properties provide PropertyChanged notification </remarks>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.Min(IGExtensions.Common.Models.GeoLocation,IGExtensions.Common.Models.GeoLocation)">
            <summary>
            Calculates minimum geographic location from two geographic location
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.Max(IGExtensions.Common.Models.GeoLocation,IGExtensions.Common.Models.GeoLocation)">
            <summary>
            Calculates maximum geographic location from two geographic location
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.IsSameLocation(IGExtensions.Common.Models.GeoLocation)">
            <summary>Compares the location has the same Longitude and Latitude values with specified location </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.IsSameLocation(System.Windows.Point)">
            <summary>Compares the location has the same Longitude and Latitude values with specified geographic point </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.IsWithin(System.Windows.Rect)">
            <summary>Checks if the location is within specified region</summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLocation.Latitude">
            <summary> 
            Gets or sets the Latitude: location of a place on Earth 
            North (+) or South (-) of the equator, Range -90 to 90 </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLocation.Longitude">
            <summary> 
            Gets or sets the Longitude: location of a place on Earth 
            East (+) or West (-) of the prime meridian (Greenwich, in England), Range -180 to 180 </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLocation.Name">
            <summary>
            Gets or sets name for the GeoLocation
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLocation.Description">
            <summary>
            Gets or sets description for the GeoLocation
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoLocation.Address">
            <summary> 
            Gets or sets an address in the format: 
            Street Name, City, State/ZipCode, Country (Optional) </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.ToPoint">
            <summary> 
            Converts this <see cref="T:IGExtensions.Common.Models.GeoLocation"/> object to a <see cref="T:System.Windows.Point"/> where 
            Point.X is Longitude and Point.Y is Latitude
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.FromPoint(System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point"/> to a <see cref="T:IGExtensions.Common.Models.GeoLocation"/> object where 
            Point.X is Longitude and Point.Y is Latitude
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.op_Addition(IGExtensions.Common.Models.GeoLocation,IGExtensions.Common.Models.GeoLocation)">
            <summary>
            Add Longitude and Latitude values of left-hand-side and right-hand-side GeoLocation objects
            </summary>
            <param name="left"> left-hand-side GeoLocation </param>
            <param name="right"> right-hand-side GeoLocation </param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoLocation.op_Subtraction(IGExtensions.Common.Models.GeoLocation,IGExtensions.Common.Models.GeoLocation)">
            <summary>
            Subtract Longitude and Latitude values of left-hand-side and right-hand-side GeoLocation objects
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoPath">
            <summary>
            Represents a geographic path two geographic locations with computation method
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPath.ComputePath">
            <summary>
            Computes geographic path between <see cref="P:IGExtensions.Common.Models.GeoPath.Origin"/> and <see cref="P:IGExtensions.Common.Models.GeoPath.Destination"/> locations
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.BearingInitial">
            <summary>
            Gets or sets BearingInitial property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.BearingFinal">
            <summary>
            Gets or sets BearingFinal property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Destination">
            <summary>
            Gets or sets Destination location of the geographic path
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Origin">
            <summary>
            Gets or sets Origin location of the geographic path
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Resolution">
            <summary>
            Gets or sets Resolution property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Distance">
            <summary>
            Gets or sets Distance property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Points">
            <summary>
            Gets list of <see cref="T:System.Windows.Point"/>s in the geographic path
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoPath.Locations">
            <summary>
            Gets list of <see cref="T:IGExtensions.Common.Models.GeoPoint"/>s in the geographic path
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoPoint">
            <summary>
            Represents a point in geographic coordinate system and provides methods for converting between different objects.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPoint.Min(IGExtensions.Common.Models.GeoPoint)">
            <summary>
            Calculates minimum geographic point from two geographic point
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPoint.Max(IGExtensions.Common.Models.GeoPoint)">
            <summary>
            Calculates maximum geographic point from two geographic point
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPoint.IsWithin(System.Windows.Rect)">
            <summary>Checks if the location is within specified region</summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPoint.ToPoint">
            <summary> 
            Converts this <see cref="T:IGExtensions.Common.Models.GeoPoint"/> object to a <see cref="T:System.Windows.Point"/> where 
            Point.X is Longitude and Point.Y is Latitude
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoPoint.FromPoint(System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point"/> to a <see cref="T:IGExtensions.Common.Models.GeoPoint"/> object where 
            Point.X is Longitude and Point.Y is Latitude
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoVector.op_Addition(IGExtensions.Common.Models.GeoVector,IGExtensions.Common.Models.GeoVector)">
            <summary>
            Addition
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoVector.op_Subtraction(IGExtensions.Common.Models.GeoVector,IGExtensions.Common.Models.GeoVector)">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoVector.op_Multiply(IGExtensions.Common.Models.GeoVector,System.Double)">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoVector.op_Multiply(System.Double,IGExtensions.Common.Models.GeoVector)">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoVector.op_Division(IGExtensions.Common.Models.GeoVector,System.Double)">
            <summary>
            Division
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoVector.Angle">
            <summary>
            Gets Angle between this vector and <see cref="F:IGExtensions.Common.Models.GeoVector.EastVector"/>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoVector.Vector">
            <summary>
            Gets Vector property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoVector.Longitude">
            <summary>
            Gets or sets Longitude property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoVector.Latitude">
            <summary>
            Gets or sets Latitude property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoVector.Length">
            <summary>
            Gets Length property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRect.West">
            <summary>
            Gets or sets West property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRect.East">
            <summary>
            Gets or sets East property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRect.South">
            <summary>
            Gets or sets South property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRect.North">
            <summary>
            Gets or sets North property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRect.Center">
            <summary>
            Gets or sets Center property 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoRegion">
            <summary>
            Represents a region in geographic coordinate system and provides methods for converting between different objects
            <remarks>This is an observable model that implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface</remarks>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a GeoRegion from south-west geo-location and north-east geo-location 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(IGExtensions.Common.Models.GeoLocation,IGExtensions.Common.Models.GeoLocation)">
            <summary>
            Creates a GeoRegion from south-west geo-location and north-east geo-location 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(IGExtensions.Common.Models.GeoLocation,System.Double,System.Double)">
            <summary>
            Creates a GeoRegion from geo-location (center of region) and geo-dimension (height and width of region)
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(IGExtensions.Common.Models.GeoLocation,System.Double)">
            <summary>
            Creates a GeoRegion from geo-location (center of region) and geo-dimension (height and width of region)
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a GeoRegion from geographic west, south, height, and width values
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Creates a GeoRegion from geo-location (south-west) and geo-dimension (height and width)
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.#ctor(System.Windows.Point,System.Double)">
            <summary>
            Creates a GeoRegion from geo-location (south-west) and geo-dimension (height and width)
            </summary>
            <param name="origin"></param>
            <param name="dimension"></param>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRegion.Origin">
            <summary>
            Gets or Sets the top-left corner (Origin) of GeoRegion
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRegion.Ending">
            <summary>
            Gets or Sets the bottom-right corner (Ending) of GeoRegion
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoRegion.Center">
            <summary>
            Gets or Sets the center of GeoRegion
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.ToRect">
            <summary>
            Convert GeoRegion to Rect object
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.ToPoints">
            <summary>
            Converts shape of <see cref="T:System.Windows.Rect"/> to a List of <see cref="T:System.Windows.Point"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.ToShapePoints">
            <summary>
            Converts shape of <see cref="T:System.Windows.Rect"/> to a List of List of <see cref="T:System.Windows.Point"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegion.ToGeoRect">
            <summary>
            Converts to Geographic Rect where bottom-left of the rectangle is southEast and top-right is northWest coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoRegions.FindGeoRegion(System.String)">
            <summary>
            Finds a geo-region in the list of known geo-regions or returns geo-region of the world
            <remarks> </remarks>
            </summary>
            <param name="regionIdentifier"></param>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldFullRegion">
            <summary>
            GeoRegion of the whole world
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldSphericalMercatorRegion">
            <summary>
            GeoRegion of the whole world
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldNonPolarRegion">
            <summary>
            GeoRegion of the world without polar regions
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldNonAntarcticRegion">
            <summary>
            GeoRegion of the world without Antarctic continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldSixMainContinents">
            <summary>
            GeoRegion of the world with six main continents
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.WorldSevenContinents">
            <summary>
            GeoRegion of the world with seven continents
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.NorthAmericaRegion">
            <summary>
            GeoRegion of the world with North America continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.SouthAmericaRegion">
            <summary>
            GeoRegion of the world with South America continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.AfricaRegion">
            <summary>
            GeoRegion of the world with Africa continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.EuropeRegion">
            <summary>
            GeoRegion of the world with Europe continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.AsiaRegion">
            <summary>
            GeoRegion of the world with Asia continent 
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.OceaniaRegion">
            <summary>
            GeoRegion of the world with Oceania continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.AustraliaRegion">
            <summary>
            GeoRegion of the world with Australia continent
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.UnitedStatesRegion">
            <summary>
            GeoRegion of the world with United States
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.UnitedStatesLower48Region">
            <summary>
            GeoRegion of the world with United States (lower 48 states)
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoRegions.IndiaRegion">
            <summary>
            GeoRegion of the world with United States (lower 48 states)
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.ShapePoints">
            <summary>
            Represents single shape built from a list of <see cref="T:System.Windows.Point"/>s
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.ShapesList">
            <summary>
            Represents a list of shapes built from <see cref="T:IGExtensions.Common.Models.ShapePoints"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ShapesList.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for provided property name
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoShapePoints">
            <summary>
            Represents single geographic shape built from a list of <see cref="T:IGExtensions.Common.Models.GeoPoint"/>s
            <para>This is an observable model and it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface on all its properties</para>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapePoints.ShapeArea">
            <summary>
            Gets Area of the shape points  
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapePoints.IsShapeValid">
            <summary>
            Gets or sets IsShapeValid property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapePoints.ShapeRect">
            <summary>
            Gets bounding Rect of the shape points 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapePoints.ShapeCenter">
            <summary>
            Gets center of the shape points 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapePoints.ShapePoints">
            <summary>
            Gets or sets Points of the shape 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapePoints.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for provided property name
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoShapesList">
            <summary>
            Represents a list of geographic shapes built from <see cref="T:IGExtensions.Common.Models.GeoShapePoints"/>
            <para>This is an observable model and it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface on all its properties</para>
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapesList.ShapePoints">
            <summary>
            Gets or sets Points of the shape 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapesList.ShapeArea">
            <summary>
            Gets Area of the shape points  
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapesList.ShapeRect">
            <summary>
            Gets bounding Rect of the shape points 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoShapesList.ShapeCenter">
            <summary>
            Gets center of the shape points 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesList.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for provided property name
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoShapesListEx">
            <summary>
            Provides extension methods for working with a list of <see cref="T:System.Windows.Point"/>s and a list of lists of <see cref="T:System.Windows.Point"/>s/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.GetShapeArea(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Calculates approx. shape area of all elements of shapes
             </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.GetShapeArea(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Calculates approx. shape area of the shape
             </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.GetSmallestShape(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Finds the smallest list of shape points from all elements of shapes
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.GetBiggestShape(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Finds the biggest list of shape points from all elements of shapes
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.ToShapeRect(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Converts list of points to shape bounding rect
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoShapesListEx.ToShapeRect(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Converts shape points to shape bounding rect
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.CylindricalEqualArea">
            <summary>
            The normal aspect cylindrical equal area projection.
            </summary>
            <remarks>
            The cylindrical equal area projection was proposed by Johann Heinrich Lambert
            and is occasionally given his name. 
            <para>
            Like other regular cylindrical, the graticule of the normal Cylindrical Equal
            Area projection consists of straight equally spaced vertical meridians perpendicular
            to straight unequally spaced horizontal parallels.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.CylindricalEqualArea.StandardParallel">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.CylindricalEqualArea.StandardParallelProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.CylindricalEqualArea.StandardParallel"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CylindricalEqualArea.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.CylindricalEqualArea.LongitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.CylindricalEqualArea.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEqualArea.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEqualArea.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEqualArea.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.CylindricalEquidistant">
            <summary>
            Represents a cylindrical equidistance projection.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CylindricalEquidistant.Radius">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.CylindricalEquidistant.RadiusProperty">
            <summary>
            The radius dependency property
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CylindricalEquidistant.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.CylindricalEquidistant.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.CylindricalEquidistant.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.CylindricalEquidistant.StandardParallel">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.CylindricalEquidistant.StandardParallelProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.CylindricalEquidistant.StandardParallel"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEquidistant.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEquidistant.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.CylindricalEquidistant.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoEllipsoid">
            <summary>
            Represents a geographic Ellipsoid shape
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoid.#ctor(IGExtensions.Common.Models.GeoEllipsoidType)">
            <summary>
            Initializes a new geographic Ellipsoid from the specified type of geographic Ellipsoid
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoid.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new geographic Ellipsoid with the specified a and f parameters.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoEllipsoid.A">
            <summary>
            Gets the a parameter for the geographic Ellipsoid.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoEllipsoid.F">
            <summary>
            Gets the f parameter for the geographic Ellipsoid.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoEllipsoid.E2">
            <summary>
            Gets the e squared parameter for the geographic Ellipsoid.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoEllipsoid.Ep2">
            <summary>
            Gets the e prime squared parameter for the geographic Ellipsoid.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoEllipsoidType">
            <summary>
            Standard GeoEllipsoids.
            </summary>
            <remarks>
            For many maps, including nearly all maps in commercial atlases, it may be
            assumed that the Earth is a sphere. Actually, it is more nearly an oblate GeoEllipsoid
            of revolution, also called an oblate shperoid. This is an ellipse rotated about its
            shorter axis. The flattening of the ellipse for the Earth is only about one part in
            three hundred; but it is sufficient to become a necessary part of calculations in
            plotting accurate maps at a scale of 1:100 000 or larger, and is significant even for
            1:5 000 000-scale maps of the United States, affecting plotted shapes by up to
            2/3 percent. On small-scale maps, including single-sheet worldRect maps, the oblateness
            is negligble.
            <para>
            The Earth is not an exact GeoEllipsoid, and deviations from this shape are continuously
            evaluated. The geoid is the name given to the shape that the Earth would
            assume if it were measured at mean sea-level. This is an undulating surface 
            that varies not more than about a hundred metres above or below a well-fitting
            GeoEllipsoid, a variation far less than the GeoEllipsoid varies from the sphere. It is
            important to remember that elevations and contour lines on the Earth are reported
            relative to the geoid, not the GeoEllipsoid. Latitude, Longitude and all plane
            coordinate systems, on the other hand, are determined with respect to the GeoEllipsoid. 
            </para>
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.GRS1980">
            <summary>
            The GRS80 map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.NAD83">
            <summary>
            The NAD 83 map datum
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.WGS72">
            <summary>
            The WGS 72 map datum.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.WGS84">
            <summary>
            The WGS 84 map datum.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Australian">
            <summary>
            The Australian national map datum.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Krassovsky">
            <summary>
            The Krassovsky map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.International">
            <summary>
            The International map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Hayford">
            <summary>
            The Hayford map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Clarke1880">
            <summary>
            The Clark 1880 map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Clarke1866">
            <summary>
            The Clark 1866 map datum.
            </summary> 
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Airy">
            <summary>
            The Airy map datum
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Bessel1841">
            <summary>
            The Bessel 1841 map datum.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoEllipsoidType.Everest">
            <summary>
            The Everest map datum.
            </summary> 
        </member>
        <member name="T:IGExtensions.Common.Models.GeoEllipsoidUtil">
            <summary>
            Static utility class for map geographic Ellipsoid definitions.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoidUtil.A(IGExtensions.Common.Models.GeoEllipsoidType)">
            <summary>
            As the specified geographic Ellipsoid type.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoidUtil.F(IGExtensions.Common.Models.GeoEllipsoidType)">
            <summary>
            F of the geographic Ellipsoid.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoidUtil.E2(IGExtensions.Common.Models.GeoEllipsoidType)">
            <summary>
            E2 of the geographic Ellipsoid.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoEllipsoidUtil.Ep2(IGExtensions.Common.Models.GeoEllipsoidType)">
            <summary>
            Ep2 of the geographic Ellipsoid.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoProjection">
            <summary>
            Projection objects define the full public API for projecting
            geodetic map coordinates to/from Cartesian the internal coordinate
            system
            </summary>
            <remarks>
            The general purpose of map projections and the problems encountered
            have been discusses often and well in various books on cartography
            and map projections. Every map user and maker should have a basic
            understanding of projections, no matter how much computers seem
            to have automated the operations.
            <para>
            A map projection is a systematic representation of all or part of the
            surface of a round body, especially the Earth, on a plane. This usually
            includes delineating meridians and parallels, as required by some definitions
            of a map projection, but it may not, depending on the the purpose of the
            map. A projection is required in any case. Since this cannot be done without
            distortion, the cartographer must choose the characteristic which is to
            be shown accurately at the expense of others, or a compromise of several
            characteristics. If the map covers a continent or the Earth, distortion
            will be visually apparent. If the region is the size of a small town,
            distortion may be barely measurable using many projections, but it can
            still be serious with other projections. There is literally an infinite
            number of projections that can be devised, and several hundred have been
            published, most of which are rarely-used novelties. Most projections
            may be infinitely varied by choosing different points on Earth as the
            center or as a starting point.
            </para>
            <para>
            It cannot be said that there is one "best" projection for mapping. It is
            even risky to claim that one has found the best projection for a given
            application, unless the parameters chosen are artificially constricting.
            A carefully constructed globe is not the best map for most applications 
            because its scale is by necessity too small. A globe is awkward to use
            in general, and a straight edge cannot be satisfactorily used on one for
            measurement of distance.
            </para>
            <para>
            To identify the location points on the Earth, a graticule or network of
            longitude and latitude lines has been superimposed on the surface. They 
            are commonly referred to as meridians and parallels respectively.
            </para>
            <para>
            Given the North and South poles, which are approximately the ends of the 
            axis about which the Earth rotates, and the Equator, an imaginary line
            halfway between the two poles, the parallels of latitude are formed
            by circles surrounding the Earth and in planes parallel with that of 
            the equator. If the circles are drawn equally spaced along the surface
            of the sphere, with 90 spaces from the equator to 90 degrees North and South
            at the respective poles, each is called a degree of latitude.
            </para>
            <para>
            Meridians of longitude are formed with a series of imaginary lines, all 
            intersecting at both the North and South poles, and crossing each
            parallel of latitude at right angles but striking the equator at various 
            points.
            </para>
            <para>
            There is only one location for the equator and poles which serve as references
            for counting degrees of latitude, but there is no natural origin from which
            to count degrees of longitude, since all meridians are identical in shape and
            size. It thus becomes necessary to choose arbitrarily one meridian as the
            starting point, or prime meridian. In 1884, the International Meridian 
            Conference, meeting in Washington, agreed to adopt the "meridian passing through
            the center of the transit instrument at the Observatory of Greenwich as the
            initial meridian for longitude" resolving that "from this meridian longitude
            shall be counted in two directions up to 180 degrees, east longitude being
            plus and west longitude being minus"
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.GeoProjection.EllipsoidType">
            <summary>
            Sets or gets the current projections's datum
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjection.EllipsoidTypeProperty">
            <summary>
            Identifies the GeoEllipsoidType dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.UpdateConstants(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the constants.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian coordinate system
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToCartesian(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Projects a list of geodetic points to Cartesian coordinate system
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToCartesian(System.Collections.Generic.IList{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Projects a list of list of geodetic to Cartesian coordinate system
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic coordinate system  
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToGeographic(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Projects a list of Cartesian points to geodetic coordinate system  
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ProjectToGeographic(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Projects a list of list of Cartesian points to geodetic coordinate system  c.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian coordinate system  
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjection.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic coordinate system  
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoProjector">
            <summary>
            Represents a geographic projector for projecting points between geodetic and Cartesian coordinate systems
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToCartesian(System.Windows.Point,IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToCartesian(System.Collections.Generic.List{System.Windows.Point},IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a list of list of geodetic points to Cartesian points
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToCartesian(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a list of list of geodetic points to Cartesian points
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToGeographic(System.Windows.Point,IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToGeographic(System.Collections.Generic.List{System.Windows.Point},IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a list of Cartesian points to geodetic points
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToGeographic(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a list of list of Cartesian points to geodetic points
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.ProjectToGeographic(IGExtensions.Common.Models.IGeoLocatable,IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.GeoProjector.Projection(IGExtensions.Common.Models.GeoProjectionType)">
            <summary>
            Projections the specified projection type.
            </summary>
            <param name="projectionType">Type of geographic projection</param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Common.Models.GeoProjectionType">
            <summary>
            Defines a projection type used by coordinate systems to convert geodetic to Cartesian coordinates.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.SphericalMercator">
            <summary>
            SphericalMercator projection.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Mercator">
            <summary>
            Mercator projection.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.ObliqueMercator">
            <summary>
            Oblique Mercator projection.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Lambert">
            <summary>
            Lambert Cylindrical Equal Area
            </summary>
            <remarks>
            The Lambert cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of thirty degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Behrmann">
            <summary>
            Behrmann Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Behrmann cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of thirty degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.TristanEdwards">
            <summary>
            Tristan Edwards Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 37.383 degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Peters">
            <summary>
            Peters Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 44.138 degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.GallOrthographic">
            <summary>
            Gall Orthographic Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 45 degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Balthasart">
            <summary>
            Balthasart Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Balthasart cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 50 degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.MillerCylindrical">
            <summary>
            Miller cylindrical projection.
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Equirectangular">
            <summary>
            Equirectangular Projection
            </summary>
            <remarks>
            An equirectangular mapProjection is a cylindrical equidistant mapProjection,
            also called a rectangular mapProjection, plane chart, plate carre, or
            projected from map, in which the horizontal coordinate is the longitude
            and the vertical coordinate is the latitude, so the standard parallel
            is taken as zero degrees. 
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Miller37">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 37.5 degrees
            </summary>
            <remarks>
            Miller cylindrical equidistant mapProjection with a standard
            parallel of 37.5 degrees gives minimal overall scale distortion.
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Miller43">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 45.0 degrees
            </summary>
            <remarks>
            Miller cylindrical equidistant mapProjection with a standard
            parallel of 45.0 degrees gives scale distortion over continents.
            </remarks>
        </member>
        <member name="F:IGExtensions.Common.Models.GeoProjectionType.Miller50">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 50.0 degrees
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.LambertConformalConic">
            <summary>
            
            </summary>
            <remarks>
            The Lambert Conformal Conic projection is used for the 1:1 000 000-scale regional
            worldRect aeronautical charts, the 1:500 000-scale sectional aeronautical charts and
            1:500 000-scale State base maps (all 48 contiguous states have the same
            standard parallels of lat. 33 and 45N, and thus match). Also cast on the Lambert
            are most of the 1:24 000-scale 5.7 minute quadrangle maps prepared after 1957
            which lie in zones for which the Lambert is the base for the SPCS. In the latter
            case,  the standard parallels for the zone are used, rather than the parameters
            designed for the individual quadrangles.
            <para>
            The Lambert Conformal Conic has also been adopted as the official topographic
            representation for some other countries.
            </para>
            <para>
            The pole in the same hemisphere as the standard parallels is shown on the 
            Lambert conformal conic as a point, the pole in the other hemisphere is 
            at infinity. Straight lines between points approximate great circle
            arcs for maps of moderate coverage.
            </para>
            <para>
            In some atlases, partiularly British, the Lambert Conformal Conic is called the 
            "Conical Orthomorophic" projection.
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.LambertConformalConic.StandardParallelNorth">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.LambertConformalConic.StandardParallelNorthProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.LambertConformalConic.StandardParallelNorth"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.LambertConformalConic.StandardParallelSouth">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.LambertConformalConic.StandardParallelSouthProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.LambertConformalConic.StandardParallelSouth"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.LambertConformalConic.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.LambertConformalConic.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.LambertConformalConic.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.LambertConformalConic.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.LambertConformalConic.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="F:IGExtensions.Common.Models.LambertConformalConic.CentralMeridianProperty"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.LambertConformalConic.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.LambertConformalConic.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.LambertConformalConic.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.Mercator">
            <remarks>
            The well-known Mercator projection was perhaps the first projection to be
            regularly identified when atlases of over a century ago gradually began to
            name projections used, a practice now fairly commonplace.
            <para>
            The meridians of longitude of the Mercator projection are vertical parallel
            equally spaced lines, cut at right angles by horizontal straight parallels
            which are increasingly spaced at each pole so that conformality exists.
            </para>
            <para>
            The major navigational feature of the projection is found in the facts that a
            sailing route between two points is shown as a straight line, if the direction or
            azimuth of the ship remains constant with respect to north. This kind of route
            is called a loxodrome or Rhumb line and is usually longer than the great circle
            path. 
            </para>
            <para>
            This projection has been standard since 1910 for nautical charts prepared by the
            former U.S. Coast and Geodetic Survey.
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse spherical and ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.Mercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.Mercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.Mercator.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.Mercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.Mercator.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.Mercator.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.MillerCylindrical">
            <summary>
            Represents a miller cylindrical projection.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.MillerCylindrical.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.MillerCylindrical.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.MillerCylindrical.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.MillerCylindrical.Radius">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.MillerCylindrical.RadiusProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.MillerCylindrical.Radius"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.MillerCylindrical.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.MillerCylindrical.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.MillerCylindrical.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.ModifiedTransverseMercator">
            <summary>
            
            </summary>
            <remarks>
            In 1972, the USGS devised a projection specifically for the revision of a 1954
            map of Alaska which, like its predecessors, was based on the Polyconic projection.
            It resembles the Transverse Mercator in a very limited manner and cannot
            be considered a cylindrical projection.
            <para>
            For transferring data to and from Alaska maps, it was necessary to determine
            projection formulas for computer programming. Since it appeared to be 
            unnecessarily complicated to derive formulas based on the correct construction,
            it was decided to test empirical formulas with actual coordinates. After
            various trial values for scale and standard parallels were tested, the empirical
            formulas used in this class were obtained. These agree with measured values
            within 0.005 inch at mapping scale for 44 out of 58 measurements made on the map
            and within 0.01 inch for 54 of them.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.ModifiedTransverseMercator.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ModifiedTransverseMercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ModifiedTransverseMercator.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.ModifiedTransverseMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ModifiedTransverseMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ModifiedTransverseMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.ModifiedTransverseMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ModifiedTransverseMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ModifiedTransverseMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ModifiedTransverseMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ModifiedTransverseMercator.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ModifiedTransverseMercator.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.ObliqueMercator">
            <summary>
            The Hotine Oblique Mercator Projection
            </summary>
            <remarks>
            There are several geographical regions such as the Alaska panhandle
            centered along lines which are neither parallels nor meridians, but 
            which may be taken as great circle routes passing through the region.
            If conformality is desired in such regions, the Oblique Mercator is
            a projection which should be considered.
            <para>
            The Oblique Mercator projection is used in the spherical form for
            a few atlas maps. In the ellipsoid form it was used for Switzerland
            and Madagascar as well as Malaya and Borneo and Italy. It is used
            in the Hotine form by the USGS for grid marks on the panhandle of
            Alaska as well as by the US Lake Survey for mapping of the five
            great lakes, the St Lawrence River, and the US-Canada border lakes.
            </para>
            <para>
            Until the implementation of Space Oblique Mercator, the Hotine Oblique
            Mercator was probably the most suitable projection available for
            mapping Landsat type data.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.ObliqueMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ObliqueMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ObliqueMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.ObliqueMercator.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's longitude origin
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ObliqueMercator.LongitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ObliqueMercator.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.ObliqueMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ObliqueMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ObliqueMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.ObliqueMercator.Azimuth">
            <summary>
            Sets or gets the current projections's azimuth
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.ObliqueMercator.AzimuthProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.ObliqueMercator.Azimuth"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ObliqueMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ObliqueMercator.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ObliqueMercator.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.SphericalMercator">
            <summary>
            Represents a Spherical Mercator projection.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.SphericalMercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.SphericalMercator.CentralMeridianProperty">
            <summary>
            Central meridian property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.SphericalMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.SphericalMercator.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.SphericalMercator.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.TransverseMercator">
            <remarks>
            Since the Mercator projection has little error close to the Equator, it has
            been found very useful in the transverse form, with the equator of the projection
            rotated 90 degrees to coincide with the desired central meridian.
            <para>
            The formulas are for the complete ellipsoid are practical only within
            a band between four degrees of longitude and some ten to fifteen degrees
            of arc distance on either side of the central meridian, because of the
            much more significant scale errors fundamental to any projection covering
            a larger area.
            </para>
            <para>
            Little use has been made of the Transverse Mercator for single maps of
            continental areas. 
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Common.Models.TransverseMercator.Zone">
            <summary>
            Sets or gets the current projections's datum
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.TransverseMercator.ZoneProperty">
            <summary>
            Identifies the UTMZone dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.TransverseMercator.ZoneChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Zones the changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:IGExtensions.Common.Models.TransverseMercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.TransverseMercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.TransverseMercator.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.TransverseMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.TransverseMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.TransverseMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.TransverseMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:IGExtensions.Common.Models.TransverseMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Common.Models.TransverseMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.TransverseMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.TransverseMercator.ConvertToCartesian(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.TransverseMercator.ConvertToGeographic(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic point 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.TransverseMercator.Test">
            <summary>
            Tests this instance.
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.TransverseZone">
            <summary>
            Specifies a universal transverse Mercator zone.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.Destination">
            <summary>
            Gets or sets Destination location of the geographic path
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.Origin">
            <summary>
            Gets or sets Origin location of the geographic path
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.FlightPath">
            <summary>
            Gets Flight's Path property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.FlightLocation">
            <summary>
            Gets FlightLocation property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.Latitude">
            <summary>
            Gets Flight's Latitude property   
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.Longitude">
            <summary>
            Gets Flight's Longitude property  
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.FlightBearing">
            <summary>
            Gets Flight's Bearing from true North
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.FlightAngle">
            <summary>
            Gets Flight's Angle property offset by 270 degrees
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.AirlineFlight.FlightDistance">
            <summary>
            Gets Flight's Distance property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Airport.Connections">
            <summary>
            Gets or sets all Connections between this and other Airport
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.Continent">
            <summary>
            Data model of Continent business object.
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.Continent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Models.Continent"/> class.
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Continent.Name">
            <summary>
            Gets or sets the name of the continent.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IGExtensions.Common.Models.Continent.Poligons">
            <summary>
            Gets or sets the poligons(continent can contais more nhan one poligon).
            </summary>
            <value>The poligons.</value>
        </member>
        <member name="T:IGExtensions.Common.Models.ContinentsList">
            <summary>
            Data model for all the continents
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.ContinentsList.Load2(System.String)">
            <summary>
            Load Continents from xml file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Common.Models.ContinentsList.FindRegion(System.Windows.Point)">
            <summary>
            Check what is the region of point.
            </summary>
            <param name="point">The point.</param>
            <returns>Name of the continent where is the point</returns>
        </member>
        <member name="M:IGExtensions.Common.Models.ContinentsList.PointInPolygon(System.Collections.Generic.List{IGExtensions.Common.Models.Coordinates},System.Windows.Point)">
            <summary>
            Check if point is in polygon.
            </summary>
            <param name="poligon">The polygon.</param>
            <param name="point">The point.</param>
            <returns>True if point is in polygon, otherwise false.</returns>
        </member>
        <member name="T:IGExtensions.Common.Models.Coordinates">
            <summary>
            Coordinates in Geographical system
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Coordinates.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:IGExtensions.Common.Models.Coordinates.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="M:IGExtensions.Common.Models.EarthQuakeData.#ctor(System.String,System.String,System.DateTime,System.Uri,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IGExtensions.Common.Models.EarthQuakeData"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="title">The title.</param>
            <param name="updated">The updated.</param>
            <param name="link">The link.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="depth">The depth.</param>
            <param name="magnitude">The magnitude.</param>
        </member>
        <member name="P:IGExtensions.Common.Models.EarthQuakeData.Depth">
            <summary>
            Gets or sets Depth property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.EarthQuakeData.Magnitude">
            <summary>
            Gets or sets Magnitude property 
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.EarthQuakeData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:IGExtensions.Common.Models.EarthQuakeData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:IGExtensions.Common.Models.WeatherStation">
            <summary>
            Represents weather conditions in a geographic location (GeoLocation)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.WeatherStation.IsValid">
            <summary>
             Gets whether station has valid weather data 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.WeatherStation.Weather">
            <summary>
            Gets or sets Weather property 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.WeatherStation.StationCode">
            <summary>
            Gets or sets station code; e.g. ICAO code 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.WeatherGenerator">
            <summary>
            Represents a generator of weather conditions 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.Weather">
            <summary>
            Represents weather pattern
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.DateTime">
            <summary>
            Gets or sets DateTime (UTC) of the last weather update
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WindPattern">
            <summary>
            Gets or sets Wind Pattern
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WindSpeed">
            <summary>
            Gets or sets Wind Speed (in MPH)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WindSpeedMax">
            <summary>
            Gets or sets Wind Speed maximum (in MPH)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WindDirection">
            <summary>
            Gets or sets Wind Direction (in degrees) from true North
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Windchill">
            <summary>
            Gets or sets Wind Chill
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Visibility">
            <summary>
            Gets or sets weather Visibility in miles
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Humidity">
            <summary>
            Gets or sets weather Humidity in percentage
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.SkyConditions">
            <summary>
            Gets or sets Sky Conditions over the airport
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WeatherPattern">
            <summary>
            Gets or sets weather Pattern over the airport
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.WeatherCondition">
            <summary>
            Gets or sets weather Pattern over the airport
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Precipitation">
            <summary>
            Gets or sets Precipitation (in inches) over last hour 
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Temperature">
            <summary>
            Gets or sets Temperature (in Celsius)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.DewPoint">
            <summary>
            Gets or sets Dew Point (in Celsius)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.PressureAltimeter">
            <summary>
            Gets or sets Altimeter Pressure (in hPa)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.PressureTendency">
            <summary>
            Gets or sets Pressure Tendency (in hPa)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Observations">
            <summary>
            Gets or sets Observations in NOAA coded format
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Cycle">
            <summary>
            Gets or sets Cycle
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.Weather.Data">
            <summary>
            Gets or sets raw weather data in NOAA decoded format
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.WeatherCondition">
            <summary>
            Specifies weather conditions 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.WorldCity">
            <summary>
            Represents an world city model in geographic context (GeoLocation)
            </summary>
        </member>
        <member name="P:IGExtensions.Common.Models.WorldCity.Population">
            <summary>
            Gets or sets Population property 
            </summary>
        </member>
        <member name="T:IGExtensions.Common.Models.WorldCountry">
            <summary>
            Represents a country in the world and provides its shape as <see cref="T:IGExtensions.Common.Models.GeoShapesList"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Common.Models.WorldCountry.UpdateWith(IGExtensions.Common.Models.WorldCountry)">
            <summary>
            Updates this CountryDataModel with values from passed CountryDataModel
            </summary>
            <param name="newCountry"></param>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.AddRange(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary>Adds a list of Brush to the current BrushCollection</summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.AddRange(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.SolidColorBrush})">
            <summary>Adds a list of SolidColorBrush to the current BrushCollection</summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.AddRange(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.LinearGradientBrush})">
            <summary>Adds a list of LinearGradientBrush to the current BrushCollection</summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.AddRange(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary>Adds a list of Color as SolidColorBrush to the current BrushCollection</summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.AddRange(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.NamedColor})">
            <summary>Adds a list of NamedColor as SolidColorBrush to the current BrushCollection</summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.FromBrushes(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary>Creates BrushCollection from a list of Brushes </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.FromBrushes(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.SolidColorBrush})">
            <summary>Creates BrushCollection from a list of SolidColorBrush </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.FromBrushes(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.LinearGradientBrush})">
            <summary>Creates BrushCollection from a list of LinearGradientBrush </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.FromColors(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary>Creates BrushCollection from a list of Brushes </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.FromColors(Infragistics.BrushCollection,System.Collections.Generic.List{System.Windows.Media.NamedColor})">
            <summary>Creates BrushCollection from a list of Brushes </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.ToGradientBrush(Infragistics.BrushCollection)">
            <summary>Converts brushes in BrushCollection to LinearGradientBrush </summary>
        </member>
        <member name="M:Infragistics.BrushCollectionEx.Blend(Infragistics.BrushCollection)">
            <summary>Blends brushes in BrushCollection to SolidColorBrush </summary>
        </member>
        <member name="M:System.Windows.Media.BrushListEx.ToBrushCollection(System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary>Converts a list of Color to BrushCollection </summary>
        </member>
        <member name="M:System.Windows.Media.BrushListEx.ToBrushCollection(System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary>Converts a list of Color to BrushCollection </summary>
        </member>
        <member name="M:System.Windows.Media.BrushListEx.ToBrushCollection(System.Collections.Generic.List{System.Windows.Media.SolidColorBrush})">
            <summary>Converts a list of SolidColorBrush to BrushCollection </summary>
        </member>
        <member name="M:System.Windows.Media.BrushListEx.ToBrushCollection(System.Collections.Generic.List{System.Windows.Media.LinearGradientBrush})">
            <summary>Converts a list of LinearGradientBrush to BrushCollection </summary>
        </member>
        <member name="M:System.Windows.Media.BrushListEx.ToBrushCollection(System.Collections.Generic.List{System.Windows.Media.NamedColor})">
            <summary>Converts a list of NamedColor to BrushCollection </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
