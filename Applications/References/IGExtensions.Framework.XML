<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IGExtensions.Framework</name>
    </assembly>
    <members>
        <member name="M:IGExtensions.Framework.Assets.ThreadLocalizer.#cctor">
            <summary>
            Initializes the <see cref="T:IGExtensions.Framework.Assets.ThreadLocalizer"/> class.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Assets.ThreadLocalizer.DefaultLanguage">
            <summary>
            Gets or sets the default language.
            </summary>
            <value>The default language.</value>
        </member>
        <member name="P:IGExtensions.Framework.Assets.ThreadLocalizer.CurrentLanguage">
            <summary>
            Gets or sets the current language.
            </summary>
            <value>The current language.</value>
        </member>
        <member name="M:IGExtensions.Framework.Assets.ThreadLocalizer.Localize(System.String)">
            <summary>
            Localizes the current thread to specified language.
            </summary>
            <param name="language">The language locale to use.  Note: If this is null the default language locale will be used</param>
        </member>
        <member name="T:IGExtensions.Framework.Controls.ContentScaleControl">
            <summary>
            Represents the Content Scale Viewer that scales its content with aspect ratio
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ContentScaleControl.#ctor">
            <summary>
            Constructs an instance of the AppScaleContainer
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ContentScaleControl.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ContentScaleControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="T:IGExtensions.Framework.Controls.ErrorWindow">
            <summary>
            Represents a window for reporting exceptions with detailed information 
            </summary>
            <summary>
            ErrorWindow
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.ErrorWindow.ShowErrorStackPolicy">
            <summary>
            Gets or sets policy for showing error stack trace in <see cref="T:IGExtensions.Framework.Controls.ErrorWindow"/>
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.Report(System.String,System.String,IGExtensions.Framework.Controls.ErrorShowStackTrace)">
            <summary>
            Creates instance of <see cref="T:IGExtensions.Framework.Controls.ErrorWindow"/> for all other factory Report methods will result in a call to this one
            </summary>
            <param name="message">Which message to display</param>
            <param name="stackTrace">The associated stack trace</param>
            <param name="policy">In which situations the stack trace should be appended to the message</param>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.Report(System.String)">
            <summary>
            Creates a new Error Window given an error message.
            Current stack trace will be displayed if app is running under
            debug or on the local machine
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.Report(System.String,IGExtensions.Framework.Controls.ErrorShowStackTrace)">
            <summary>
            Creates a new Error Window given an error message.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.Report(System.Exception)">
            <summary>
            Creates a new Error Window given an exception.
            Current stack trace will be displayed if app is running under
            debug or on the local machine.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.Report(System.Exception,IGExtensions.Framework.Controls.ErrorShowStackTrace)">
            <summary>
            Creates a new Error Window given an exception.>
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.ErrorShowStackTrace">
            <summary>
            Controls when a stack trace should be displayed on the Error Window
            Defaults to <see cref="F:IGExtensions.Framework.Controls.ErrorShowStackTrace.OnlyWhenDebugging"/>
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.ErrorShowStackTrace.OnlyWhenDebugging">
            <summary>
            Stack trace is showed only when running with a debugger attached
            or when running the app on the local machine. Use this to get
            additional debug information you don't want the end users to see
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.ErrorShowStackTrace.Always">
            <summary>
            Always show the stack trace, even if debugging
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.ErrorShowStackTrace.Never">
            <summary>
            Never show the stack trace, even when debugging
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.ErrorStackMessage">
            <summary>
            Represents error stack message
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.ErrorStackMessage.#ctor(System.Exception)">
            <summary>
            Creates Error Stack Message with nested exceptions included as stack
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationApp">
            <summary>
            Represents common wrapper for <see cref="T:System.Windows.Application"/>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationApp.AppLanguage">
            <summary>
            Gets or sets application language: <see cref="P:System.Globalization.CultureInfo.Name"/> 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationApp.Current">
            <summary>
             Gets current application 
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationApp.MainVisual">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationApp.#ctor">
            <summary>
            Constructor for NavigationApp
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationApp.ReportError(System.Exception)">
            <summary>
            Reports an exception in error dialog window using the ErrorReportingElement 
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:IGExtensions.Framework.Controls.SupportedCultures">
            <summary>
            
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.SupportedCultures.English">
            <summary>
            English culture 
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.SupportedCultures.Japanese">
            <summary>
            Japanese culture
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationButton">
            <summary>
            Represents a navigation link button 
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationButton.#ctor">
            <summary>
            Constructs an instance of the <see cref="T:IGExtensions.Framework.Controls.NavigationButton"/>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.NavigationHoverBackground">
            <summary>
            Gets or sets Hover Brush of the NavigationButton
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.NavigationHoverForeground">
            <summary>
            Gets or sets Hover Brush of the NavigationButton
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.NavigationSelectedBrush">
            <summary>
            Gets or sets Selected Brush of the NavigationButton
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.NavigationButton.NavigationUriProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Framework.Controls.NavigationButton.NavigationUri"/> dependency property. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.NavigationUri">
            <summary>
            Gets or sets the URI to navigate to when the <see cref="T:IGExtensions.Framework.Controls.NavigationButton"/> is clicked. 
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.NavigationButton.IsNavigationTargetExternalProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Framework.Controls.NavigationButton.IsNavigationTargetExternal"/> dependency property. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.IsNavigationTargetExternal">
            <summary>
            Gets or sets whether to navigate to external website
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Controls.NavigationButton.NavigationTargetProperty">
            <summary>
            Identifies the <see cref="P:IGExtensions.Framework.Controls.NavigationButton.NavigationTarget"/> dependency property. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationButton.NavigationTarget">
            <summary>
            Gets or sets the target frame to navigate to.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationFrame">
            <summary>
            Represents common XAML wrapper for <see cref="T:System.Windows.Controls.Frame"/>
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationFramework">
            <summary>
            Represents navigation framework that gets notification of navigation changes from the <see cref="T:IGExtensions.Framework.Controls.NavigationPage"/>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationHostSource">
            <summary>
            Gets URI of the host website of the current XAML application 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationHostAddress">
            <summary>
            Gets address of the root website of the current XAML application
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationFramework.GetNavigationAddress">
            <summary>
            Gets the navigation address of the latest page. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationLink">
            <summary>
            Gets the navigation link of the current page. 
            <remarks>
            This includes address and navigation context if the current page 
            overrides <see cref="M:IGExtensions.Framework.Controls.NavigationPage.GetNavigationContext"/> method.</remarks>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationContext">
            <summary>
            Gets the navigation context of the current page. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationAddress">
            <summary>
            Gets the navigation address of the current page. 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationPage">
            <summary>
            Gets or sets the current navigation page. 
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationFramework.PageChanged">
            <summary>
            Occurs when the navigation address of the current page has been changed
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationFramework.PageAddressChanged">
            <summary>
            Occurs when the navigation address of the current page has been changed
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationFramework.PageContextChanged">
            <summary>
            Occurs when the navigation context of the current page has been changed
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationPage">
            <summary>
            Represents common (SL and WPF) wrapper for <see cref="T:System.Windows.Controls.Page"/> 
            with additional navigation features such as notification of 
            the <see cref="T:IGExtensions.Framework.Controls.NavigationFramework"/> about navigation changes.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationPage.#ctor">
            <summary>
            Constructs an instance of the <see cref="T:IGExtensions.Framework.Controls.NavigationPage"/> object
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationPage.IsPageLoaded">
            <summary>
            Gets whether the current page has been loaded
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationPage.IsPageNavigated">
            <summary>
            Gets whether the current page has been navigated
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationPage.PageUnloaded">
            <summary>
            Occurs when the current page has been removed from the visual tree.
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationPage.PageLoaded">
            <summary>
            Occurs when the current page has been constructed and loaded to the visual tree.
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationPage.PageNavigated">
            <summary>
            Occurs when the current page has been navigated to.
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.NavigationPage.PageNavigating">
            <summary>
            Occurs when the current page has been started to navigating to.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationPage.GetNavigationContext">
            <summary>
            Gets the navigation context of the current page. 
            <remarks>
            Derived objects should overrides this method and provides actual navigation context 
            or this method will return empty string and <see cref="T:IGExtensions.Framework.Controls.NavigationFramework"/> will not include
            navigation context in <see cref="P:IGExtensions.Framework.Controls.NavigationFramework.CurrentNavigationLink"/> property.</remarks>
            <example>www.localhost:1905/#Map + [?]NavigationContext, ?regions=[AU,NA,EU] </example>
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Controls.NavigationPage.OnPageNavigated(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Handles the <see cref="E:IGExtensions.Framework.Controls.NavigationPage.PageNavigated"/> event and notifies the <see cref="T:IGExtensions.Framework.Controls.NavigationFramework"/> about navigation changes.
            <remarks>
            Overrides of this methods should still call this method in order to synchronize the <see cref="T:IGExtensions.Framework.Controls.NavigationFramework"/>.</remarks>
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationTabControl">
            <summary>
            Represents common (SL/WPF) wrapper for <see cref="T:System.Windows.Controls.TabControl"/>  
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Controls.NavigationTabItem">
            <summary>
            Represents common (SL/WPF) wrapper for <see cref="T:System.Windows.Controls.TabItem"/>  
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationWindow.WindowRestoreVisibility">
            <summary>
            Gets or sets visibilty of window restore button
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationWindow.WindowMaximizeVisibility">
            <summary>
            Gets or sets visibilty of window maximize button
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Controls.NavigationWindowBorder.TargetWindow">
            <summary>
            Gets or sets main window of an application
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.SampleContainer.SampleUnloaded">
            <summary>
            Occurs when the sample has been removed from the visual tree.
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.SampleContainer.SampleInitialized">
            <summary>
            Occurs when the sample has been initialized.  
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.Controls.SampleContainer.SampleLoaded">
            <summary>
            Occurs when the sample has been constructed and loaded to the visual tree.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Converters.ThicknessConverter">
            <summary>
            Represents value contverter for converting <see cref="T:System.Windows.Thickness"/> to a double
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Converters.ThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Converters.ThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:IGExtensions.Framework.AssemblyDesigner">
            <summary>
            Provides information useful for setting up information for assemblies in Extensions projects: 
            <para>\Properties\AssemblyInfo.cs </para>
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyDesigner.AssemblyCompanyName">
            <summary>
            The name of company
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyDesigner.AssemblyMajorMinor">
            <summary>
            The major and minor build numbers of the assembly, e.g. 16.1
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyDesigner.AssemblyBuild">
            <summary>
            The build number of the assembly, e.g. 20161
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyDesigner.AssemblyRevision">
            <summary>
            The revision of the assembly.
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyDesigner.AssemblyVersion">
            <summary>
            The full version of the Assembly.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.AssemblyGlobal">
            <summary>
            Provides global variables about assemblies for Extensions projects
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.AssemblyGlobal.AssemblyWithStrings">
            <summary>
            Name of an assembly with resource strings shared between Extensions projects
            <para>example: IGExtensions.Common</para>
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.AssemblyProvider">
            <summary>
            Provides useful methods for working with assembly objects
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets stream of embedded resource file in specified assembly or 
            </summary> 
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
            Returns info about a given assembly object
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns path to location of a given assembly
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyPack(System.Reflection.Assembly)">
            <summary>
            Returns assembly pack for a given assembly.
            <para>For example: pack://application:,,,/[assemblyName];component</para>
            <para>where [assemblyName] is a name of the assembly</para>
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyPack(System.String)">
            <summary>
            Returns assembly pack for a given assembly name.
            <para>For example: pack://application:,,,/[assemblyName];component</para>
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Returns the name of a given assembly
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyComponent(System.Reflection.Assembly)">
            <summary>
            Returns the component path for a given assembly
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyProvider.GetAssemblyComponent(System.String)">
            <summary>
            Returns the component path for a given assembly name
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.AssemblyInfo">
            <summary>
            Represents a class that contains info about an assembly
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.AssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructor for AssemblyInfo object
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.Assembly">
            <summary>
            Gets the Assembly object
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyTitle">
            <summary>
            Gets assembly Title for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyProduct">
            <summary>
            Gets assembly Product for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyDescription">
            <summary>
            Gets assembly Description for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyConfiguration">
            <summary>
            Gets assembly Configuration for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyCompany">
            <summary>
            Gets assembly Company for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyCopyright">
            <summary>
            Gets assembly Copyright for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyTrademark">
            <summary>
            Gets assembly Trademark for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyCulture">
            <summary>
            Gets assembly Culture for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyVersion">
            <summary>
            Gets assembly Version for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyPath">
            <summary>
            Gets assembly path for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyPack">
            <summary>
            Gets assembly pack for this assembly
            <para>For example: pack://application:,,,/[assemblyName];component</para>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyNameShort">
            <summary>
            Gets assembly short name for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyNameFull">
            <summary>
            Gets assembly full name for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyNamespace">
            <summary>
            Gets assembly default namespace for this assembly
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.AssemblyInfo.AssemblyComponent">
            <summary>
            Gets assembly component path for this assembly
            <para>For example: "/" + [assemblyName] + ";component"</para>
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.NativeAssembly">
            <summary>
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.LoadDataCompletedEventArgs.Error">
            <summary>
            Gets an Exception associated with loading the CSV file
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.LoadDataCompletedEventArgs.HasError">
            <summary>
            Gets if there were error when loading the CSV file
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.LoadCsvDataCompletedEventArgs.Result">
            <summary>
            Gets the loaded data from CSV file as a list of strings
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.LoadXmlDataCompletedEventArgs.XmlDocument">
            <summary>
            Gets the loaded data from XML file as a XDocument object
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.LoadXmlDataCompletedEventArgs.XmlReader">
            <summary>
            Gets the loaded xml file as a XmlReader object
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Effects.PlateCarreEffect.EffectTransform.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class. 
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="P:IGExtensions.Framework.Effects.PlateCarreEffect.Rotation">
            <summary>
            Sets or gets the Rotation property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Effects.PlateCarreEffect.RotationProperty">
            <summary>
            Identifies the Rotation dependency property.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Effects.TileEffect.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:IGExtensions.Framework.Effects.TileEffect.VerticalTileCount">
            <summary>
            Gets or sets the vertical tile count.
            </summary>
            <value>The vertical tile count.</value>
        </member>
        <member name="P:IGExtensions.Framework.Effects.TileEffect.HorizontalTileCount">
            <summary>
            Gets or sets the horizontal tile count.
            </summary>
            <value>The horizontal tile count.</value>
        </member>
        <member name="T:IGExtensions.Framework.AppClickOnceManager">
            <summary>
            Represents manager that provides functionality to install/uninstall Click-Once applications
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.DebugManager">
            <summary>
            Represents a debug manager for managing and logging messages in debug window
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.DebugManager.LoggingLevel">
            <summary>
            Gets or sets debug logging level for writing messages in debug window
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.DebugLogLevel">
            <summary>
            Represents debugging log level, None -> Warning -> Error -> Trace -> Data -> All
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.None">
            <summary>
            Logging Level 0
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.Error">
            <summary>
            Logging Level 1
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.Warning">
            <summary>
            Logging Level 2
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.Trace">
            <summary>
            Logging Level 3
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.Data">
            <summary>
            Logging Level 4
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.DebugLogLevel.All">
            <summary>
            Logging Level 5
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.NumericDate.Value">
            <summary>
            Gets or sets Value property 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.NumericDate.Day">
            <summary>
            Gets or sets Day property 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.NumericDate.Month">
            <summary>
            Gets or sets Month property 
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.NumericDate.Year">
            <summary>
            Gets or sets Year property 
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.DoubleToDateConverter">
            <summary>
            Represents value converter for converting <see cref="T:IGExtensions.Framework.NumericDate"/> to a string
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.DoubleToDateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.DoubleToDateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.ObservableModel">
            <summary>
            Represents an observable model that implements INotifyPropertyChanged interface
            </summary>
        </member>
        <member name="E:IGExtensions.Framework.ObservableModel.PropertyChanged">
            <summary>
            Occurs when a property value was changed
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.ObservableModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for provided property name
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:IGExtensions.Framework.ObservableObject.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for provided property name
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.BinarySearch``1(``0,System.Int32,System.Func{System.Int32,``0,System.Int32})">
            <summary>
            Search for key in indexed list. This method is typically used where
            the list doesn't contain objects of the same type as the key, or where
            the key isn't a literal match to the list contents.
            </summary>
            <remarks>
            The list must be strongly sorted by key. 
            </remarks>
            <typeparam name="T1"></typeparam>
            <param name="key"></param>
            <param name="count"></param>
            <param name="comparator"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swap two list items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Current list object.</param>
            <param name="a">Index of first item to swap.</param>
            <param name="b">Index of second item to swap.</param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByValue``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
            </summary>
            <remarks>
            The list is reordered such that list[0] to list[k-1] are less than list[k] and
            all items list[k+1] to list[list.Count-1] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="values">List of values to partition.</param>
            <param name="value">Pivot value.</param>
            <param name="begin">Index of first item in subrange.</param>
            <param name="end">Index of last item in subrange.</param>
            <returns>Index of first item greater than the specified pivot value.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByValue``1(System.Func{System.Int32,``0},System.Collections.Generic.IList{System.Int32},``0,System.Int32,System.Int32)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="indices"></param>
            <param name="value"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByOrder``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Calculates the kth biggest item in the current list object and partitions
            the list accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[0] to list[k-1] are less than list[k] and
            all items list[k+1] to list[list.Count-1] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
            <param name="list">List object to partition.</param>
            <param name="pivotOrder">Pivot item order.</param>
            <returns>Pivot item value.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByOrder``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the kth biggest item in the specified subrange of the current
            list object and partitions it accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[position] to list[position+k-1] are
            less than list[position+k] and
            all items list[position+k+1] to list[position+Count] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
            <param name="list"></param>
            <param name="pivotOrder"></param>
            <param name="position"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByOrder``1(System.Collections.Generic.IList{``0},System.Int32,System.Comparison{``0})">
            <summary>
            Calculates the kth biggest item in the current list object and partitions
            the list accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[0] to list[k-1] are less than list[k] and
            all items list[k+1] to list[list.Count-1] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
            <param name="list">List object to partition.</param>
            <param name="k">Pivot item order.</param>
            /// <param name="compare"></param>
            <returns>Pivot item value.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ArrayTool.PartitionByOrder``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            Calculates the kth biggest item in the specified subrange of the current
            list object and partitions it accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[position] to list[position+k-1] are
            less than list[position+k] and
            all items list[position+k+1] to list[position+Count] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
            <param name="list"></param>
            <param name="pivotOrder"></param>
            <param name="position"></param>
            <param name="count"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.BitmapTool.ScanLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Scan convert a line segment with linear RGB color interpolation.
            </summary>
            <remarks>
            The specified scan line is clipped to the bitmap left and right edges.
            </remarks>
            <param name="bitmap">Target bitmap</param>
            <param name="x0">Line start (may be greater than x1)</param>
            <param name="a0"></param>
            <param name="r0">Red component of line start color (0.0 to 255.0)</param>
            <param name="g0">Green component of line start color (0.0 to 255.0)</param>
            <param name="b0">Blue component of line start color (0.0 to 255.0)</param>
            <param name="x1">Line end (may be less than x)</param>
            <param name="a1"></param>
            <param name="r1">Red component of line end color (0.0 to 255.0)</param>
            <param name="g1">Green component of line end color (0.0 to 255.0)</param>
            <param name="b1">Blue component of line end color (0.0 to 255.0)</param>
            <param name="y">Scan line.</param>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper">
            <summary>
            Modified Sutherland-Hodge clipping
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.#ctor(System.Windows.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="clip">Clip rectangle</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="left">Left edge of clip rectangle or NaN.</param>
            <param name="bottom">Bottom edge of clip rectangle or NaN.</param>
            <param name="right">Right edge of clip rectangle or NaN.</param>
            <param name="top">Top edge of clip rectangle or NaN.</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper.EdgeClipper">
            <summary>
            Represents a clipping stage in the Sutherland-Hodge clipper.
            </summary>
            <remarks>
            EdgeClipper implements IList so that it can be transparently
            pipe to either another edge clipper or a "real" IList implementation.
            </remarks>
        </member>
        <member name="P:IGExtensions.Framework.Tools.Clipper.EdgeClipper.Dst">
            <summary>
            Sets or gets the destination for the current edge clipper object.
            </summary>
            <remarks>
            Setting an edge clipper's destination resets the stage.
            </remarks>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.EdgeClipper.Add(System.Windows.Point)">
            <summary>
            Adds a point to the current edge clipper, resulting in zero, one or two
            points being piped to the desitnation IList.
            </summary>
            <param name="cur">Point to add to the clipping stage.</param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.EdgeClipper.Clear">
            <summary>
            Flushes the edge clipping stage.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.EdgeClipper.IsInside(System.Windows.Point)">
            <summary>
            Gets the status of the point with respect to the current clipping stage's edge.
            </summary>
            <param name="pt">Point to test</param>
            <returns>True if the point is inside or on the edge, false otherwise</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Clipper.EdgeClipper.Intersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the intersection of an edge with the current clipping stage's edge.
            </summary>
            <param name="b">Start of edge</param>
            <param name="e">End of edge</param>
            <returns>Intersection of edge with the current clipping stage's edge</returns>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper.LeftClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's left edge.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper.BottomClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's bottom edge.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper.RightClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's right edge.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Clipper.TopClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's top edge.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ColorTool.FromString(System.String)">
            <summary>
            Gets a color matching the input string.
            </summary>
            <param name="value">The string to convert to a color.</param>
            <returns>A color matching the input string.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ColorTool.FromVector(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Packs a vector of max length 0.5 into a color.
            it would probably be a better idea to use the alpha channel as a scale and RGB as the (semi-unit) direction
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ColorTool.FromAHSL(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsl components 
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.PolylineBuilder">
            <summary>
            Toolity class for piecewise construction of indexed polylines.
            </summary>
            <remarks>
            This class represents polyline point as integer ids with the assumption that
            two vertices are identical if they have identical ids. The class itself
            has no need for any vertex-specific information such as its coordinates.
            </remarks>
        </member>
        <member name="M:IGExtensions.Framework.Tools.PolylineBuilder.Clear">
            <summary>
            Clears all polylines from the current object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.PolylineBuilder.Polylines">
            <summary>
            Gets the list of polylines for the current object.
            </summary>
            <remarks>
            There may be zero or more constructed polylines each of length two or more. A polyline
            is represented as a list of integer ids as passed to the AddSegment method. Polylines
            do not contain self-intersections or adjacent coincident point. A polyline may form
            a loop, in which case its first and last point are identical.
            </remarks>
        </member>
        <member name="M:IGExtensions.Framework.Tools.PolylineBuilder.AddSegment(System.Int32,System.Int32)">
            <summary>
            Adds a segment to the current object.
            </summary>
            <param name="begin">Id of the first point in the segment</param>
            <param name="end">Id of the end point in the segment</param>
        </member>
        <member name="T:IGExtensions.Framework.Tools.ContourBuilder">
            <summary>
            Toolity class for piecewise construction of edge-based contours.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ContourBuilder.Clear">
            <summary>
            Clears all polylines and point from the current object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.ContourBuilder.X">
            <summary>
            Gets the list of x coordinates for the line in the current object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.ContourBuilder.Y">
            <summary>
            Gets the list of y coordinates for the line in the current object.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.ContourBuilder.Point(System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an edge point for the current object and returns its point id.
            </summary>
            <remarks>
            The begin and edge point ids are hashed to produce a unique point id. The current implementation
            of the hash function is reliable for ids of less than 65536.
            </remarks>
            <param name="b">Edge begin point id</param>
            <param name="e">Edge end point id</param>
            <param name="xb">Edge begin point x coordinate.</param>
            <param name="yb">Edge begin point y coordinate.</param>
            <param name="zb">Edge begin point z coordinate.</param>
            <param name="xe">Edge end point x coordinate.</param>
            <param name="ye">Edge end point y coordinate.</param>
            <param name="ze">Edge end point z coordinate.</param>
            <param name="z">Contour v.</param>
            <returns>Unique vertex id.</returns>
        </member>
        <member name="T:IGExtensions.Framework.Tools.GeometryTool">
            <summary>
            Represents a tool with geometry calculations and operations
            </summary>
            <summary>
            Toolity class for rectangle-based calculations.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Fit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Calculates the coefficients of a polynomial fit or possibly the coefficients for
            a piecewise cubic fit
            </summary>
            <param name="count"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="yp1"></param>
            <param name="ypn"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Smooth(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Smooth a line
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="x">x coordinate of ith point.</param>
            <param name="y">y coordinate of ith point.</param>
            <param name="resolution"></param>
            <returns>Smooth line.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Smooth(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Smooth a line into a PathFigure of quadratic and cubic bezier splines.
            </summary>
            <param name="count">Number of equator in line.</param>
            <param name="x">x coordinate of ith point.</param>
            <param name="y">y coordinate of ith point.</param>
            <returns>Smooth line.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.SmoothingSpline(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates a smoothing spline into bezier control points.
            </summary>
            <param name="points"></param>
            <param name="knots"></param>
            <param name="tension"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.InterpolatingSpline(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates an interpolating spline into bezier control points.
            </summary>
            <param name="points"></param>
            <param name="knots"></param>
            <param name="tension"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.SmoothingSpline(System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates amd flattens a smoothing spline into a polyline points
            </summary>
            <param name="points"></param>
            <param name="knots"></param>
            <param name="resolution"></param>
            <param name="tension"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.InterpolatingSpline(System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates amd flattens an interpolating spline into a polyline points
            </summary>
            <param name="points"></param>
            <param name="knots"></param>
            <param name="resolution"></param>
            <param name="tension"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.BezierCurve(System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Flattens a Bezier curve.
            </summary>
            <param name="points"></param>
            <param name="p0">Start point</param>
            <param name="p1">First control point.</param>
            <param name="p2">Second control point.</param>
            <param name="p3">End point.</param>
            <param name="resolution"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.SmoothingSpline(IGExtensions.Framework.Tools.Clipper,System.Windows.Rect,System.Double,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates, flattens and clips a smoothing spline into a clipper.
            </summary>
            <param name="points"></param>
            <param name="viewport"></param>
            <param name="resolution"></param>
            <param name="tension"></param>
            <param name="knots"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.InterpolatingSpline(IGExtensions.Framework.Tools.Clipper,System.Windows.Rect,System.Double,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Calculates, flattens and clips an interpolating spline into a clipper.
            </summary>
            <param name="points"></param>
            <param name="viewport"></param>
            <param name="resolution"></param>
            <param name="tension"></param>
            <param name="knots"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.BezierCurve(IGExtensions.Framework.Tools.Clipper,System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Flattens and clips a bezier curve.
            </summary>
            <param name="points"></param>
            <param name="viewport"></param>
            <param name="resolution"></param>
            <param name="p0">Start point</param>
            <param name="p1">First control point.</param>
            <param name="p2">Second control point.</param>
            <param name="p3">End point.</param>
        </member>
        <member name="T:IGExtensions.Framework.Tools.GeometryTool.HalfEdge">
            <summary>
            A directed half-edge segment defined by two vertex codes.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            HalfEdge constructor.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.GeometryTool.HalfEdge.B">
            <summary>
            B.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.GeometryTool.HalfEdge.E">
            <summary>
            resolution.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet">
            <summary>
            Represents an unordered set of half-edges.
            </summary>
            <remarks>
            The set may not contain two half-edges which form together form a full edge, and it is an
            error to attempt to insert such a pair.
            </remarks>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.Add(IGExtensions.Framework.Tools.GeometryTool.HalfEdge)">
            <summary>
            Adds a HalfEdge to the set.
            </summary>
            <param name="edge">The HalfEdge to add.</param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.Remove(IGExtensions.Framework.Tools.GeometryTool.HalfEdge)">
            <summary>
            Removes a HalfEdge from the set.
            </summary>
            <param name="edge">The HalfEdge to remove from the set.</param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.Count">
            <summary>
            Count of HalfEdges in the set.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.HalfEdgeSet.Contains(IGExtensions.Framework.Tools.GeometryTool.HalfEdge)">
            <summary>
            Determines whether or not the given HalfEdge exists in the set.
            </summary>
            <param name="edge">The HalfEdge under observation.</param>
            <returns>True if the set contains the HalfEdge, otherwise False.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.PointsConvexHull(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Find the convex hull of a point cloud using "Gift-wrap" algorithm 
            </summary>
            <remarks>
            Runs in O(N*S) time where S is number of sides of resulting polygon.
            Worst case: point cloud is all vertices of convex polygon: O(N^2).
            There may be faster algorithms to do this, should you need one -
            this is just the simplest. You can get O(N log N) expected time if you
            try, I think, and O(N) if you restrict inputs to simple polygons.
            Returns null if number of vertices passed is less than 3.
            Results should be passed through convex decomposition afterwards
            to ensure that each shape has few enough points to be used in Box2d.
            <para>May be buggy with colinear points on hull.</para>
            <para>From Eric Jordan's convex decomposition library (box2D rev 32)</para>
            </remarks>
            <param name="vertices">The vertices.</param>
            <returns>List of vertex indices</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.SimplePolygonHull(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Find the convex hull of s a simple polygon or polyline
            </summary>
            <param name="count"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Leader(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Gets the attachment point on the current rectangle for the leader line
            to the specified anchor.
            </summary>
            <remarks>
            If the anchor lies within the current rectangle, the anchor is returned.  
            </remarks>
            <param name="rect">Area to join to the anchor</param>
            <param name="anchor">Anchor to join to the rectangle</param>
            <returns>Attachment point.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IGExtensions.Framework.Tools.GeometryTool.Triad.MakeClockwise(IGExtensions.Framework.Tools.GeometryTool.ListPoint)" -->
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triad.FindCircumcirclePrecisely(IGExtensions.Framework.Tools.GeometryTool.ListPoint)">
            <summary>
            Find location and radius ^2 of the circumcircle (through all 3 points)
            This is the most critical routine in the entire set of code.  It must
            be numerically stable when the points are nearly collinear.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triad.InsideCircumcircle(System.Windows.Point)">
            <summary>
            Return true iff Point p is inside the circumcircle of this triangle
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triad.ChangeAdjacentIndex(System.Int32,System.Int32)">
            <summary>
            Change any adjacent triangle index that matches fromIndex, to toIndex
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triad.FindAdjacency(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Determine which edge matches the triangleIndex, then which vertex the vertexIndex
            Set the indices of the opposite vertex, left and right edges accordingly
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.GeometryTool.Hull">
            <summary>
            Hull represents a list of vertices in the convex hull, and keeps track of
            their indices (into the associated points list) and triads
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Hull.VectorToNext(System.Int32,System.Double@,System.Double@)">
            <summary>
            Return vector from the hull point at index to next point
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Hull.EdgeVisibleFrom(System.Int32,System.Double,System.Double)">
            <summary>
            Return whether the hull vertex at index is visible from the supplied coordinates
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Hull.EdgeVisibleFrom(System.Int32,IGExtensions.Framework.Tools.GeometryTool.HullPoint)">
            <summary>
            Return whether the hull vertex at index is visible from the point
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Hull.EdgeVisibleFrom(System.Int32,System.Windows.Point)">
            <summary>
            Return whether the hull vertex at index is visible from the point
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.Analyse(IGExtensions.Framework.Tools.GeometryTool.ListPoint,IGExtensions.Framework.Tools.GeometryTool.Hull,System.Collections.Generic.List{IGExtensions.Framework.Tools.GeometryTool.Triad},System.Boolean,System.Boolean)">
            <summary>
            Does a bunch of stuff, including creating the convex hull and initial poor, but valid, triangulation
            </summary>
            <param name="points"></param>
            <param name="hull"></param>
            <param name="triads"></param>
            <param name="rejectDuplicatePoints"></param>
            <param name="hullOnly"></param>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.ConvexHull(IGExtensions.Framework.Tools.GeometryTool.ListPoint)">
            <summary>
            Return the convex hull of the supplied points,
            Don't check for duplicate points
            </summary>
            <param name="points">List of 2D vertices</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.ConvexHull(IGExtensions.Framework.Tools.GeometryTool.ListPoint,System.Boolean)">
            <summary>
            Return the convex hull of the supplied points,
            Optionally check for duplicate points
            </summary>
            <param name="points">List of 2D vertices</param>
            <param name="rejectDuplicatePoints">Whether to omit duplicated points</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.Triangulation(IGExtensions.Framework.Tools.GeometryTool.ListPoint)">
            <summary>
            Return the Delaunay triangulation of the supplied points
            Don't check for duplicate points
            </summary>
            <param name="points">List of 2D vertices</param>
            <returns>Triads specifying the triangulation</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.Triangulation(IGExtensions.Framework.Tools.GeometryTool.ListPoint,System.Boolean)">
            <summary>
            Return the Delaunay triangulation of the supplied points
            Optionally check for duplicate points
            </summary>
            <param name="points">List of 2D vertices</param>
            <param name="rejectDuplicatePoints">Whether to omit duplicated points</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.FlipTriangle(IGExtensions.Framework.Tools.GeometryTool.ListPoint,System.Collections.Generic.List{IGExtensions.Framework.Tools.GeometryTool.Triad},System.Int32,System.Int32@)">
            <summary>
            Test the triad against its 3 neighbours and flip it with any neighbour whose opposite point
            is inside the circumcircle of the triad
            </summary>
            <param name="points"></param>
            <param name="triads">The triads</param>
            <param name="triadIndexToTest">The index of the triad to test</param>
            <param name="triadIndexFlipped">Index of adjacent triangle it was flipped with (if any)</param>
            <returns>true iff the triad was flipped with any of its neighbours</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.GeometryTool.Triangulator.FlipTriangles(IGExtensions.Framework.Tools.GeometryTool.ListPoint,System.Collections.Generic.List{IGExtensions.Framework.Tools.GeometryTool.Triad},System.Boolean[])">
            <summary>
            Flip triangles that do not satisfy the Delaunay condition
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.MathTool">
            <summary>
            Represents a tool with mathematical calculations and operations
            </summary>
            <summary>
            Toolities for Quaternions
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.NiceFloor(System.Double)">
            <summary>
            Returns a nicely rounded value less than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.NiceRound(System.Double)">
            <summary>
            Rounds a decimal value to the nearest nice number.
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.NiceCeiling(System.Double)">
            <summary>
            Returns a nicely rounded value greater than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.erf(System.Double)">
            <summary>
            Evaluates the error function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.erfc(System.Double)">
            <summary>
            Evaluates the complementary error function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.inverf(System.Double)">
            <summary>
            Evaluates the inverse error function.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.inverfc(System.Double)">
            <summary>
            Evaluates the inverse complementary error function.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LinearFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the linear least squares fit y=A+Bx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFitting.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LinearFit(System.Collections.IEnumerable,System.Func{System.Object,System.Double},System.Collections.IEnumerable,System.Func{System.Object,System.Double})">
            <summary>
            Creates coefficients for the linear least squares fit y=A+Bx
            </summary>
            <param name="ex">Enumerable containing x values</param>
            <param name="x">Delegate which returns the x value from the specified entry in ex.</param>
            <param name="ey">Enumerable containing y values</param>
            <param name="y">Delegate which returns the x value from the specified entry in ey.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFitting.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LinearEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LinearTest">
            <summary>
            Tests linear fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LogarithmicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Boolean)">
            <summary>
            Creates coefficients for the logarithmic least squares fit y=A+Blnx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <param name="naN">Indicates that the series may contain NaN.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the x is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Logarithmic." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LogarithmicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*ln(x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LogarithmicTest">
            <summary>
            Tests logarithmic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ExponentialFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the exponential least squares fit y=Ae^(Bx)
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the y is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Exponential." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingExponential.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ExponentialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*e^(a[1]*x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ExponentialTest">
            <summary>
            Tests exponential fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PowerLawFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the power law least squares fit y=A(x^B)
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Power Law." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PowerLawEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*(a[1]^x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PowerLawTest">
            <summary>
            Tests power law fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuadraticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuadraticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuadraticTest">
            <summary>
            Tests quadratic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.CubicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.CubicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.CubicTest">
            <summary>
            Tests cubic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuarticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuarticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuarticTest">
            <summary>
            Tests quartic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuinticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4+a5x^5
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuinticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.QuinticTest">
            <summary>
            Tests quintic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PolynomialFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2..
            </summary>
            <param name="n">Number of items in the categorySeries.</param>
            <param name="k">Polynomial order.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in significant numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PolynomialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+ .. +a[normalToPlane-1]*x^[normalToPlane-1]
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.PolynomialTest(System.Int32)">
            <summary>
            Tests polynomial fitting.
            </summary>
            <param name="k">Polynomial order to test.</param>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Inverse(System.Windows.Media.Matrix)">
            <summary>
            Gets the inverse of the matrix.
            </summary>
            <param name="matrix"></param>
            <returns>Inverse matrix.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Returns Perlin noise value at the specified location in R3
            normalised to the range [0, 1]
            </summary>
            <remarks>
            The "Improved" 2002 Noise algoritm is described by Ken Perlin at http://mrl.nyu.edu/~perlin/paper445.pdf
            </remarks>
            <param name="x">x location in noise space</param>
            <param name="y">y location in noise space</param>
            <param name="z">z location in noise space</param>
            <returns>Noise value.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.FromEulerAngles(System.Double,System.Double,System.Double)">
            <summary>
            Create a quaternion from the specified Eueler angles.
            </summary>
            <param name="rx"></param>
            <param name="ry"></param>
            <param name="rz"></param>
            <returns>A new Quaternion.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.EulerAngles(System.Windows.Media.Media3D.Quaternion)">
            <summary>
            Gets the Euler angles for the current Quaternion. .
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the median value of a sequence of values.
            </summary>
            <param name="sequence"></param>
            <returns>Median value</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the mean value of a sequence of values.
            </summary>
            <param name="sequence"></param>
            <returns>Mean value</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.AverageDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Calculates the average deviation of a sequence of values.
            </summary>
            <param name="sequence"></param>
            <param name="average">Precalculated average if known.</param>
            <returns>Average deviation.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Calculates the variance of a sequence of values.
            </summary>
            <param name="sequence"></param>
            <param name="average">Precalculated average if known.</param>
            <returns>Variance.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Calculates the standard deviation of a sequence of values
            </summary>
            <param name="sequence"></param>
            <param name="variance">Precalculated variance if known.</param>
            <param name="average">Precalculated average if known.</param>
            <returns>Standard deviation</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Skew(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Calculates the skew of a sequence of values
            </summary>
            <param name="sequence"></param>
            <param name="variance">Precalculated variance if known.</param>
            <param name="average">Precalculated average if known.</param>
            <returns>Skew</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Calculates the kurtosis of a sequence of values
            </summary>
            <param name="sequence"></param>
            <param name="variance">Precalculated variance if known.</param>
            <param name="average">Precalculated average if known.</param>
            <returns>Skew</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the moving standard deviation.
            </summary>
            <remarks>
            NaN items in the sequence are ignores.
            </remarks>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict">Require at least period good values</param>
            <returns>The moving standard deviation</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.MeanAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the moving mean absolute deviation.
            </summary>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict">Require at least period good values</param>
            <returns>The moving mean absolute deviation.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.MaximumAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the moving maximum absolute deviation.
            </summary>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict">Require at least period good values</param>
            <returns>The moving maximum absolute deviation.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.SimpleMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the simple moving average.
            </summary>
            <remarks>
            NaN items in the sequence are ignored.
            </remarks>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict">Require at least period good values</param>
            <returns>The simple moving average.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the cumulative moving average.
            </summary>
            <remarks>
            NaN items in the sequence are ignored.
            </remarks>
            <param name="sequence"></param>
            <returns>The cumulative moving average.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            NaN items in the sequence are ignored.
            </remarks>
            <param name="sequence"></param>
            <param name="α"></param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            NaN items in the sequence are ignored.
            </remarks>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict"></param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.ModifiedMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Calculates the modified moving average.
            </summary>
            <remarks>
            NaN items in the sequence are ignored.
            </remarks>
            <param name="sequence"></param>
            <param name="period"></param>
            <param name="strict"></param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Solve(System.Double,System.Double,System.Double)">
            <summary>
            Find the real roots of the quadratic equation ax^2+bx+c=0
            </summary>
            <param name="a">quadratic coefficient</param>
            <param name="b">linear coefficient</param>
            <param name="c">constant coefficient</param>
            <returns>Two real roots or two double.NaNs if no real roots exist.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IGExtensions.Framework.Tools.MathTool.Solve(System.Double,System.Double,System.Double,System.Double)" -->
        <member name="M:IGExtensions.Framework.Tools.MathTool.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Solve a system of linear equations using gauss-jordan eliminiation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.Gamma(System.Double)">
            <summary>
            Returns the gamma function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.stirf(System.Double)">
            <summary>
            Return the gamma function computed by Stirling's formula.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.igamc(System.Double,System.Double)">
            <summary>
            Returns the complemented incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.IncompleteGamma(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.LnGamma(System.Double)">
            <summary>
            Returns the natural logarithm of gamma function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.polevl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.MathTool.p1evl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N with assumtion that coef[N] = 1.0
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>		
        </member>
        <member name="T:IGExtensions.Framework.Tools.Pair`2">
            <summary>
            Represents an immutable pair of values.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="T:IGExtensions.Framework.Tools.PriorityQueue`1">
            <summary>
            Represents a strongly typed sorted list of objects accessed by their priority. Provides
            methods to add and remove items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IGExtensions.Framework.Tools.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the PriorityQueue class. 
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the highest priority object from the priority queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.PriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Inserts an item into the current priority queue with the specified priority.
            </summary>
            <param name="item">The object to push onto the priority queue.</param>
            <param name="priority">The object's priority.</param>
        </member>
        <member name="P:IGExtensions.Framework.Tools.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the current priority queue.
            
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.Property">
            <summary>
            A reflection strategy that uses either traditional reflection or compiled lambda expressions
            to get property values from an object.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Property.#ctor">
            <summary>
            Constructs the fast reflection helper.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.Property.PropertyName">
            <summary>
            Gets or sets the property name of the current Property object.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Property.GetValue(System.Object)">
            <summary>
            Gets the property value from the specified item.
            </summary>
            <param name="item"></param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.Property.GetValue(System.Type,System.Object)">
            <summary>
            Gets the property value for the specified item.
            </summary>
            <param name="itemType">The item type.</param>
            <param name="item">The item containing the property.</param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="T:IGExtensions.Framework.Tools.StackPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IGExtensions.Framework.Tools.StackPool`1.Pop">
            <summary>
            Gets an object from the pool.
            </summary>
            <remarks>
            The pool will either Create a new object or Activate one which was previously returned
            and Deactivated. If DeferDisactivate is set there may be pending active objects
            available which will be reused directly).
            </remarks>
            <returns>An object.</returns>
        </member>
        <member name="M:IGExtensions.Framework.Tools.StackPool`1.Push(`0)">
            <summary>
            Returns an object to the pool for recycling.
            </summary>
            <remarks>
            All references to objects which have been returned to the pool should be destroyed. 
            <para>
            When an object is returned to the pool it will be immediately Deactivated (unless
            DeferDisactivate is set) and may also be Destroyed either immediately or some time
            later. 
            </para>
            </remarks>
            <param name="t"></param>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.DeferDisactivate">
            <summary>
            Sets or gets the DeferDisactivate flag.
            </summary>
            <remarks>
            When the pool is marked to defer deactivation, objects returned to the pool are
            not immediately deactivated, instead remaining in a limbo state where they are
            available for reuse without Activation. Resetting DeferDisactivate causes all of 
            these limbo objects to be deactivated and potentially destroyed.
            <para>
            Deferred deactivation is useful where the activation/deactivation cycle is costly
            (such as add/remove a VisualElement from a ParentItem Panel).
            </para>
            </remarks>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.ActiveCount">
            <summary>
            Gets the number of active items in the current StackPool object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.InactiveCount">
            <summary>
            Gets the number of inactive (not including limbo) items in the
            current StackPool object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.Disactivate">
            <summary>
            Gets or sets the function used to deactivate items.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StackPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Tools.StackPool`1._active">
            <summary>
            The active object collection.
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Tools.StackPool`1._limbo">
            <summary>
            The limbo object collection.
            </summary>
        </member>
        <member name="F:IGExtensions.Framework.Tools.StackPool`1._inactive">
            <summary>
            The inactive object collection.
            </summary>
        </member>
        <member name="T:IGExtensions.Framework.Tools.StringFormatter">
            <summary>
            Represents a string formatting object used to create strings
            based upon an object and a formatting string which dereferences
            properties from the object.
            </summary>
        </member>
        <member name="M:IGExtensions.Framework.Tools.StringFormatter.References(System.String)">
            <summary>
            Predicate indicating that the current StringFormatter object refers
            to the named property.
            </summary>
            <param name="propertyName"></param>
            <returns>true if the current StringFormatter object refers
            to the named property.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IGExtensions.Framework.Tools.StringFormatter.Format(System.Object)" -->
        <member name="P:IGExtensions.Framework.Tools.StringFormatter.FormatString">
            <summary>
            Gets or sets the raw formatting string for the current StringFormatter object. 
            </summary>
            <remarks>
            Setting the raw formatting string immediately compiles the format string and
            list of referenced properties.
            </remarks>
        </member>
        <member name="M:IGExtensions.Framework.Tools.StringFormatter.ToString">
            <summary>
            Returns a String that represents the current StringFormatter.
            </summary>
            <returns>A String that represents the current StringFormatter.</returns>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StringFormatter.CompiledFormatString">
            <summary>
            Gets the compiled format string for the current StringFormatter object.
            </summary>
        </member>
        <member name="P:IGExtensions.Framework.Tools.StringFormatter.PropertyNames">
            <summary>
            Gets the list of the property names referred to by the current StringFormatter object. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IGExtensions.Framework.Tools.StringFormatter.GetPropertyValue(System.Object,System.String)" -->
        <member name="T:System.Windows.ApplicationEx">
            <summary>
            Represents a class that provides extensions for  <see cref="T:System.Windows.Application"/>
            </summary>
        </member>
        <member name="M:System.Windows.ApplicationEx.InitializeCulture(System.Windows.Application,System.String)">
            <summary>
            Checks if we have a localization for the specified language and if not falls back 
            the CurrentCulture and CurrentUICulture to the ones defined in the default resources.
            It also sets the language of the root visual. This affects all converters in data bindings.
            </summary>
            <param name="app"></param>
            <param name="forcedLanguageName">Four Letter Language Name, e.g. "en-US", "en"</param>
            <remarks>This method should be called after App.InitializeComponent() </remarks>
        </member>
        <member name="M:System.Windows.ApplicationEx.InitializeCulture(System.Windows.Application,IGExtensions.Framework.Controls.SupportedCultures)">
            <summary>
            Checks if we have a localization for the specified language and if not falls back 
            the CurrentCulture and CurrentUICulture to the ones defined in the default resources.
            It also sets the language of the root visual. This affects all converters in data bindings.
            </summary>
            <param name="app"></param>
            <param name="forcedCulture">Two Letter ISO Language Name</param>
            <remarks>This method should be called after App.InitializeComponent() </remarks>
        </member>
        <member name="M:System.Windows.ApplicationEx.InitializeCulture(System.Windows.Application,System.Globalization.CultureInfo)">
            <summary>
            Checks if we have a localization for the current culture's language and if not falls back 
            the CurrentCulture and CurrentUICulture to the ones defined in the default resources.
            It also sets the language of the root visual. This affects all converters in data bindings.
            </summary>
            <remarks>This method should be called after App.InitializeComponent() </remarks>
        </member>
        <member name="M:System.Windows.ApplicationEx.GetCurrentUiCultureInfo">
            <summary>
            Get Current UI Culture Information 
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.ApplicationEx.IsInDesingMode(System.Windows.Application)">
            <summary>
            Checks if current application is in design mode, XAML view open in MS Blend or VS Designer.
            </summary>
            <remarks>This is useful to prevent loading of some code when in MS Blend or VS Designer.</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.IsEmpty(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Checks if the BitmapSource is empty (all pixels are blank)
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.GetPixelColorAt(System.Windows.Media.Imaging.BitmapSource,System.Int32,System.Int32)">
            <summary>
            Gets Color at pixel location of BitmapSource 
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.Media.Imaging.BitmapEx"/></remarks>
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.GetPixelColorAt(System.Windows.Media.Imaging.BitmapSource,System.Windows.Point)">
            <summary>
            Gets Color at pixel location of BitmapSource 
            </summary>
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.Media.Imaging.BitmapEx"/></remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.GetPixelColor(System.Int32,System.Int32[])">
            <summary>
            Gets Color at index of pixel array 
            </summary>
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.Media.Imaging.BitmapEx"/></remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.GetPixelColor(System.Int32)">
            <summary>
            Converts pixel to a Color  
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapEx.GetPixels(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Gets array of Pixels that builds this BitmapSource
            </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.Blend(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>Blends the specified colors together</summary>
            <param name="thisColor">Color to blend onto the background color</param>
            <param name="backColor">Color to blend the other color onto</param>
            <param name="amount">How much of <paramref name="thisColor"/> to keep on top of <paramref name="backColor"/></param>
        </member>
        <member name="M:System.Windows.Media.ColorEx.Blend(System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary> Converts colors to a single color </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToBrushes(System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary> Converts colors to a list of brushes </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToColors(System.Collections.Generic.List{System.Windows.Media.SolidColorBrush})">
            <summary> Converts brushes to a list of colors </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.FromHex(System.Windows.Media.Color,System.String)">
            <summary> Converts color HEX to <see cref="T:System.Windows.Media.Color"/>, e.g. "#FF000000" -> Colors.Black </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.FromArgb(System.Windows.Media.Color,System.UInt32)">
            <summary> Converts color ARBG to <see cref="T:System.Windows.Media.Color"/>, e.g. 0xFF000000 -> Colors.Black </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToColor(System.UInt32)">
            <summary> Converts color ARBG to <see cref="T:System.Windows.Media.Color"/>, e.g. 0xFF000000 -> Colors.Black </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToColor(System.String)">
            <summary> Converts color HEX to <see cref="T:System.Windows.Media.Color"/>, e.g. "#FF000000"  -> Colors.Black </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToBrush(System.Windows.Media.Color)">
            <summary> Converts <see cref="T:System.Windows.Media.Color"/> to <see cref="T:System.Windows.Media.SolidColorBrush"/>  </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToArgb(System.Windows.Media.Color)">
            <summary> Converts <see cref="T:System.Windows.Media.Color"/> to color ARBG, e.g. Colors.Black -> 0xFF000000  </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToHex(System.Windows.Media.Color)">
            <summary> Converts <see cref="T:System.Windows.Media.Color"/> to color HEX string, e.g. Colors.Black -> "#FF000000"  </summary>
        </member>
        <member name="M:System.Windows.Media.ColorEx.ToHex(System.UInt32)">
            <summary> Converts color ARBG to color HEX string, e.g. 0xFF000000 -> "#FF000000"   </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.Blend(System.Windows.Media.SolidColorBrush,System.Windows.Media.SolidColorBrush,System.Double)">
            <summary>Blends the specified brushes together</summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.Blend(System.Collections.Generic.List{System.Windows.Media.SolidColorBrush})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.SolidColorBrush"/> to a single blended <see cref="T:System.Windows.Media.SolidColorBrush"/></summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.Blend(System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.Brush"/> to a single blended color </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.FromHex(System.Windows.Media.SolidColorBrush,System.String)">
            <summary> Converts color HEX to <see cref="T:System.Windows.Media.SolidColorBrush"/>, e.g. "#FF000000" -> Brush.Black </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.FromArgb(System.Windows.Media.SolidColorBrush,System.UInt32)">
            <summary> Converts color ARBG to <see cref="T:System.Windows.Media.SolidColorBrush"/>, e.g. 0xFF000000 -> Brush.Black </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.FromColor(System.Windows.Media.SolidColorBrush,System.Windows.Media.Color)">
            <summary> Converts <see cref="T:System.Windows.Media.Color"/> to <see cref="T:System.Windows.Media.SolidColorBrush"/>, e.g. Color.Black -> Brush.Black </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToBrush(System.UInt32)">
            <summary> Converts color ARBG to <see cref="T:System.Windows.Media.SolidColorBrush"/>, e.g. 0xFF000000 -> Brush.Black </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToArgb(System.Windows.Media.SolidColorBrush)">
            <summary> Converts <see cref="T:System.Windows.Media.SolidColorBrush"/> to color ARBG, e.g. Brush.Black -> 0xFF000000 </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToHex(System.Windows.Media.SolidColorBrush)">
            <summary> Converts <see cref="T:System.Windows.Media.SolidColorBrush"/> to color HEX string, e.g. Brush.Black -> "#FF000000"   </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToColor(System.Windows.Media.SolidColorBrush)">
            <summary> Converts <see cref="T:System.Windows.Media.SolidColorBrush"/> to <see cref="T:System.Windows.Media.Color"/>, e.g. Brush.Black -> Color.Black </summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToColor(System.Windows.Media.Brush)">
            <summary> Converts <see cref="T:System.Windows.Media.Brush"/> to <see cref="T:System.Windows.Media.Color"/></summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToColors(System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.Brush"/> to a list of <see cref="T:System.Windows.Media.Color"/></summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToGradientBrush(System.Collections.Generic.IEnumerable{System.Windows.Media.Color})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.Color"/> to <see cref="T:System.Windows.Media.LinearGradientBrush"/></summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToGradientBrush(System.Collections.Generic.List{System.Windows.Media.Color})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.Color"/> to <see cref="T:System.Windows.Media.LinearGradientBrush"/></summary>
        </member>
        <member name="M:System.Windows.Media.BrushEx.ToGradientBrush(System.Collections.Generic.List{System.Windows.Media.Brush})">
            <summary> Converts a list of <see cref="T:System.Windows.Media.Brush"/> to <see cref="T:System.Windows.Media.LinearGradientBrush"/></summary>
        </member>
        <member name="T:System.Windows.Media.NamedColor">
            <summary>
            Represents a named color and provides conversion between different representations of colors:
            <para><see cref="P:System.Windows.Media.NamedColor.Color"/>, Color Hex string, Color ARGB integer</para>
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColor.Color">
            <summary>
            Gets or sets <see cref="P:System.Windows.Media.NamedColor.Color"/> property
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColor.ColorName">
            <summary>
            Gets or sets Color name property
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColor.ColorCode">
            <summary>
            Gets or sets Color ARGB integer property
            </summary>
        </member>
        <member name="M:System.Windows.Media.NamedColor.ToColor">
            <summary>
            Converts this object to <see cref="P:System.Windows.Media.NamedColor.Color"/> 
            </summary>
        </member>
        <member name="M:System.Windows.Media.NamedColor.ToBrush">
            <summary>
            Converts this object to <see cref="T:System.Windows.Media.SolidColorBrush"/> 
            </summary>
        </member>
        <member name="M:System.Windows.Media.NamedColor.Blend(System.Windows.Media.Color,System.Double)">
            <summary>Blends the this color with specified color together</summary>
            <param name="withColor">Color to blend the this color</param>
            <param name="amount">How much of specified color to blend with this color</param>
            <returns>The blended color</returns>
        </member>
        <member name="M:System.Windows.Media.NamedColor.FromHex(System.String)">
            <summary>
            Converts color HEX string to NamedColor, e.g. "0xFF000000" -> Black
            </summary>
        </member>
        <member name="M:System.Windows.Media.NamedColor.FromHex(System.UInt32)">
            <summary>
            Converts color ARBG to NamedColor, e.g. 0xFF000000 -> Black
            </summary>
        </member>
        <member name="M:System.Windows.Media.NamedColor.FromColor(System.Windows.Media.Color)">
            <summary>
            Converts <see cref="P:System.Windows.Media.NamedColor.Color"/> to NamedColor, e.g. Colors.Black -> Black
            </summary>
        </member>
        <member name="T:System.Windows.Media.NameColorList">
            <summary>
            Represents a list of <see cref="T:System.Windows.Media.NamedColor"/> and provides additional list of color names, color codes, and <see cref="T:System.Windows.Media.Color"/> objects
            </summary>
        </member>
        <member name="T:System.Windows.Media.NamedColors">
            <summary>
            Represents a static class that provides all named colors as individual <see cref="T:System.Windows.Media.NamedColor"/> and as <see cref="T:System.Windows.Media.NameColorList"/>
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColors.List">
            <summary>
            Gets a <see cref="T:System.Windows.Media.NameColorList"/> with all named colors
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColors.Names">
            <summary>
            Gets a list of names of all named colors
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColors.Codes">
            <summary>
            Gets a list of codes (ARGB values) of all named colors
            </summary>
        </member>
        <member name="P:System.Windows.Media.NamedColors.Colors">
            <summary>
            Gets a list of <see cref="T:System.Windows.Media.Color"/> of all named colors
            </summary>
        </member>
        <member name="M:System.Windows.Media.ColorCollection.ReverseItems">
            <summary>Converts brushes in BrushCollection to LinearGradientBrush </summary>
        </member>
        <member name="T:System.Windows.FrameworkElementEx">
            <summary>
            Provides extension methods for <seealso cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:System.Windows.FrameworkElementEx.ApplyStyle(System.Windows.FrameworkElement,System.String)">
            <summary>
            Applies style at location of resources to the current <seealso cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.FrameworkElementEx"/></remarks>
        </member>
        <member name="M:System.Windows.FrameworkElementEx.ToBitmap(System.Windows.FrameworkElement)">
            <summary>
            Converts the current <seealso cref="T:System.Windows.FrameworkElement"/> to a <seealso cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>
            </summary>
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.FrameworkElementEx"/></remarks>
        </member>
        <member name="M:System.Windows.FrameworkElementEx.CreateBitmap(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Creates <seealso cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> from a <seealso cref="T:System.Windows.FrameworkElement"/> to 
            </summary>
            <remarks>This is an extension method provided by <seealso cref="T:System.Windows.FrameworkElementEx"/></remarks>
        </member>
        <member name="M:System.Windows.Controls.ImageEx.ToBitmapSource(System.Windows.Controls.Image)">
            <summary>
            Converts Image control to BitmapSource
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ImageEx.IsEmpty(System.Windows.Controls.Image)">
            <summary>
            Checks if the Image control is empty (all pixels are blank)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ImageEx.GetPixels(System.Windows.Controls.Image)">
            <summary>
            Gets array of Pixels that builds this Image
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.MidPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates mid point between two points
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.DistanceVector(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates a vector that represents distance from the current point to the other point
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance from the current point to the other point
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.DistanceSquared(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance squared from the current point to the other point
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Double)">
            <summary>
            Shifts a point by the offset value 
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Shifts a point by the offset values 
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Windows.Point)">
            <summary>
            Shifts a point by the offset Point 
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Windows.Point,System.Windows.Rect)">
            <summary>
            Shifts a point by the offset Point within bounds Rect
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Double,System.Windows.Rect)">
            <summary>
            Shifts a point by the offset value within bounds Rect
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Shift(System.Windows.Point,System.Double,System.Double,System.Windows.Rect)">
            <summary>
            Shifts a point by the offset values within bounds Rect
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Min(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets a point calculated from minimum of X and Y values for two points 
            </summary>
        </member>
        <member name="M:System.Windows.PointEx.Max(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets a point calculated from maximum of X and Y values for two points 
            </summary>
        </member>
        <member name="M:System.Windows.RectEx.Contains(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the current rectangle wholly contains the specified rectangle.
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">Rectangle to test for strict inclusion</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.RectEx.Area(System.Windows.Rect)">
            <summary>
            Calculates the area of the current rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>The area of the current rectangle.</returns>
        </member>
        <member name="M:System.Windows.RectEx.Center(System.Windows.Rect)">
            <summary>
            Gets the center of the current rectangle
            </summary>
        </member>
        <member name="M:System.Windows.RectEx.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle. 
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.RectEx.IntersectionArea(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates the area of intersection between the specified rectangle and the current rectangle
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>The area of intersection or 0.0 if the rectangles do not intersect.</returns>
        </member>
        <member name="M:System.Windows.RectEx.DistanceSquared(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Calculates the square of the distance from the current rectangle to the specified point. 
            </summary>
            <remarks>
            If the point lies within the current rectangle, the separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="pt">Point to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:System.Windows.RectEx.DistanceSquared(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Calculates the square of the distance from the current rectangle to the specified point. 
            </summary>
            <param name="rect">Current rectangle.</param>
            <param name="x">Point X coordinate.</param>
            <param name="y">Point Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.RectEx.DistanceSquared(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates the square of the distance from the current rectangle to the specified rectangle. 
            </summary>
            <remarks>
            If the rectangles intersect, their separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="rc">Rectangle to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:System.Windows.RectEx.ToPoints(System.Windows.Rect)">
            <summary>
            Converts shape of <see cref="T:System.Windows.Rect"/> to a List of <see cref="T:System.Windows.Point"/>
            </summary>
        </member>
        <member name="M:System.Windows.RectEx.ToShapePoints(System.Windows.Rect)">
            <summary>
            Converts shape of <see cref="T:System.Windows.Rect"/> to a List of List of <see cref="T:System.Windows.Point"/>
            </summary>
        </member>
        <member name="T:System.Windows.VisualTreeEx">
            <summary>
            Provides extensions working with elements and descendents in VisualTree (DependencyObject)
            <remarks>source: http://www.scottlogic.co.uk/blog/colin/2010/03/linq-to-visual-tree/ </remarks>
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.Ancestors(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of ancestor elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.AncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Returns a collection containing this element and all ancestor elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.Ancestors``1(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of ancestor elements which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.AncestorsAndSelf``1(System.Windows.DependencyObject)">
            <summary>
            Returns a collection containing this element and all ancestor elements
            which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.Descendents(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of descendant elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.DescendentsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Returns a collection containing this element and all descendant elements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.Descendents``1(System.Windows.DependencyObject)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.DescendentsAndSelf``1(System.Windows.DependencyObject)" -->
        <member name="M:System.Windows.VisualTreeEx.Elements(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of child elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.ElementsBeforeSelf(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of the sibling elements before this node, in document order.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.ElementsAfterSelf(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of the after elements after this node, in document order.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEx.ElementsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Returns a collection containing this element and all child elements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.ElementsBeforeSelf``1(System.Windows.DependencyObject)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.ElementsAfterSelf``1(System.Windows.DependencyObject)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.Elements``1(System.Windows.DependencyObject)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Windows.VisualTreeEx.ElementsAndSelf``1(System.Windows.DependencyObject)" -->
        <member name="T:System.Windows.VisualTreeAdapter">
            <summary>
            Adapts a DependencyObject to provide methods required for generate
            a Linq To Tree API
            </summary>
        </member>
        <member name="T:System.Windows.ILinqVisualTree`1">
            <summary>
            Defines an interface that must be implemented to generate the LinqToTree methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Windows.VisualTreeEnumerableEx">
            <summary>
            Provides extensions working with list of elements and descendents in VisualTree (DependencyObject)
            <remarks>source: http://www.scottlogic.co.uk/blog/colin/2010/03/linq-to-visual-tree/ </remarks>
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.DrillDown(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject},System.Func{System.Windows.DependencyObject,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Applies the given function to each of the items in the supplied
            IEnumerable.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.DrillDown``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject},System.Func{System.Windows.DependencyObject,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Applies the given function to each of the items in the supplied
            IEnumerable, which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Descendents(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of descendant elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.DescendentsAndSelf(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all descendant elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Descendents``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of descendant elements which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.DescendentsAndSelf``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all descendant elements.
            which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Ancestors(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of ancestor elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all ancestor elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Ancestors``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of ancestor elements which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all ancestor elements.
            which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Elements(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of child elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.ElementsAndSelf(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all child elements.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.Elements``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection of child elements which match the given type.
            </summary>
        </member>
        <member name="M:System.Windows.VisualTreeEnumerableEx.ElementsAndSelf``1(System.Collections.Generic.IEnumerable{System.Windows.DependencyObject})">
            <summary>
            Returns a collection containing this element and all child elements.
            which match the given type.
            </summary>
        </member>
        <member name="F:System.Reflection.AssemblyEx.AssemblyPack">
            <summary>
            Gets the application pack string: "pack://application:,,,"
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyPack(System.Reflection.Assembly)">
            <summary>
            Returns the pack for a given assembly.
            <para>For example: pack://application:,,,/[assemblyName];component</para>
            <para>where [assemblyName] is a name of the assembly</para>
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyPack(System.String)">
            <summary>
            Returns assembly pack for a given assembly name.
            <para>For example: pack://application:,,,/[assemblyName];component</para>
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Returns the name of a given assembly
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyComponent(System.Reflection.Assembly)">
            <summary>
            Returns the component of a given assembly
            <para>For example: /[assemblyName];component</para>
            <para>where [assemblyName] is a name of the assembly</para>
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyComponent(System.String)">
            <summary>
            Returns the component path for a given assembly name
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns path to location of a given assembly
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Returns a custom attribute for the currant assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyEx.GetAssemblyAttribute(System.Reflection.Assembly,System.Reflection.AssemblyAttributes)">
            <summary>
            Returns a value of custom attribute for the currant assembly.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.DictionaryEx">
            <summary>
            Represents an extension for IDictionary
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryEx.ToListString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts IDictionary &lt;string, string&gt; to a string
            </summary>
            <param name="queryString"></param>
            <returns></returns>
            <remarks>This is an extension method provided by <seealso cref="T:System.Collections.Generic.DictionaryEx"/></remarks>
        </member>
        <member name="M:System.Collections.Generic.EnumerableGenEx.ElementAtOrNext``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary> Gets element at index or it modulus index </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableGenEx.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each object in the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The collection.</param>
            <param name="action">The action to perform.</param>
            <returns></returns>
            <remarks>This is an extension method provided by <seealso cref="T:System.Collections.EnumerableEx"/></remarks>
        </member>
        <member name="M:System.DateTimeEx.ToDateTime(System.Int64)">
            <summary>
            Converts a long value to date time 
            </summary>
            <param name="longTime">In in milliseconds since the epoch: 1970, 1, 1 </param>
        </member>
        <member name="M:System.DateTimeEx.ToLocalTime(System.Int64)">
            <summary>
            Converts a long value to local date time 
            </summary>
            <param name="longTime">In in milliseconds since the epoch: 1970, 1, 1 </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.EventEx.Raise``1(System.EventHandler{System.EventArgs{``0}},System.Object,``0)" -->
        <member name="M:System.EventEx.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Performs check if a event has event handler (null reference) before raising the event
            <code>  MyEvent.Raise(this, e);  </code>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.EventEx.Raise``1(System.EventHandler{``0},System.Object,``0)" -->
        <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileEx.IsEnoughSpaceInIsoStorage(System.IO.IsolatedStorage.IsolatedStorageFile,System.Int64)">
            <summary>
            Checks if Isolated Storage has enough space to save a file of a given size.
            </summary>
            <param name="iso"></param>
            <param name="requiredSpace">The required space of a a file in bytes</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileEx.IncreaseIsoStorage(System.IO.IsolatedStorage.IsolatedStorageFile,System.Int64)">
            <summary>
            Performs an increase in space for saving files in Isolated Storage 
            </summary>
            <param name="iso"></param>
            <param name="requiredSpace">The required space of a a file in bytes</param>
            <returns></returns>
        </member>
        <member name="T:System.IO.IsolatedStorage.IsolatedStorageProvider">
            <summary>
            Represents an Toolity class with useful methods when working with files in Isolated Storage 
            </summary>
        </member>
        <member name="M:System.IO.IsolatedStorage.IsolatedStorageProvider.IsEnoughSpaceInIsoStorage(System.Int64)">
            <summary>
            Checks if Isolated Storage has enough space to save a file of a given size.
            </summary>
            <param name="requiredSpace">The required space of a a file in bytes</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.IsolatedStorage.IsolatedStorageProvider.IncreaseIsoStorage(System.Int64)">
            <summary>
            Performs an increase in space for saving files in Isolated Storage 
            </summary>
            <param name="requiredSpace">The required space of a a file in bytes</param>
            <returns></returns>
        </member>
        <member name="F:System.IO.IsolatedStorage.IsolatedStorageIncreaseRespond.Accepted">
            <summary>
            Accepted respond happens when the end-user accepted an increase in IsolatedStorage
            </summary>
        </member>
        <member name="F:System.IO.IsolatedStorage.IsolatedStorageIncreaseRespond.Declined">
            <summary>
            Declined respond happens when the end-user declined an increase in IsolatedStorage
            </summary>
        </member>
        <member name="F:System.IO.IsolatedStorage.IsolatedStorageIncreaseRespond.NotNeeded">
            <summary>
            Not Needed respond happens when AvailableFreeSpace is greater than required space
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.PropertyEx.GetPropValue(System.Object,System.String)" -->
        <member name="M:System.StringEx.ToTitle(System.String)">
            <summary>
             Converts string to title case
            </summary>
        </member>
        <member name="M:System.StringEx.Remove(System.String,System.String)">
            <summary>
             Converts removes specified string from the current string
            </summary>
        </member>
        <member name="M:System.StringEx.SubstringTo(System.String,System.String)">
            <summary>
             Returns a new string that ends at the first occurrence of specified string in the current string
            </summary>
        </member>
        <member name="M:System.StringEx.SubstringFrom(System.String,System.String)">
            <summary>
             Returns a new string that starts from the first occurrence of specified string in the current string
            </summary>
        </member>
        <member name="M:System.StringEx.SubstringBetween(System.String,System.String,System.String)">
            <summary>
             Returns a new string that enclosed between two specified strings in the current string
            </summary>
        </member>
        <member name="M:System.StringEx.Match(System.String,System.String)">
            <summary>
            Matches pattern in any string using Regex
            <para>Example: string.Match("[0-9]"</para>
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:System.Xml.Linq.XAttributeExtension">
            <summary>
            Extension Methods for the XAttribute class.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetBool(System.Xml.Linq.XAttribute)">
            <summary>
            Get the value for an attribute as a <see cref="T:System.Boolean"/>
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetDecimal(System.Xml.Linq.XAttribute)">
            <summary>
            Get the value for an attribute as a <see cref="T:System.Decimal"/>
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetInt(System.Xml.Linq.XAttribute)">
            <summary>
            Get the value for an attribute as a <see cref="T:System.Int32"/>
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetDouble(System.Xml.Linq.XAttribute)">
            <summary>
            Get the value for an attribute as a <see cref="T:System.Double"/>
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetDateTime(System.Xml.Linq.XAttribute)">
            <summary>
            Get the value for an attribute as a <see cref="T:System.DateTime"/>
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttributeExtension.GetString(System.Xml.Linq.XAttribute)">
            <summary>
            Check to see if this element is valid and return its value. When its missing return string.empty.
            </summary>
            <param name="attribute">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetDecimal(System.Xml.Linq.XElement)">
            <summary>
            Get the value for an element as a <see cref="T:System.Decimal"/>
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetInt(System.Xml.Linq.XElement)">
            <summary>
            Get the value for an element as a <see cref="T:System.Int32"/>
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetDouble(System.Xml.Linq.XElement)">
            <summary>
            Get the value for an element as a <see cref="T:System.Double"/>
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetDateTime(System.Xml.Linq.XElement)">
            <summary>
            Get the value for an element as a <see cref="T:System.DateTime"/>
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetString(System.Xml.Linq.XElement)">
            <summary>
            Check to see if this element is valid and return its value. When its missing return string.empty.
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="M:System.Xml.Linq.XElementExtension.GetBool(System.Xml.Linq.XElement)">
            <summary>
            Check to see if this element is valid and return its value. When its missing return string.empty.
            </summary>
            <param name="element">Class being extended</param>
            <returns>The value from an element</returns>
        </member>
        <member name="T:System.Randomizer">
            <summary>
            Represents an utility for creating random generators
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LargeNumbersConverter.LargeUnits">
            <summary> Gets or sets Units, defaults to { "K", "M", "B", "T", "P", "E" } </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LargeNumbersConverter.ThresholdMin">
            <summary> Gets or sets Threshold for rounding numbers, defaults 1000 </summary>
        </member>
        <member name="F:Infragistics.Notation.None">
            <summary> Specifiies numbers in no form, 5200 for 5200 </summary>
        </member>
        <member name="F:Infragistics.Notation.Metric">
            <summary> Specifiies numbers in form of "N:0.0 Symbol", where N is multiplier of "k", "M", "G", "T", or "P" symbol </summary>
        </member>
        <member name="F:Infragistics.Notation.Financial">
            <summary> Specifiies numbers in form of "N:0.0 Symbol", where N is multiplier of "K", "M", "B", "T", or "Q" symbol </summary>
        </member>
        <member name="F:Infragistics.Notation.Power10">
            <summary> Specifiies numbers in form of "10^P" (ten raised to P power) </summary>
        </member>
        <member name="F:Infragistics.Notation.Power10X">
            <summary> Specifiies numbers in form of "N:0.0 x10^P" (N times ten raised to P power), e.g. 5.2 x10^3 is 5200 </summary>
        </member>
        <member name="F:Infragistics.Notation.ScientificE">
            <summary> Specifiies numbers in form of "N:0.0 E+P" (N times ten raised to P power), e.g. 5.2 E+3 is 5200 </summary>
        </member>
        <member name="F:Infragistics.Notation.ScientificE0">
            <summary> Specifiies numbers in form of "N:0.0 E+0P" (N times ten raised to P power), e.g. 5.2 E+03 is 5200 </summary>
        </member>
        <member name="F:Infragistics.Notation.ScientificE00">
            <summary> Specifiies numbers in form of "N:0.0 E+00P" (N times ten raised to P power), e.g. 5.2 E+003 is 5200 </summary>
        </member>
        <member name="F:Infragistics.Notation.Hexadecimal">
            <summary> Specifiies numbers in form of Hexadecimal, 0000014D is 333 </summary>
        </member>
        <member name="T:Infragistics.Framework.CsvDataTable">
            <summary>
            Represents csv file as data table with rows of strings
            </summary>
        </member>
        <member name="P:Infragistics.Framework.CsvDataTable.Rows">
            <summary> Gets or sets Rows </summary>
        </member>
        <member name="P:Infragistics.Framework.CsvDataTable.Columns">
            <summary> Gets a dictionary of names and indexes for data columns </summary>
        </member>
        <member name="P:Infragistics.Framework.CsvDataTable.Item(System.String)">
            <summary> Gets index of column with specified name </summary>
        </member>
        <member name="P:Infragistics.Framework.CsvDataTable.Item(System.Int32)">
            <summary> Gets name of column with specified index </summary>
        </member>
        <member name="P:Infragistics.Framework.CsvDataTable.Item(System.Int32,System.String)">
            <summary> Gets item with specified row index and column name</summary>
        </member>
        <member name="P:Infragistics.Framework.DataProvider.Resources">
            <summary>
            Gets or sets Dictionary of Resource Name and Assemblies
            </summary>
        </member>
        <member name="P:Infragistics.Framework.DataProvider.Assemblies">
            <summary>
            Gets or sets Resource Assemblies
            </summary>
        </member>
        <member name="P:Infragistics.Framework.DataProvider.AssemblyNames">
            <summary>
            Gets Resource Names
            </summary>
        </member>
        <member name="P:Infragistics.Framework.DataProvider.ResourceNames">
            <summary>
            Gets Resource Names
            </summary>
        </member>
        <member name="M:Infragistics.Framework.DataProvider.ContainsFile(System.String,System.String@)">
            <summary>
            Checks if embedded resource exists with a name that ends with specified file name 
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.ContainsAssembly(System.Reflection.Assembly)">
            <summary>
            Checks if specified assembly and its embedded resources were registered
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds specified assembly and its embedded resources to registry
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetResource(System.String,System.Reflection.Assembly)">
            <summary>
            Gets stream of embedded resource file in specified assembly or already added assemblies
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetCodeFile(System.String,System.Reflection.Assembly)">
            <summary>
            Gets streams of source code files (/xaml and/or .cs) embedded in specified assembly or already added assemblies
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetTextFile(System.String,System.Reflection.Assembly)">
            <summary>
            Gets content of text file as list of strings
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetXmlFile(System.String,System.Reflection.Assembly)">
            <summary>
            Gets content of xml file as <see cref="T:System.Xml.Linq.XDocument"/>
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetCsvFile(System.String,System.Reflection.Assembly)">
            <summary>
            Gets content of csv file as list of list of strings
            </summary> 
        </member>
        <member name="M:Infragistics.Framework.DataProvider.GetCsvTable(System.String,System.Reflection.Assembly,System.Char)">
            <summary>
            Gets content of csv file as <see cref="T:Infragistics.Framework.CsvDataTable"/> object
            </summary> 
        </member>
        <member name="T:Infragistics.Framework.LogLevel">
            <summary> Specifies logging level of debug messages   </summary>
        </member>
        <member name="T:Infragistics.Framework.Logs">
            <summary> Represents logging utility with options to filter log messages </summary>
        </member>
        <member name="P:Infragistics.Framework.LogEventArgs.Message">
            <summary> Gets or sets Message </summary>
        </member>
        <member name="T:Infragistics.Framework.Services.WebService">
            <summary>
            Represents a cross-platform service for downloading data from web
            </summary>
        </member>
        <member name="T:Infragistics.Framework.Services.WebServiceCache">
            <summary> 
            Represents a service for caching data 
            </summary>
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.SetCacheDuration(System.TimeSpan)">
            <summary> Sets the duration of the cache </summary> 
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.UpdateCache(System.String,System.Object)">
            <summary> Updates the cache </summary> 
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.UpdateCache">
            <summary> Updates the cache </summary>
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.GetFromCache(System.String)">
            <summary> Gets from cached data if exists otherwise null </summary> 
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.HasCacheExpired(System.String)">
            <summary> Determines whether data cache has expired for specified key </summary> 
        </member>
        <member name="M:Infragistics.Framework.Services.WebServiceCache.HasCacheData(System.String)">
            <summary> Determines whether data is in cache for specified key </summary> 
        </member>
        <member name="T:Infragistics.Framework.Services.WebCacheDictionary">
            <summary> Represents data cache dictionary </summary>
        </member>
        <member name="T:Infragistics.Framework.Services.WebCacheItem`1">
            <summary> 
            Represents cache item for request of <see cref="T:Infragistics.Framework.Services.WebService"/>
            </summary>
        </member>
        <member name="P:Infragistics.Framework.Services.WebCacheItem`1.Data">
            <summary> 
            Gets or sets the cached data
            </summary>
        </member>
        <member name="P:Infragistics.Framework.Services.WebCacheItem`1.LastUpdate">
            <summary> 
            Gets last updated time for the cached web response
            </summary>
        </member>
        <member name="P:Infragistics.Framework.Services.WebCacheItem`1.IsExpired">
            <summary>
            Gets whether cache has expired for the cached web response
            </summary>
        </member>
        <member name="T:Infragistics.Framework.Services.WebServiceResponse">
            <summary>
            Represents a response for downloading data from <see cref="T:Infragistics.Framework.Services.WebService"/>
            </summary>
        </member>
        <member name="P:Infragistics.Framework.Services.WebServiceRequestCompletedArgs.Response">
            <summary> Gets or sets Response </summary>
        </member>
    </members>
</doc>
